// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module layernorm_write (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_V_data_V_din,
        out_V_data_V_full_n,
        out_V_data_V_write,
        out_V_id_V_din,
        out_V_id_V_full_n,
        out_V_id_V_write,
        out_V_dest_V_din,
        out_V_dest_V_full_n,
        out_V_dest_V_write,
        out_V_user_V_din,
        out_V_user_V_full_n,
        out_V_user_V_write,
        out_V_last_V_din,
        out_V_last_V_full_n,
        out_V_last_V_write,
        n_pipe4_V_V_dout,
        n_pipe4_V_V_empty_n,
        n_pipe4_V_V_read,
        in_write_V_V_0_dout,
        in_write_V_V_0_empty_n,
        in_write_V_V_0_read,
        in_write_V_V_1_dout,
        in_write_V_V_1_empty_n,
        in_write_V_V_1_read,
        in_write_V_V_2_dout,
        in_write_V_V_2_empty_n,
        in_write_V_V_2_read,
        in_write_V_V_3_dout,
        in_write_V_V_3_empty_n,
        in_write_V_V_3_read,
        in_write_V_V_4_dout,
        in_write_V_V_4_empty_n,
        in_write_V_V_4_read,
        in_write_V_V_5_dout,
        in_write_V_V_5_empty_n,
        in_write_V_V_5_read,
        in_write_V_V_6_dout,
        in_write_V_V_6_empty_n,
        in_write_V_V_6_read,
        in_write_V_V_7_dout,
        in_write_V_V_7_empty_n,
        in_write_V_V_7_read,
        in_write_V_V_8_dout,
        in_write_V_V_8_empty_n,
        in_write_V_V_8_read,
        in_write_V_V_9_dout,
        in_write_V_V_9_empty_n,
        in_write_V_V_9_read,
        in_write_V_V_10_dout,
        in_write_V_V_10_empty_n,
        in_write_V_V_10_read,
        in_write_V_V_11_dout,
        in_write_V_V_11_empty_n,
        in_write_V_V_11_read,
        in_write_V_V_12_dout,
        in_write_V_V_12_empty_n,
        in_write_V_V_12_read,
        in_write_V_V_13_dout,
        in_write_V_V_13_empty_n,
        in_write_V_V_13_read,
        in_write_V_V_14_dout,
        in_write_V_V_14_empty_n,
        in_write_V_V_14_read,
        in_write_V_V_15_dout,
        in_write_V_V_15_empty_n,
        in_write_V_V_15_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [511:0] out_V_data_V_din;
input   out_V_data_V_full_n;
output   out_V_data_V_write;
output  [7:0] out_V_id_V_din;
input   out_V_id_V_full_n;
output   out_V_id_V_write;
output  [7:0] out_V_dest_V_din;
input   out_V_dest_V_full_n;
output   out_V_dest_V_write;
output  [15:0] out_V_user_V_din;
input   out_V_user_V_full_n;
output   out_V_user_V_write;
output  [0:0] out_V_last_V_din;
input   out_V_last_V_full_n;
output   out_V_last_V_write;
input  [31:0] n_pipe4_V_V_dout;
input   n_pipe4_V_V_empty_n;
output   n_pipe4_V_V_read;
input  [31:0] in_write_V_V_0_dout;
input   in_write_V_V_0_empty_n;
output   in_write_V_V_0_read;
input  [31:0] in_write_V_V_1_dout;
input   in_write_V_V_1_empty_n;
output   in_write_V_V_1_read;
input  [31:0] in_write_V_V_2_dout;
input   in_write_V_V_2_empty_n;
output   in_write_V_V_2_read;
input  [31:0] in_write_V_V_3_dout;
input   in_write_V_V_3_empty_n;
output   in_write_V_V_3_read;
input  [31:0] in_write_V_V_4_dout;
input   in_write_V_V_4_empty_n;
output   in_write_V_V_4_read;
input  [31:0] in_write_V_V_5_dout;
input   in_write_V_V_5_empty_n;
output   in_write_V_V_5_read;
input  [31:0] in_write_V_V_6_dout;
input   in_write_V_V_6_empty_n;
output   in_write_V_V_6_read;
input  [31:0] in_write_V_V_7_dout;
input   in_write_V_V_7_empty_n;
output   in_write_V_V_7_read;
input  [31:0] in_write_V_V_8_dout;
input   in_write_V_V_8_empty_n;
output   in_write_V_V_8_read;
input  [31:0] in_write_V_V_9_dout;
input   in_write_V_V_9_empty_n;
output   in_write_V_V_9_read;
input  [31:0] in_write_V_V_10_dout;
input   in_write_V_V_10_empty_n;
output   in_write_V_V_10_read;
input  [31:0] in_write_V_V_11_dout;
input   in_write_V_V_11_empty_n;
output   in_write_V_V_11_read;
input  [31:0] in_write_V_V_12_dout;
input   in_write_V_V_12_empty_n;
output   in_write_V_V_12_read;
input  [31:0] in_write_V_V_13_dout;
input   in_write_V_V_13_empty_n;
output   in_write_V_V_13_read;
input  [31:0] in_write_V_V_14_dout;
input   in_write_V_V_14_empty_n;
output   in_write_V_V_14_read;
input  [31:0] in_write_V_V_15_dout;
input   in_write_V_V_15_empty_n;
output   in_write_V_V_15_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[511:0] out_V_data_V_din;
reg[0:0] out_V_last_V_din;
reg n_pipe4_V_V_read;
reg in_write_V_V_0_read;
reg in_write_V_V_1_read;
reg in_write_V_V_2_read;
reg in_write_V_V_3_read;
reg in_write_V_V_4_read;
reg in_write_V_V_5_read;
reg in_write_V_V_6_read;
reg in_write_V_V_7_read;
reg in_write_V_V_8_read;
reg in_write_V_V_9_read;
reg in_write_V_V_10_read;
reg in_write_V_V_11_read;
reg in_write_V_V_12_read;
reg in_write_V_V_13_read;
reg in_write_V_V_14_read;
reg in_write_V_V_15_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_627;
reg    out_V_id_V_blk_n;
reg    out_V_dest_V_blk_n;
reg    out_V_user_V_blk_n;
reg    out_V_last_V_blk_n;
reg    n_pipe4_V_V_blk_n;
reg    in_write_V_V_0_blk_n;
reg    in_write_V_V_1_blk_n;
reg    in_write_V_V_2_blk_n;
reg    in_write_V_V_3_blk_n;
reg    in_write_V_V_4_blk_n;
reg    in_write_V_V_5_blk_n;
reg    in_write_V_V_6_blk_n;
reg    in_write_V_V_7_blk_n;
reg    in_write_V_V_8_blk_n;
reg    in_write_V_V_9_blk_n;
reg    in_write_V_V_10_blk_n;
reg    in_write_V_V_11_blk_n;
reg    in_write_V_V_12_blk_n;
reg    in_write_V_V_13_blk_n;
reg    in_write_V_V_14_blk_n;
reg    in_write_V_V_15_blk_n;
reg   [37:0] indvar_flatten_reg_495;
reg   [5:0] j_i_reg_506;
wire   [37:0] bound_fu_542_p2;
reg   [37:0] bound_reg_622;
wire    out_V_id_V1_status;
reg    ap_block_state1;
wire   [0:0] exitcond_flatten_fu_548_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [37:0] indvar_flatten_next_fu_553_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] out_data_last_V_fu_573_p2;
reg   [0:0] out_data_last_V_reg_636;
wire   [5:0] j_fu_579_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    out_V_id_V1_update;
wire   [511:0] out_data_data_V_fu_517_p1;
wire   [511:0] temp_0_V_fu_585_p17;
reg    ap_block_pp0_stage0_01001;
wire   [35:0] tmp_fu_530_p3;
wire   [37:0] p_shl_fu_522_p3;
wire   [37:0] p_shl2_fu_538_p1;
wire   [0:0] tmp_1_i3_fu_559_p2;
wire   [5:0] j_i_mid2_fu_565_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_548_p2 == 1'd0))) begin
        indvar_flatten_reg_495 <= indvar_flatten_next_fu_553_p2;
    end else if ((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_495 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_548_p2 == 1'd0))) begin
        j_i_reg_506 <= j_fu_579_p2;
    end else if ((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_i_reg_506 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_622[37 : 4] <= bound_fu_542_p2[37 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_627 <= exitcond_flatten_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_548_p2 == 1'd0))) begin
        out_data_last_V_reg_636 <= out_data_last_V_fu_573_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_548_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_0_blk_n = in_write_V_V_0_empty_n;
    end else begin
        in_write_V_V_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_0_read = 1'b1;
    end else begin
        in_write_V_V_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_10_blk_n = in_write_V_V_10_empty_n;
    end else begin
        in_write_V_V_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_10_read = 1'b1;
    end else begin
        in_write_V_V_10_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_11_blk_n = in_write_V_V_11_empty_n;
    end else begin
        in_write_V_V_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_11_read = 1'b1;
    end else begin
        in_write_V_V_11_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_12_blk_n = in_write_V_V_12_empty_n;
    end else begin
        in_write_V_V_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_12_read = 1'b1;
    end else begin
        in_write_V_V_12_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_13_blk_n = in_write_V_V_13_empty_n;
    end else begin
        in_write_V_V_13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_13_read = 1'b1;
    end else begin
        in_write_V_V_13_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_14_blk_n = in_write_V_V_14_empty_n;
    end else begin
        in_write_V_V_14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_14_read = 1'b1;
    end else begin
        in_write_V_V_14_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_15_blk_n = in_write_V_V_15_empty_n;
    end else begin
        in_write_V_V_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_15_read = 1'b1;
    end else begin
        in_write_V_V_15_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_1_blk_n = in_write_V_V_1_empty_n;
    end else begin
        in_write_V_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_1_read = 1'b1;
    end else begin
        in_write_V_V_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_2_blk_n = in_write_V_V_2_empty_n;
    end else begin
        in_write_V_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_2_read = 1'b1;
    end else begin
        in_write_V_V_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_3_blk_n = in_write_V_V_3_empty_n;
    end else begin
        in_write_V_V_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_3_read = 1'b1;
    end else begin
        in_write_V_V_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_4_blk_n = in_write_V_V_4_empty_n;
    end else begin
        in_write_V_V_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_4_read = 1'b1;
    end else begin
        in_write_V_V_4_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_5_blk_n = in_write_V_V_5_empty_n;
    end else begin
        in_write_V_V_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_5_read = 1'b1;
    end else begin
        in_write_V_V_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_6_blk_n = in_write_V_V_6_empty_n;
    end else begin
        in_write_V_V_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_6_read = 1'b1;
    end else begin
        in_write_V_V_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_7_blk_n = in_write_V_V_7_empty_n;
    end else begin
        in_write_V_V_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_7_read = 1'b1;
    end else begin
        in_write_V_V_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_8_blk_n = in_write_V_V_8_empty_n;
    end else begin
        in_write_V_V_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_8_read = 1'b1;
    end else begin
        in_write_V_V_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_write_V_V_9_blk_n = in_write_V_V_9_empty_n;
    end else begin
        in_write_V_V_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        in_write_V_V_9_read = 1'b1;
    end else begin
        in_write_V_V_9_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_pipe4_V_V_blk_n = n_pipe4_V_V_empty_n;
    end else begin
        n_pipe4_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_pipe4_V_V_read = 1'b1;
    end else begin
        n_pipe4_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_data_V_blk_n = out_V_data_V_full_n;
    end else begin
        out_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        out_V_data_V_din = temp_0_V_fu_585_p17;
    end else if ((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_data_V_din = out_data_data_V_fu_517_p1;
    end else begin
        out_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_dest_V_blk_n = out_V_dest_V_full_n;
    end else begin
        out_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0)))) begin
        out_V_id_V1_update = 1'b1;
    end else begin
        out_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_id_V_blk_n = out_V_id_V_full_n;
    end else begin
        out_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_last_V_blk_n = out_V_last_V_full_n;
    end else begin
        out_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0))) begin
        out_V_last_V_din = out_data_last_V_reg_636;
    end else if ((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_last_V_din = 1'd0;
    end else begin
        out_V_last_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_user_V_blk_n = out_V_user_V_full_n;
    end else begin
        out_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_548_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_548_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((in_write_V_V_15_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_14_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_13_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_12_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_11_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_10_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_9_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_8_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_7_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_6_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_5_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_4_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_3_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_2_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_1_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_0_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((out_V_id_V1_status == 1'b0) & (exitcond_flatten_reg_627 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((in_write_V_V_15_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_14_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_13_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_12_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_11_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_10_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_9_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_8_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_7_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_6_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_5_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_4_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_3_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_2_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_1_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_0_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((out_V_id_V1_status == 1'b0) & (exitcond_flatten_reg_627 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((in_write_V_V_15_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_14_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_13_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_12_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_11_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_10_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_9_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_8_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_7_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_6_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_5_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_4_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_3_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_2_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_1_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_0_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((out_V_id_V1_status == 1'b0) & (exitcond_flatten_reg_627 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (n_pipe4_V_V_empty_n == 1'b0) | (out_V_id_V1_status == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((in_write_V_V_15_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_14_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_13_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_12_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_11_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_10_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_9_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_8_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_7_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_6_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_5_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_4_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_3_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_2_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_1_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((in_write_V_V_0_empty_n == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)) | ((out_V_id_V1_status == 1'b0) & (exitcond_flatten_reg_627 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_542_p2 = (p_shl_fu_522_p3 - p_shl2_fu_538_p1);

assign exitcond_flatten_fu_548_p2 = ((indvar_flatten_reg_495 == bound_reg_622) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_553_p2 = (indvar_flatten_reg_495 + 38'd1);

assign j_fu_579_p2 = (j_i_mid2_fu_565_p3 + 6'd1);

assign j_i_mid2_fu_565_p3 = ((tmp_1_i3_fu_559_p2[0:0] === 1'b1) ? 6'd0 : j_i_reg_506);

assign out_V_data_V_write = out_V_id_V1_update;

assign out_V_dest_V_din = 8'd30;

assign out_V_dest_V_write = out_V_id_V1_update;

assign out_V_id_V1_status = (out_V_user_V_full_n & out_V_last_V_full_n & out_V_id_V_full_n & out_V_dest_V_full_n & out_V_data_V_full_n);

assign out_V_id_V_din = 8'd29;

assign out_V_id_V_write = out_V_id_V1_update;

assign out_V_last_V_write = out_V_id_V1_update;

assign out_V_user_V_din = 16'd49;

assign out_V_user_V_write = out_V_id_V1_update;

assign out_data_data_V_fu_517_p1 = n_pipe4_V_V_dout;

assign out_data_last_V_fu_573_p2 = ((j_i_mid2_fu_565_p3 == 6'd47) ? 1'b1 : 1'b0);

assign p_shl2_fu_538_p1 = tmp_fu_530_p3;

assign p_shl_fu_522_p3 = {{n_pipe4_V_V_dout}, {6'd0}};

assign temp_0_V_fu_585_p17 = {{{{{{{{{{{{{{{{in_write_V_V_15_dout}, {in_write_V_V_14_dout}}, {in_write_V_V_13_dout}}, {in_write_V_V_12_dout}}, {in_write_V_V_11_dout}}, {in_write_V_V_10_dout}}, {in_write_V_V_9_dout}}, {in_write_V_V_8_dout}}, {in_write_V_V_7_dout}}, {in_write_V_V_6_dout}}, {in_write_V_V_5_dout}}, {in_write_V_V_4_dout}}, {in_write_V_V_3_dout}}, {in_write_V_V_2_dout}}, {in_write_V_V_1_dout}}, {in_write_V_V_0_dout}};

assign tmp_1_i3_fu_559_p2 = ((j_i_reg_506 == 6'd48) ? 1'b1 : 1'b0);

assign tmp_fu_530_p3 = {{n_pipe4_V_V_dout}, {4'd0}};

always @ (posedge ap_clk) begin
    bound_reg_622[3:0] <= 4'b0000;
end

endmodule //layernorm_write
