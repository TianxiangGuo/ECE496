// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _layernorm_write_HH_
#define _layernorm_write_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct layernorm_write : public sc_module {
    // Port declarations 73
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<512> > out_V_data_V_din;
    sc_in< sc_logic > out_V_data_V_full_n;
    sc_out< sc_logic > out_V_data_V_write;
    sc_out< sc_lv<8> > out_V_id_V_din;
    sc_in< sc_logic > out_V_id_V_full_n;
    sc_out< sc_logic > out_V_id_V_write;
    sc_out< sc_lv<8> > out_V_dest_V_din;
    sc_in< sc_logic > out_V_dest_V_full_n;
    sc_out< sc_logic > out_V_dest_V_write;
    sc_out< sc_lv<16> > out_V_user_V_din;
    sc_in< sc_logic > out_V_user_V_full_n;
    sc_out< sc_logic > out_V_user_V_write;
    sc_out< sc_lv<1> > out_V_last_V_din;
    sc_in< sc_logic > out_V_last_V_full_n;
    sc_out< sc_logic > out_V_last_V_write;
    sc_in< sc_lv<32> > n_pipe4_V_V_dout;
    sc_in< sc_logic > n_pipe4_V_V_empty_n;
    sc_out< sc_logic > n_pipe4_V_V_read;
    sc_in< sc_lv<32> > in_write_V_V_0_dout;
    sc_in< sc_logic > in_write_V_V_0_empty_n;
    sc_out< sc_logic > in_write_V_V_0_read;
    sc_in< sc_lv<32> > in_write_V_V_1_dout;
    sc_in< sc_logic > in_write_V_V_1_empty_n;
    sc_out< sc_logic > in_write_V_V_1_read;
    sc_in< sc_lv<32> > in_write_V_V_2_dout;
    sc_in< sc_logic > in_write_V_V_2_empty_n;
    sc_out< sc_logic > in_write_V_V_2_read;
    sc_in< sc_lv<32> > in_write_V_V_3_dout;
    sc_in< sc_logic > in_write_V_V_3_empty_n;
    sc_out< sc_logic > in_write_V_V_3_read;
    sc_in< sc_lv<32> > in_write_V_V_4_dout;
    sc_in< sc_logic > in_write_V_V_4_empty_n;
    sc_out< sc_logic > in_write_V_V_4_read;
    sc_in< sc_lv<32> > in_write_V_V_5_dout;
    sc_in< sc_logic > in_write_V_V_5_empty_n;
    sc_out< sc_logic > in_write_V_V_5_read;
    sc_in< sc_lv<32> > in_write_V_V_6_dout;
    sc_in< sc_logic > in_write_V_V_6_empty_n;
    sc_out< sc_logic > in_write_V_V_6_read;
    sc_in< sc_lv<32> > in_write_V_V_7_dout;
    sc_in< sc_logic > in_write_V_V_7_empty_n;
    sc_out< sc_logic > in_write_V_V_7_read;
    sc_in< sc_lv<32> > in_write_V_V_8_dout;
    sc_in< sc_logic > in_write_V_V_8_empty_n;
    sc_out< sc_logic > in_write_V_V_8_read;
    sc_in< sc_lv<32> > in_write_V_V_9_dout;
    sc_in< sc_logic > in_write_V_V_9_empty_n;
    sc_out< sc_logic > in_write_V_V_9_read;
    sc_in< sc_lv<32> > in_write_V_V_10_dout;
    sc_in< sc_logic > in_write_V_V_10_empty_n;
    sc_out< sc_logic > in_write_V_V_10_read;
    sc_in< sc_lv<32> > in_write_V_V_11_dout;
    sc_in< sc_logic > in_write_V_V_11_empty_n;
    sc_out< sc_logic > in_write_V_V_11_read;
    sc_in< sc_lv<32> > in_write_V_V_12_dout;
    sc_in< sc_logic > in_write_V_V_12_empty_n;
    sc_out< sc_logic > in_write_V_V_12_read;
    sc_in< sc_lv<32> > in_write_V_V_13_dout;
    sc_in< sc_logic > in_write_V_V_13_empty_n;
    sc_out< sc_logic > in_write_V_V_13_read;
    sc_in< sc_lv<32> > in_write_V_V_14_dout;
    sc_in< sc_logic > in_write_V_V_14_empty_n;
    sc_out< sc_logic > in_write_V_V_14_read;
    sc_in< sc_lv<32> > in_write_V_V_15_dout;
    sc_in< sc_logic > in_write_V_V_15_empty_n;
    sc_out< sc_logic > in_write_V_V_15_read;


    // Module declarations
    layernorm_write(sc_module_name name);
    SC_HAS_PROCESS(layernorm_write);

    ~layernorm_write();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > out_V_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_627;
    sc_signal< sc_logic > out_V_id_V_blk_n;
    sc_signal< sc_logic > out_V_dest_V_blk_n;
    sc_signal< sc_logic > out_V_user_V_blk_n;
    sc_signal< sc_logic > out_V_last_V_blk_n;
    sc_signal< sc_logic > n_pipe4_V_V_blk_n;
    sc_signal< sc_logic > in_write_V_V_0_blk_n;
    sc_signal< sc_logic > in_write_V_V_1_blk_n;
    sc_signal< sc_logic > in_write_V_V_2_blk_n;
    sc_signal< sc_logic > in_write_V_V_3_blk_n;
    sc_signal< sc_logic > in_write_V_V_4_blk_n;
    sc_signal< sc_logic > in_write_V_V_5_blk_n;
    sc_signal< sc_logic > in_write_V_V_6_blk_n;
    sc_signal< sc_logic > in_write_V_V_7_blk_n;
    sc_signal< sc_logic > in_write_V_V_8_blk_n;
    sc_signal< sc_logic > in_write_V_V_9_blk_n;
    sc_signal< sc_logic > in_write_V_V_10_blk_n;
    sc_signal< sc_logic > in_write_V_V_11_blk_n;
    sc_signal< sc_logic > in_write_V_V_12_blk_n;
    sc_signal< sc_logic > in_write_V_V_13_blk_n;
    sc_signal< sc_logic > in_write_V_V_14_blk_n;
    sc_signal< sc_logic > in_write_V_V_15_blk_n;
    sc_signal< sc_lv<38> > indvar_flatten_reg_495;
    sc_signal< sc_lv<6> > j_i_reg_506;
    sc_signal< sc_lv<38> > bound_fu_542_p2;
    sc_signal< sc_lv<38> > bound_reg_622;
    sc_signal< sc_logic > out_V_id_V1_status;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_548_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<38> > indvar_flatten_next_fu_553_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > out_data_last_V_fu_573_p2;
    sc_signal< sc_lv<1> > out_data_last_V_reg_636;
    sc_signal< sc_lv<6> > j_fu_579_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > out_V_id_V1_update;
    sc_signal< sc_lv<512> > out_data_data_V_fu_517_p1;
    sc_signal< sc_lv<512> > temp_0_V_fu_585_p17;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<36> > tmp_fu_530_p3;
    sc_signal< sc_lv<38> > p_shl_fu_522_p3;
    sc_signal< sc_lv<38> > p_shl2_fu_538_p1;
    sc_signal< sc_lv<1> > tmp_1_i3_fu_559_p2;
    sc_signal< sc_lv<6> > j_i_mid2_fu_565_p3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<38> ap_const_lv38_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<8> ap_const_lv8_1D;
    static const sc_lv<8> ap_const_lv8_1E;
    static const sc_lv<16> ap_const_lv16_31;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<38> ap_const_lv38_1;
    static const sc_lv<6> ap_const_lv6_30;
    static const sc_lv<6> ap_const_lv6_2F;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_bound_fu_542_p2();
    void thread_exitcond_flatten_fu_548_p2();
    void thread_in_write_V_V_0_blk_n();
    void thread_in_write_V_V_0_read();
    void thread_in_write_V_V_10_blk_n();
    void thread_in_write_V_V_10_read();
    void thread_in_write_V_V_11_blk_n();
    void thread_in_write_V_V_11_read();
    void thread_in_write_V_V_12_blk_n();
    void thread_in_write_V_V_12_read();
    void thread_in_write_V_V_13_blk_n();
    void thread_in_write_V_V_13_read();
    void thread_in_write_V_V_14_blk_n();
    void thread_in_write_V_V_14_read();
    void thread_in_write_V_V_15_blk_n();
    void thread_in_write_V_V_15_read();
    void thread_in_write_V_V_1_blk_n();
    void thread_in_write_V_V_1_read();
    void thread_in_write_V_V_2_blk_n();
    void thread_in_write_V_V_2_read();
    void thread_in_write_V_V_3_blk_n();
    void thread_in_write_V_V_3_read();
    void thread_in_write_V_V_4_blk_n();
    void thread_in_write_V_V_4_read();
    void thread_in_write_V_V_5_blk_n();
    void thread_in_write_V_V_5_read();
    void thread_in_write_V_V_6_blk_n();
    void thread_in_write_V_V_6_read();
    void thread_in_write_V_V_7_blk_n();
    void thread_in_write_V_V_7_read();
    void thread_in_write_V_V_8_blk_n();
    void thread_in_write_V_V_8_read();
    void thread_in_write_V_V_9_blk_n();
    void thread_in_write_V_V_9_read();
    void thread_indvar_flatten_next_fu_553_p2();
    void thread_j_fu_579_p2();
    void thread_j_i_mid2_fu_565_p3();
    void thread_n_pipe4_V_V_blk_n();
    void thread_n_pipe4_V_V_read();
    void thread_out_V_data_V_blk_n();
    void thread_out_V_data_V_din();
    void thread_out_V_data_V_write();
    void thread_out_V_dest_V_blk_n();
    void thread_out_V_dest_V_din();
    void thread_out_V_dest_V_write();
    void thread_out_V_id_V1_status();
    void thread_out_V_id_V1_update();
    void thread_out_V_id_V_blk_n();
    void thread_out_V_id_V_din();
    void thread_out_V_id_V_write();
    void thread_out_V_last_V_blk_n();
    void thread_out_V_last_V_din();
    void thread_out_V_last_V_write();
    void thread_out_V_user_V_blk_n();
    void thread_out_V_user_V_din();
    void thread_out_V_user_V_write();
    void thread_out_data_data_V_fu_517_p1();
    void thread_out_data_last_V_fu_573_p2();
    void thread_p_shl2_fu_538_p1();
    void thread_p_shl_fu_522_p3();
    void thread_temp_0_V_fu_585_p17();
    void thread_tmp_1_i3_fu_559_p2();
    void thread_tmp_fu_530_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
