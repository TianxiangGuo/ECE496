// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "layernorm_write.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic layernorm_write::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic layernorm_write::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> layernorm_write::ap_ST_fsm_state1 = "1";
const sc_lv<3> layernorm_write::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> layernorm_write::ap_ST_fsm_state4 = "100";
const sc_lv<32> layernorm_write::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool layernorm_write::ap_const_boolean_1 = true;
const sc_lv<32> layernorm_write::ap_const_lv32_1 = "1";
const bool layernorm_write::ap_const_boolean_0 = false;
const sc_lv<1> layernorm_write::ap_const_lv1_0 = "0";
const sc_lv<1> layernorm_write::ap_const_lv1_1 = "1";
const sc_lv<38> layernorm_write::ap_const_lv38_0 = "00000000000000000000000000000000000000";
const sc_lv<6> layernorm_write::ap_const_lv6_0 = "000000";
const sc_lv<8> layernorm_write::ap_const_lv8_1D = "11101";
const sc_lv<8> layernorm_write::ap_const_lv8_1E = "11110";
const sc_lv<16> layernorm_write::ap_const_lv16_31 = "110001";
const sc_lv<4> layernorm_write::ap_const_lv4_0 = "0000";
const sc_lv<38> layernorm_write::ap_const_lv38_1 = "1";
const sc_lv<6> layernorm_write::ap_const_lv6_30 = "110000";
const sc_lv<6> layernorm_write::ap_const_lv6_2F = "101111";
const sc_lv<6> layernorm_write::ap_const_lv6_1 = "1";
const sc_lv<32> layernorm_write::ap_const_lv32_2 = "10";

layernorm_write::layernorm_write(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_write_V_V_0_empty_n );
    sensitive << ( in_write_V_V_1_empty_n );
    sensitive << ( in_write_V_V_2_empty_n );
    sensitive << ( in_write_V_V_3_empty_n );
    sensitive << ( in_write_V_V_4_empty_n );
    sensitive << ( in_write_V_V_5_empty_n );
    sensitive << ( in_write_V_V_6_empty_n );
    sensitive << ( in_write_V_V_7_empty_n );
    sensitive << ( in_write_V_V_8_empty_n );
    sensitive << ( in_write_V_V_9_empty_n );
    sensitive << ( in_write_V_V_10_empty_n );
    sensitive << ( in_write_V_V_11_empty_n );
    sensitive << ( in_write_V_V_12_empty_n );
    sensitive << ( in_write_V_V_13_empty_n );
    sensitive << ( in_write_V_V_14_empty_n );
    sensitive << ( in_write_V_V_15_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_write_V_V_0_empty_n );
    sensitive << ( in_write_V_V_1_empty_n );
    sensitive << ( in_write_V_V_2_empty_n );
    sensitive << ( in_write_V_V_3_empty_n );
    sensitive << ( in_write_V_V_4_empty_n );
    sensitive << ( in_write_V_V_5_empty_n );
    sensitive << ( in_write_V_V_6_empty_n );
    sensitive << ( in_write_V_V_7_empty_n );
    sensitive << ( in_write_V_V_8_empty_n );
    sensitive << ( in_write_V_V_9_empty_n );
    sensitive << ( in_write_V_V_10_empty_n );
    sensitive << ( in_write_V_V_11_empty_n );
    sensitive << ( in_write_V_V_12_empty_n );
    sensitive << ( in_write_V_V_13_empty_n );
    sensitive << ( in_write_V_V_14_empty_n );
    sensitive << ( in_write_V_V_15_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_write_V_V_0_empty_n );
    sensitive << ( in_write_V_V_1_empty_n );
    sensitive << ( in_write_V_V_2_empty_n );
    sensitive << ( in_write_V_V_3_empty_n );
    sensitive << ( in_write_V_V_4_empty_n );
    sensitive << ( in_write_V_V_5_empty_n );
    sensitive << ( in_write_V_V_6_empty_n );
    sensitive << ( in_write_V_V_7_empty_n );
    sensitive << ( in_write_V_V_8_empty_n );
    sensitive << ( in_write_V_V_9_empty_n );
    sensitive << ( in_write_V_V_10_empty_n );
    sensitive << ( in_write_V_V_11_empty_n );
    sensitive << ( in_write_V_V_12_empty_n );
    sensitive << ( in_write_V_V_13_empty_n );
    sensitive << ( in_write_V_V_14_empty_n );
    sensitive << ( in_write_V_V_15_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( n_pipe4_V_V_empty_n );
    sensitive << ( out_V_id_V1_status );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( in_write_V_V_0_empty_n );
    sensitive << ( in_write_V_V_1_empty_n );
    sensitive << ( in_write_V_V_2_empty_n );
    sensitive << ( in_write_V_V_3_empty_n );
    sensitive << ( in_write_V_V_4_empty_n );
    sensitive << ( in_write_V_V_5_empty_n );
    sensitive << ( in_write_V_V_6_empty_n );
    sensitive << ( in_write_V_V_7_empty_n );
    sensitive << ( in_write_V_V_8_empty_n );
    sensitive << ( in_write_V_V_9_empty_n );
    sensitive << ( in_write_V_V_10_empty_n );
    sensitive << ( in_write_V_V_11_empty_n );
    sensitive << ( in_write_V_V_12_empty_n );
    sensitive << ( in_write_V_V_13_empty_n );
    sensitive << ( in_write_V_V_14_empty_n );
    sensitive << ( in_write_V_V_15_empty_n );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_548_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_bound_fu_542_p2);
    sensitive << ( p_shl_fu_522_p3 );
    sensitive << ( p_shl2_fu_538_p1 );

    SC_METHOD(thread_exitcond_flatten_fu_548_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_495 );
    sensitive << ( bound_reg_622 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in_write_V_V_0_blk_n);
    sensitive << ( in_write_V_V_0_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_0_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_10_blk_n);
    sensitive << ( in_write_V_V_10_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_10_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_11_blk_n);
    sensitive << ( in_write_V_V_11_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_11_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_12_blk_n);
    sensitive << ( in_write_V_V_12_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_12_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_13_blk_n);
    sensitive << ( in_write_V_V_13_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_13_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_14_blk_n);
    sensitive << ( in_write_V_V_14_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_14_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_15_blk_n);
    sensitive << ( in_write_V_V_15_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_15_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_1_blk_n);
    sensitive << ( in_write_V_V_1_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_1_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_2_blk_n);
    sensitive << ( in_write_V_V_2_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_2_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_3_blk_n);
    sensitive << ( in_write_V_V_3_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_3_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_4_blk_n);
    sensitive << ( in_write_V_V_4_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_4_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_5_blk_n);
    sensitive << ( in_write_V_V_5_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_5_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_6_blk_n);
    sensitive << ( in_write_V_V_6_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_6_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_7_blk_n);
    sensitive << ( in_write_V_V_7_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_7_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_8_blk_n);
    sensitive << ( in_write_V_V_8_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_8_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_V_V_9_blk_n);
    sensitive << ( in_write_V_V_9_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_in_write_V_V_9_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_indvar_flatten_next_fu_553_p2);
    sensitive << ( indvar_flatten_reg_495 );

    SC_METHOD(thread_j_fu_579_p2);
    sensitive << ( j_i_mid2_fu_565_p3 );

    SC_METHOD(thread_j_i_mid2_fu_565_p3);
    sensitive << ( j_i_reg_506 );
    sensitive << ( tmp_1_i3_fu_559_p2 );

    SC_METHOD(thread_n_pipe4_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe4_V_V_empty_n );

    SC_METHOD(thread_n_pipe4_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe4_V_V_empty_n );
    sensitive << ( out_V_id_V1_status );

    SC_METHOD(thread_out_V_data_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_out_V_data_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe4_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );
    sensitive << ( out_data_data_V_fu_517_p1 );
    sensitive << ( temp_0_V_fu_585_p17 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_data_V_write);
    sensitive << ( out_V_id_V1_update );

    SC_METHOD(thread_out_V_dest_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_dest_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_out_V_dest_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe4_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_dest_V_write);
    sensitive << ( out_V_id_V1_update );

    SC_METHOD(thread_out_V_id_V1_status);
    sensitive << ( out_V_data_V_full_n );
    sensitive << ( out_V_id_V_full_n );
    sensitive << ( out_V_dest_V_full_n );
    sensitive << ( out_V_user_V_full_n );
    sensitive << ( out_V_last_V_full_n );

    SC_METHOD(thread_out_V_id_V1_update);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe4_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_id_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_id_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_out_V_id_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe4_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_id_V_write);
    sensitive << ( out_V_id_V1_update );

    SC_METHOD(thread_out_V_last_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_last_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_out_V_last_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe4_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );
    sensitive << ( out_data_last_V_reg_636 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_last_V_write);
    sensitive << ( out_V_id_V1_update );

    SC_METHOD(thread_out_V_user_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_user_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_627 );

    SC_METHOD(thread_out_V_user_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe4_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_627 );
    sensitive << ( out_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_user_V_write);
    sensitive << ( out_V_id_V1_update );

    SC_METHOD(thread_out_data_data_V_fu_517_p1);
    sensitive << ( n_pipe4_V_V_dout );

    SC_METHOD(thread_out_data_last_V_fu_573_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( exitcond_flatten_fu_548_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( j_i_mid2_fu_565_p3 );

    SC_METHOD(thread_p_shl2_fu_538_p1);
    sensitive << ( tmp_fu_530_p3 );

    SC_METHOD(thread_p_shl_fu_522_p3);
    sensitive << ( n_pipe4_V_V_dout );

    SC_METHOD(thread_temp_0_V_fu_585_p17);
    sensitive << ( in_write_V_V_0_dout );
    sensitive << ( in_write_V_V_1_dout );
    sensitive << ( in_write_V_V_2_dout );
    sensitive << ( in_write_V_V_3_dout );
    sensitive << ( in_write_V_V_4_dout );
    sensitive << ( in_write_V_V_5_dout );
    sensitive << ( in_write_V_V_6_dout );
    sensitive << ( in_write_V_V_7_dout );
    sensitive << ( in_write_V_V_8_dout );
    sensitive << ( in_write_V_V_9_dout );
    sensitive << ( in_write_V_V_10_dout );
    sensitive << ( in_write_V_V_11_dout );
    sensitive << ( in_write_V_V_12_dout );
    sensitive << ( in_write_V_V_13_dout );
    sensitive << ( in_write_V_V_14_dout );
    sensitive << ( in_write_V_V_15_dout );

    SC_METHOD(thread_tmp_1_i3_fu_559_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_i_reg_506 );
    sensitive << ( exitcond_flatten_fu_548_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_fu_530_p3);
    sensitive << ( n_pipe4_V_V_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe4_V_V_empty_n );
    sensitive << ( out_V_id_V1_status );
    sensitive << ( exitcond_flatten_fu_548_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "layernorm_write_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_V_data_V_din, "(port)out_V_data_V_din");
    sc_trace(mVcdFile, out_V_data_V_full_n, "(port)out_V_data_V_full_n");
    sc_trace(mVcdFile, out_V_data_V_write, "(port)out_V_data_V_write");
    sc_trace(mVcdFile, out_V_id_V_din, "(port)out_V_id_V_din");
    sc_trace(mVcdFile, out_V_id_V_full_n, "(port)out_V_id_V_full_n");
    sc_trace(mVcdFile, out_V_id_V_write, "(port)out_V_id_V_write");
    sc_trace(mVcdFile, out_V_dest_V_din, "(port)out_V_dest_V_din");
    sc_trace(mVcdFile, out_V_dest_V_full_n, "(port)out_V_dest_V_full_n");
    sc_trace(mVcdFile, out_V_dest_V_write, "(port)out_V_dest_V_write");
    sc_trace(mVcdFile, out_V_user_V_din, "(port)out_V_user_V_din");
    sc_trace(mVcdFile, out_V_user_V_full_n, "(port)out_V_user_V_full_n");
    sc_trace(mVcdFile, out_V_user_V_write, "(port)out_V_user_V_write");
    sc_trace(mVcdFile, out_V_last_V_din, "(port)out_V_last_V_din");
    sc_trace(mVcdFile, out_V_last_V_full_n, "(port)out_V_last_V_full_n");
    sc_trace(mVcdFile, out_V_last_V_write, "(port)out_V_last_V_write");
    sc_trace(mVcdFile, n_pipe4_V_V_dout, "(port)n_pipe4_V_V_dout");
    sc_trace(mVcdFile, n_pipe4_V_V_empty_n, "(port)n_pipe4_V_V_empty_n");
    sc_trace(mVcdFile, n_pipe4_V_V_read, "(port)n_pipe4_V_V_read");
    sc_trace(mVcdFile, in_write_V_V_0_dout, "(port)in_write_V_V_0_dout");
    sc_trace(mVcdFile, in_write_V_V_0_empty_n, "(port)in_write_V_V_0_empty_n");
    sc_trace(mVcdFile, in_write_V_V_0_read, "(port)in_write_V_V_0_read");
    sc_trace(mVcdFile, in_write_V_V_1_dout, "(port)in_write_V_V_1_dout");
    sc_trace(mVcdFile, in_write_V_V_1_empty_n, "(port)in_write_V_V_1_empty_n");
    sc_trace(mVcdFile, in_write_V_V_1_read, "(port)in_write_V_V_1_read");
    sc_trace(mVcdFile, in_write_V_V_2_dout, "(port)in_write_V_V_2_dout");
    sc_trace(mVcdFile, in_write_V_V_2_empty_n, "(port)in_write_V_V_2_empty_n");
    sc_trace(mVcdFile, in_write_V_V_2_read, "(port)in_write_V_V_2_read");
    sc_trace(mVcdFile, in_write_V_V_3_dout, "(port)in_write_V_V_3_dout");
    sc_trace(mVcdFile, in_write_V_V_3_empty_n, "(port)in_write_V_V_3_empty_n");
    sc_trace(mVcdFile, in_write_V_V_3_read, "(port)in_write_V_V_3_read");
    sc_trace(mVcdFile, in_write_V_V_4_dout, "(port)in_write_V_V_4_dout");
    sc_trace(mVcdFile, in_write_V_V_4_empty_n, "(port)in_write_V_V_4_empty_n");
    sc_trace(mVcdFile, in_write_V_V_4_read, "(port)in_write_V_V_4_read");
    sc_trace(mVcdFile, in_write_V_V_5_dout, "(port)in_write_V_V_5_dout");
    sc_trace(mVcdFile, in_write_V_V_5_empty_n, "(port)in_write_V_V_5_empty_n");
    sc_trace(mVcdFile, in_write_V_V_5_read, "(port)in_write_V_V_5_read");
    sc_trace(mVcdFile, in_write_V_V_6_dout, "(port)in_write_V_V_6_dout");
    sc_trace(mVcdFile, in_write_V_V_6_empty_n, "(port)in_write_V_V_6_empty_n");
    sc_trace(mVcdFile, in_write_V_V_6_read, "(port)in_write_V_V_6_read");
    sc_trace(mVcdFile, in_write_V_V_7_dout, "(port)in_write_V_V_7_dout");
    sc_trace(mVcdFile, in_write_V_V_7_empty_n, "(port)in_write_V_V_7_empty_n");
    sc_trace(mVcdFile, in_write_V_V_7_read, "(port)in_write_V_V_7_read");
    sc_trace(mVcdFile, in_write_V_V_8_dout, "(port)in_write_V_V_8_dout");
    sc_trace(mVcdFile, in_write_V_V_8_empty_n, "(port)in_write_V_V_8_empty_n");
    sc_trace(mVcdFile, in_write_V_V_8_read, "(port)in_write_V_V_8_read");
    sc_trace(mVcdFile, in_write_V_V_9_dout, "(port)in_write_V_V_9_dout");
    sc_trace(mVcdFile, in_write_V_V_9_empty_n, "(port)in_write_V_V_9_empty_n");
    sc_trace(mVcdFile, in_write_V_V_9_read, "(port)in_write_V_V_9_read");
    sc_trace(mVcdFile, in_write_V_V_10_dout, "(port)in_write_V_V_10_dout");
    sc_trace(mVcdFile, in_write_V_V_10_empty_n, "(port)in_write_V_V_10_empty_n");
    sc_trace(mVcdFile, in_write_V_V_10_read, "(port)in_write_V_V_10_read");
    sc_trace(mVcdFile, in_write_V_V_11_dout, "(port)in_write_V_V_11_dout");
    sc_trace(mVcdFile, in_write_V_V_11_empty_n, "(port)in_write_V_V_11_empty_n");
    sc_trace(mVcdFile, in_write_V_V_11_read, "(port)in_write_V_V_11_read");
    sc_trace(mVcdFile, in_write_V_V_12_dout, "(port)in_write_V_V_12_dout");
    sc_trace(mVcdFile, in_write_V_V_12_empty_n, "(port)in_write_V_V_12_empty_n");
    sc_trace(mVcdFile, in_write_V_V_12_read, "(port)in_write_V_V_12_read");
    sc_trace(mVcdFile, in_write_V_V_13_dout, "(port)in_write_V_V_13_dout");
    sc_trace(mVcdFile, in_write_V_V_13_empty_n, "(port)in_write_V_V_13_empty_n");
    sc_trace(mVcdFile, in_write_V_V_13_read, "(port)in_write_V_V_13_read");
    sc_trace(mVcdFile, in_write_V_V_14_dout, "(port)in_write_V_V_14_dout");
    sc_trace(mVcdFile, in_write_V_V_14_empty_n, "(port)in_write_V_V_14_empty_n");
    sc_trace(mVcdFile, in_write_V_V_14_read, "(port)in_write_V_V_14_read");
    sc_trace(mVcdFile, in_write_V_V_15_dout, "(port)in_write_V_V_15_dout");
    sc_trace(mVcdFile, in_write_V_V_15_empty_n, "(port)in_write_V_V_15_empty_n");
    sc_trace(mVcdFile, in_write_V_V_15_read, "(port)in_write_V_V_15_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_V_data_V_blk_n, "out_V_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_reg_627, "exitcond_flatten_reg_627");
    sc_trace(mVcdFile, out_V_id_V_blk_n, "out_V_id_V_blk_n");
    sc_trace(mVcdFile, out_V_dest_V_blk_n, "out_V_dest_V_blk_n");
    sc_trace(mVcdFile, out_V_user_V_blk_n, "out_V_user_V_blk_n");
    sc_trace(mVcdFile, out_V_last_V_blk_n, "out_V_last_V_blk_n");
    sc_trace(mVcdFile, n_pipe4_V_V_blk_n, "n_pipe4_V_V_blk_n");
    sc_trace(mVcdFile, in_write_V_V_0_blk_n, "in_write_V_V_0_blk_n");
    sc_trace(mVcdFile, in_write_V_V_1_blk_n, "in_write_V_V_1_blk_n");
    sc_trace(mVcdFile, in_write_V_V_2_blk_n, "in_write_V_V_2_blk_n");
    sc_trace(mVcdFile, in_write_V_V_3_blk_n, "in_write_V_V_3_blk_n");
    sc_trace(mVcdFile, in_write_V_V_4_blk_n, "in_write_V_V_4_blk_n");
    sc_trace(mVcdFile, in_write_V_V_5_blk_n, "in_write_V_V_5_blk_n");
    sc_trace(mVcdFile, in_write_V_V_6_blk_n, "in_write_V_V_6_blk_n");
    sc_trace(mVcdFile, in_write_V_V_7_blk_n, "in_write_V_V_7_blk_n");
    sc_trace(mVcdFile, in_write_V_V_8_blk_n, "in_write_V_V_8_blk_n");
    sc_trace(mVcdFile, in_write_V_V_9_blk_n, "in_write_V_V_9_blk_n");
    sc_trace(mVcdFile, in_write_V_V_10_blk_n, "in_write_V_V_10_blk_n");
    sc_trace(mVcdFile, in_write_V_V_11_blk_n, "in_write_V_V_11_blk_n");
    sc_trace(mVcdFile, in_write_V_V_12_blk_n, "in_write_V_V_12_blk_n");
    sc_trace(mVcdFile, in_write_V_V_13_blk_n, "in_write_V_V_13_blk_n");
    sc_trace(mVcdFile, in_write_V_V_14_blk_n, "in_write_V_V_14_blk_n");
    sc_trace(mVcdFile, in_write_V_V_15_blk_n, "in_write_V_V_15_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_495, "indvar_flatten_reg_495");
    sc_trace(mVcdFile, j_i_reg_506, "j_i_reg_506");
    sc_trace(mVcdFile, bound_fu_542_p2, "bound_fu_542_p2");
    sc_trace(mVcdFile, bound_reg_622, "bound_reg_622");
    sc_trace(mVcdFile, out_V_id_V1_status, "out_V_id_V1_status");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, exitcond_flatten_fu_548_p2, "exitcond_flatten_fu_548_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_553_p2, "indvar_flatten_next_fu_553_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, out_data_last_V_fu_573_p2, "out_data_last_V_fu_573_p2");
    sc_trace(mVcdFile, out_data_last_V_reg_636, "out_data_last_V_reg_636");
    sc_trace(mVcdFile, j_fu_579_p2, "j_fu_579_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, out_V_id_V1_update, "out_V_id_V1_update");
    sc_trace(mVcdFile, out_data_data_V_fu_517_p1, "out_data_data_V_fu_517_p1");
    sc_trace(mVcdFile, temp_0_V_fu_585_p17, "temp_0_V_fu_585_p17");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_fu_530_p3, "tmp_fu_530_p3");
    sc_trace(mVcdFile, p_shl_fu_522_p3, "p_shl_fu_522_p3");
    sc_trace(mVcdFile, p_shl2_fu_538_p1, "p_shl2_fu_538_p1");
    sc_trace(mVcdFile, tmp_1_i3_fu_559_p2, "tmp_1_i3_fu_559_p2");
    sc_trace(mVcdFile, j_i_mid2_fu_565_p3, "j_i_mid2_fu_565_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

layernorm_write::~layernorm_write() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void layernorm_write::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_548_p2.read()))) {
        indvar_flatten_reg_495 = indvar_flatten_next_fu_553_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())))) {
        indvar_flatten_reg_495 = ap_const_lv38_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_548_p2.read()))) {
        j_i_reg_506 = j_fu_579_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())))) {
        j_i_reg_506 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())))) {
        bound_reg_622 = bound_fu_542_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_627 = exitcond_flatten_fu_548_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_548_p2.read()))) {
        out_data_last_V_reg_636 = out_data_last_V_fu_573_p2.read();
    }
}

void layernorm_write::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void layernorm_write::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void layernorm_write::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void layernorm_write::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void layernorm_write::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_0_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_1_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_2_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_3_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_4_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_5_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_6_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_7_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_8_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_9_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_10_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_11_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_12_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_13_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_14_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_15_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read()))));
}

void layernorm_write::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_0_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_1_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_2_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_3_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_4_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_5_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_6_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_7_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_8_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_9_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_10_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_11_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_12_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_13_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_14_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_15_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read()))));
}

void layernorm_write::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_0_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_1_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_2_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_3_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_4_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_5_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_6_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_7_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_8_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_9_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_10_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_11_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_12_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_13_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_14_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_15_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read()))));
}

void layernorm_write::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read()));
}

void layernorm_write::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void layernorm_write::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_0_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_1_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_2_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_3_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_4_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_5_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_6_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_7_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_8_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_9_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_10_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_11_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_12_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_13_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_14_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_15_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())));
}

void layernorm_write::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_548_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void layernorm_write::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void layernorm_write::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void layernorm_write::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void layernorm_write::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void layernorm_write::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void layernorm_write::thread_bound_fu_542_p2() {
    bound_fu_542_p2 = (!p_shl_fu_522_p3.read().is_01() || !p_shl2_fu_538_p1.read().is_01())? sc_lv<38>(): (sc_biguint<38>(p_shl_fu_522_p3.read()) - sc_biguint<38>(p_shl2_fu_538_p1.read()));
}

void layernorm_write::thread_exitcond_flatten_fu_548_p2() {
    exitcond_flatten_fu_548_p2 = (!indvar_flatten_reg_495.read().is_01() || !bound_reg_622.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_495.read() == bound_reg_622.read());
}

void layernorm_write::thread_in_write_V_V_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_0_blk_n = in_write_V_V_0_empty_n.read();
    } else {
        in_write_V_V_0_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_0_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_0_read = ap_const_logic_1;
    } else {
        in_write_V_V_0_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_10_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_10_blk_n = in_write_V_V_10_empty_n.read();
    } else {
        in_write_V_V_10_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_10_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_10_read = ap_const_logic_1;
    } else {
        in_write_V_V_10_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_11_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_11_blk_n = in_write_V_V_11_empty_n.read();
    } else {
        in_write_V_V_11_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_11_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_11_read = ap_const_logic_1;
    } else {
        in_write_V_V_11_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_12_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_12_blk_n = in_write_V_V_12_empty_n.read();
    } else {
        in_write_V_V_12_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_12_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_12_read = ap_const_logic_1;
    } else {
        in_write_V_V_12_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_13_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_13_blk_n = in_write_V_V_13_empty_n.read();
    } else {
        in_write_V_V_13_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_13_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_13_read = ap_const_logic_1;
    } else {
        in_write_V_V_13_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_14_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_14_blk_n = in_write_V_V_14_empty_n.read();
    } else {
        in_write_V_V_14_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_14_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_14_read = ap_const_logic_1;
    } else {
        in_write_V_V_14_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_15_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_15_blk_n = in_write_V_V_15_empty_n.read();
    } else {
        in_write_V_V_15_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_15_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_15_read = ap_const_logic_1;
    } else {
        in_write_V_V_15_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_1_blk_n = in_write_V_V_1_empty_n.read();
    } else {
        in_write_V_V_1_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_1_read = ap_const_logic_1;
    } else {
        in_write_V_V_1_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_2_blk_n = in_write_V_V_2_empty_n.read();
    } else {
        in_write_V_V_2_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_2_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_2_read = ap_const_logic_1;
    } else {
        in_write_V_V_2_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_3_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_3_blk_n = in_write_V_V_3_empty_n.read();
    } else {
        in_write_V_V_3_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_3_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_3_read = ap_const_logic_1;
    } else {
        in_write_V_V_3_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_4_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_4_blk_n = in_write_V_V_4_empty_n.read();
    } else {
        in_write_V_V_4_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_4_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_4_read = ap_const_logic_1;
    } else {
        in_write_V_V_4_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_5_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_5_blk_n = in_write_V_V_5_empty_n.read();
    } else {
        in_write_V_V_5_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_5_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_5_read = ap_const_logic_1;
    } else {
        in_write_V_V_5_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_6_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_6_blk_n = in_write_V_V_6_empty_n.read();
    } else {
        in_write_V_V_6_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_6_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_6_read = ap_const_logic_1;
    } else {
        in_write_V_V_6_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_7_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_7_blk_n = in_write_V_V_7_empty_n.read();
    } else {
        in_write_V_V_7_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_7_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_7_read = ap_const_logic_1;
    } else {
        in_write_V_V_7_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_8_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_8_blk_n = in_write_V_V_8_empty_n.read();
    } else {
        in_write_V_V_8_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_8_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_8_read = ap_const_logic_1;
    } else {
        in_write_V_V_8_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_in_write_V_V_9_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0))) {
        in_write_V_V_9_blk_n = in_write_V_V_9_empty_n.read();
    } else {
        in_write_V_V_9_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_in_write_V_V_9_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_9_read = ap_const_logic_1;
    } else {
        in_write_V_V_9_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_indvar_flatten_next_fu_553_p2() {
    indvar_flatten_next_fu_553_p2 = (!indvar_flatten_reg_495.read().is_01() || !ap_const_lv38_1.is_01())? sc_lv<38>(): (sc_biguint<38>(indvar_flatten_reg_495.read()) + sc_biguint<38>(ap_const_lv38_1));
}

void layernorm_write::thread_j_fu_579_p2() {
    j_fu_579_p2 = (!j_i_mid2_fu_565_p3.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_i_mid2_fu_565_p3.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void layernorm_write::thread_j_i_mid2_fu_565_p3() {
    j_i_mid2_fu_565_p3 = (!tmp_1_i3_fu_559_p2.read()[0].is_01())? sc_lv<6>(): ((tmp_1_i3_fu_559_p2.read()[0].to_bool())? ap_const_lv6_0: j_i_reg_506.read());
}

void layernorm_write::thread_n_pipe4_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        n_pipe4_V_V_blk_n = n_pipe4_V_V_empty_n.read();
    } else {
        n_pipe4_V_V_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_n_pipe4_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())))) {
        n_pipe4_V_V_read = ap_const_logic_1;
    } else {
        n_pipe4_V_V_read = ap_const_logic_0;
    }
}

void layernorm_write::thread_out_V_data_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0)))) {
        out_V_data_V_blk_n = out_V_data_V_full_n.read();
    } else {
        out_V_data_V_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_out_V_data_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_data_V_din = temp_0_V_fu_585_p17.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())))) {
        out_V_data_V_din = out_data_data_V_fu_517_p1.read();
    } else {
        out_V_data_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void layernorm_write::thread_out_V_data_V_write() {
    out_V_data_V_write = out_V_id_V1_update.read();
}

void layernorm_write::thread_out_V_dest_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0)))) {
        out_V_dest_V_blk_n = out_V_dest_V_full_n.read();
    } else {
        out_V_dest_V_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_out_V_dest_V_din() {
    out_V_dest_V_din = ap_const_lv8_1E;
}

void layernorm_write::thread_out_V_dest_V_write() {
    out_V_dest_V_write = out_V_id_V1_update.read();
}

void layernorm_write::thread_out_V_id_V1_status() {
    out_V_id_V1_status = (out_V_data_V_full_n.read() & out_V_id_V_full_n.read() & out_V_dest_V_full_n.read() & out_V_user_V_full_n.read() & out_V_last_V_full_n.read());
}

void layernorm_write::thread_out_V_id_V1_update() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_id_V1_update = ap_const_logic_1;
    } else {
        out_V_id_V1_update = ap_const_logic_0;
    }
}

void layernorm_write::thread_out_V_id_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0)))) {
        out_V_id_V_blk_n = out_V_id_V_full_n.read();
    } else {
        out_V_id_V_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_out_V_id_V_din() {
    out_V_id_V_din = ap_const_lv8_1D;
}

void layernorm_write::thread_out_V_id_V_write() {
    out_V_id_V_write = out_V_id_V1_update.read();
}

void layernorm_write::thread_out_V_last_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0)))) {
        out_V_last_V_blk_n = out_V_last_V_full_n.read();
    } else {
        out_V_last_V_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_out_V_last_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_last_V_din = out_data_last_V_reg_636.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())))) {
        out_V_last_V_din = ap_const_lv1_0;
    } else {
        out_V_last_V_din =  (sc_lv<1>) ("X");
    }
}

void layernorm_write::thread_out_V_last_V_write() {
    out_V_last_V_write = out_V_id_V1_update.read();
}

void layernorm_write::thread_out_V_user_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_627.read(), ap_const_lv1_0)))) {
        out_V_user_V_blk_n = out_V_user_V_full_n.read();
    } else {
        out_V_user_V_blk_n = ap_const_logic_1;
    }
}

void layernorm_write::thread_out_V_user_V_din() {
    out_V_user_V_din = ap_const_lv16_31;
}

void layernorm_write::thread_out_V_user_V_write() {
    out_V_user_V_write = out_V_id_V1_update.read();
}

void layernorm_write::thread_out_data_data_V_fu_517_p1() {
    out_data_data_V_fu_517_p1 = esl_zext<512,32>(n_pipe4_V_V_dout.read());
}

void layernorm_write::thread_out_data_last_V_fu_573_p2() {
    out_data_last_V_fu_573_p2 = (!j_i_mid2_fu_565_p3.read().is_01() || !ap_const_lv6_2F.is_01())? sc_lv<1>(): sc_lv<1>(j_i_mid2_fu_565_p3.read() == ap_const_lv6_2F);
}

void layernorm_write::thread_p_shl2_fu_538_p1() {
    p_shl2_fu_538_p1 = esl_zext<38,36>(tmp_fu_530_p3.read());
}

void layernorm_write::thread_p_shl_fu_522_p3() {
    p_shl_fu_522_p3 = esl_concat<32,6>(n_pipe4_V_V_dout.read(), ap_const_lv6_0);
}

void layernorm_write::thread_temp_0_V_fu_585_p17() {
    temp_0_V_fu_585_p17 = esl_concat<480,32>(esl_concat<448,32>(esl_concat<416,32>(esl_concat<384,32>(esl_concat<352,32>(esl_concat<320,32>(esl_concat<288,32>(esl_concat<256,32>(esl_concat<224,32>(esl_concat<192,32>(esl_concat<160,32>(esl_concat<128,32>(esl_concat<96,32>(esl_concat<64,32>(esl_concat<32,32>(in_write_V_V_15_dout.read(), in_write_V_V_14_dout.read()), in_write_V_V_13_dout.read()), in_write_V_V_12_dout.read()), in_write_V_V_11_dout.read()), in_write_V_V_10_dout.read()), in_write_V_V_9_dout.read()), in_write_V_V_8_dout.read()), in_write_V_V_7_dout.read()), in_write_V_V_6_dout.read()), in_write_V_V_5_dout.read()), in_write_V_V_4_dout.read()), in_write_V_V_3_dout.read()), in_write_V_V_2_dout.read()), in_write_V_V_1_dout.read()), in_write_V_V_0_dout.read());
}

void layernorm_write::thread_tmp_1_i3_fu_559_p2() {
    tmp_1_i3_fu_559_p2 = (!j_i_reg_506.read().is_01() || !ap_const_lv6_30.is_01())? sc_lv<1>(): sc_lv<1>(j_i_reg_506.read() == ap_const_lv6_30);
}

void layernorm_write::thread_tmp_fu_530_p3() {
    tmp_fu_530_p3 = esl_concat<32,4>(n_pipe4_V_V_dout.read(), ap_const_lv4_0);
}

void layernorm_write::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe4_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V1_status.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_548_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_548_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

