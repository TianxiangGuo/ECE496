// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "IdentityGather.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic IdentityGather::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic IdentityGather::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> IdentityGather::ap_ST_fsm_state1 = "1";
const sc_lv<3> IdentityGather::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> IdentityGather::ap_ST_fsm_state4 = "100";
const bool IdentityGather::ap_const_boolean_1 = true;
const sc_lv<32> IdentityGather::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> IdentityGather::ap_const_lv1_0 = "0";
const sc_lv<1> IdentityGather::ap_const_lv1_1 = "1";
const sc_lv<2> IdentityGather::ap_const_lv2_0 = "00";
const sc_lv<2> IdentityGather::ap_const_lv2_2 = "10";
const sc_lv<2> IdentityGather::ap_const_lv2_3 = "11";
const sc_lv<2> IdentityGather::ap_const_lv2_1 = "1";
const sc_lv<32> IdentityGather::ap_const_lv32_1 = "1";
const bool IdentityGather::ap_const_boolean_0 = false;
const sc_lv<48> IdentityGather::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<8> IdentityGather::ap_const_lv8_0 = "00000000";
const sc_lv<6> IdentityGather::ap_const_lv6_0 = "000000";
const sc_lv<48> IdentityGather::ap_const_lv48_1 = "1";
const sc_lv<32> IdentityGather::ap_const_lv32_2 = "10";

IdentityGather::IdentityGather(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( exitcond_fu_337_p2 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_fu_337_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_exitcond_fu_337_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_op_assign_reg_247 );
    sensitive << ( ret_V_3_reg_351 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_287_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( in_V_id_V_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_data_V_0_ack_in);
    sensitive << ( in_V_data_V_0_state );

    SC_METHOD(thread_in_V_data_V_0_ack_out);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_data_V_0_data_out);
    sensitive << ( in_V_data_V_0_payload_A );
    sensitive << ( in_V_data_V_0_payload_B );
    sensitive << ( in_V_data_V_0_sel );

    SC_METHOD(thread_in_V_data_V_0_load_A);
    sensitive << ( in_V_data_V_0_sel_wr );
    sensitive << ( in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_data_V_0_load_B);
    sensitive << ( in_V_data_V_0_sel_wr );
    sensitive << ( in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_data_V_0_sel);
    sensitive << ( in_V_data_V_0_sel_rd );

    SC_METHOD(thread_in_V_data_V_0_state_cmp_full);
    sensitive << ( in_V_data_V_0_state );

    SC_METHOD(thread_in_V_data_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_data_V_0_vld_out);
    sensitive << ( in_V_data_V_0_state );

    SC_METHOD(thread_in_V_dest_V_0_ack_in);
    sensitive << ( in_V_dest_V_0_state );

    SC_METHOD(thread_in_V_dest_V_0_ack_out);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_dest_V_0_data_out);
    sensitive << ( in_V_dest_V_0_payload_A );
    sensitive << ( in_V_dest_V_0_payload_B );
    sensitive << ( in_V_dest_V_0_sel );

    SC_METHOD(thread_in_V_dest_V_0_load_A);
    sensitive << ( in_V_dest_V_0_sel_wr );
    sensitive << ( in_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_dest_V_0_load_B);
    sensitive << ( in_V_dest_V_0_sel_wr );
    sensitive << ( in_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_dest_V_0_sel);
    sensitive << ( in_V_dest_V_0_sel_rd );

    SC_METHOD(thread_in_V_dest_V_0_state_cmp_full);
    sensitive << ( in_V_dest_V_0_state );

    SC_METHOD(thread_in_V_dest_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_dest_V_0_vld_out);
    sensitive << ( in_V_dest_V_0_state );

    SC_METHOD(thread_in_V_id_V_0_ack_in);
    sensitive << ( in_V_id_V_0_state );

    SC_METHOD(thread_in_V_id_V_0_ack_out);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_id_V_0_data_out);
    sensitive << ( in_V_id_V_0_payload_A );
    sensitive << ( in_V_id_V_0_payload_B );
    sensitive << ( in_V_id_V_0_sel );

    SC_METHOD(thread_in_V_id_V_0_load_A);
    sensitive << ( in_V_id_V_0_sel_wr );
    sensitive << ( in_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_id_V_0_load_B);
    sensitive << ( in_V_id_V_0_sel_wr );
    sensitive << ( in_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_id_V_0_sel);
    sensitive << ( in_V_id_V_0_sel_rd );

    SC_METHOD(thread_in_V_id_V_0_state_cmp_full);
    sensitive << ( in_V_id_V_0_state );

    SC_METHOD(thread_in_V_id_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_id_V_0_vld_out);
    sensitive << ( in_V_id_V_0_state );

    SC_METHOD(thread_in_V_last_V_0_ack_in);
    sensitive << ( in_V_last_V_0_state );

    SC_METHOD(thread_in_V_last_V_0_ack_out);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_last_V_0_data_out);
    sensitive << ( in_V_last_V_0_payload_A );
    sensitive << ( in_V_last_V_0_payload_B );
    sensitive << ( in_V_last_V_0_sel );

    SC_METHOD(thread_in_V_last_V_0_load_A);
    sensitive << ( in_V_last_V_0_sel_wr );
    sensitive << ( in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_last_V_0_load_B);
    sensitive << ( in_V_last_V_0_sel_wr );
    sensitive << ( in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_last_V_0_sel);
    sensitive << ( in_V_last_V_0_sel_rd );

    SC_METHOD(thread_in_V_last_V_0_state_cmp_full);
    sensitive << ( in_V_last_V_0_state );

    SC_METHOD(thread_in_V_last_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_last_V_0_vld_out);
    sensitive << ( in_V_last_V_0_state );

    SC_METHOD(thread_in_V_user_V_0_ack_in);
    sensitive << ( in_V_user_V_0_state );

    SC_METHOD(thread_in_V_user_V_0_ack_out);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_user_V_0_data_out);
    sensitive << ( in_V_user_V_0_payload_A );
    sensitive << ( in_V_user_V_0_payload_B );
    sensitive << ( in_V_user_V_0_sel );

    SC_METHOD(thread_in_V_user_V_0_load_A);
    sensitive << ( in_V_user_V_0_sel_wr );
    sensitive << ( in_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_user_V_0_load_B);
    sensitive << ( in_V_user_V_0_sel_wr );
    sensitive << ( in_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_user_V_0_sel);
    sensitive << ( in_V_user_V_0_sel_rd );

    SC_METHOD(thread_in_V_user_V_0_state_cmp_full);
    sensitive << ( in_V_user_V_0_state );

    SC_METHOD(thread_in_V_user_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_user_V_0_vld_out);
    sensitive << ( in_V_user_V_0_state );

    SC_METHOD(thread_in_r_TDATA_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_fu_337_p2 );

    SC_METHOD(thread_in_r_TREADY);
    sensitive << ( in_V_last_V_0_state );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_iter_fu_342_p2);
    sensitive << ( i_op_assign_reg_247 );

    SC_METHOD(thread_out_0_V_data_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_0_V_data_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_0_V_data_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_data_out );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( tmp_data_V_12_reg_365 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_0_V_data_V_write);
    sensitive << ( out_0_V_id_V1_update );

    SC_METHOD(thread_out_0_V_dest_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_0_V_dest_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_0_V_dest_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( in_V_dest_V_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( tmp_dest_V_4_reg_376 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_0_V_dest_V_write);
    sensitive << ( out_0_V_id_V1_update );

    SC_METHOD(thread_out_0_V_id_V1_status);
    sensitive << ( out_0_V_data_V_full_n );
    sensitive << ( out_0_V_id_V_full_n );
    sensitive << ( out_0_V_dest_V_full_n );
    sensitive << ( out_0_V_user_V_full_n );
    sensitive << ( out_0_V_last_V_full_n );

    SC_METHOD(thread_out_0_V_id_V1_update);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_0_V_id_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_0_V_id_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_0_V_id_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( in_V_id_V_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( tmp_id_V_1_reg_371 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_0_V_id_V_write);
    sensitive << ( out_0_V_id_V1_update );

    SC_METHOD(thread_out_0_V_last_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_0_V_last_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_0_V_last_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( in_V_last_V_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( tmp_last_V_1_reg_388 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_0_V_last_V_write);
    sensitive << ( out_0_V_id_V1_update );

    SC_METHOD(thread_out_0_V_user_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_0_V_user_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_0_V_user_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( in_V_user_V_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( tmp_user_V_3_reg_382 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_0_V_user_V_write);
    sensitive << ( out_0_V_id_V1_update );

    SC_METHOD(thread_out_1_V_data_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_1_V_data_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_1_V_data_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_data_out );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( tmp_data_V_12_reg_365 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_1_V_data_V_write);
    sensitive << ( out_1_V_id_V1_update );

    SC_METHOD(thread_out_1_V_dest_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_1_V_dest_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_1_V_dest_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( in_V_dest_V_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( tmp_dest_V_4_reg_376 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_1_V_dest_V_write);
    sensitive << ( out_1_V_id_V1_update );

    SC_METHOD(thread_out_1_V_id_V1_status);
    sensitive << ( out_1_V_data_V_full_n );
    sensitive << ( out_1_V_id_V_full_n );
    sensitive << ( out_1_V_dest_V_full_n );
    sensitive << ( out_1_V_user_V_full_n );
    sensitive << ( out_1_V_last_V_full_n );

    SC_METHOD(thread_out_1_V_id_V1_update);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_1_V_id_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_1_V_id_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_1_V_id_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_1_V_id_V_write);
    sensitive << ( out_1_V_id_V1_update );

    SC_METHOD(thread_out_1_V_last_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_1_V_last_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_1_V_last_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( in_V_last_V_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( tmp_last_V_1_reg_388 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_1_V_last_V_write);
    sensitive << ( out_1_V_id_V1_update );

    SC_METHOD(thread_out_1_V_user_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_1_V_user_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );

    SC_METHOD(thread_out_1_V_user_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( in_V_user_V_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_394 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( tmp_user_V_3_reg_382 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_1_V_user_V_write);
    sensitive << ( out_1_V_id_V1_update );

    SC_METHOD(thread_p_shl1_cast_fu_317_p1);
    sensitive << ( p_shl1_fu_309_p3 );

    SC_METHOD(thread_p_shl1_fu_309_p3);
    sensitive << ( tmp_141_fu_293_p1 );

    SC_METHOD(thread_p_shl_cast_fu_305_p1);
    sensitive << ( p_shl_fu_297_p3 );

    SC_METHOD(thread_p_shl_fu_297_p3);
    sensitive << ( tmp_141_fu_293_p1 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_ret_V_3_fu_331_p2);
    sensitive << ( ret_V_cast_fu_327_p1 );

    SC_METHOD(thread_ret_V_cast_fu_327_p1);
    sensitive << ( ret_V_fu_321_p2 );

    SC_METHOD(thread_ret_V_fu_321_p2);
    sensitive << ( p_shl_cast_fu_305_p1 );
    sensitive << ( p_shl1_cast_fu_317_p1 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_141_fu_293_p1);
    sensitive << ( in_V_data_V_0_data_out );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_337_p2 );
    sensitive << ( grp_fu_287_p2 );
    sensitive << ( out_0_V_id_V1_status );
    sensitive << ( out_1_V_id_V1_status );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    in_V_data_V_0_sel_rd = SC_LOGIC_0;
    in_V_data_V_0_sel_wr = SC_LOGIC_0;
    in_V_data_V_0_state = "00";
    in_V_id_V_0_sel_rd = SC_LOGIC_0;
    in_V_id_V_0_sel_wr = SC_LOGIC_0;
    in_V_id_V_0_state = "00";
    in_V_dest_V_0_sel_rd = SC_LOGIC_0;
    in_V_dest_V_0_sel_wr = SC_LOGIC_0;
    in_V_dest_V_0_state = "00";
    in_V_user_V_0_sel_rd = SC_LOGIC_0;
    in_V_user_V_0_sel_wr = SC_LOGIC_0;
    in_V_user_V_0_state = "00";
    in_V_last_V_0_sel_rd = SC_LOGIC_0;
    in_V_last_V_0_sel_wr = SC_LOGIC_0;
    in_V_last_V_0_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "IdentityGather_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, in_r_TDATA, "(port)in_r_TDATA");
    sc_trace(mVcdFile, in_r_TVALID, "(port)in_r_TVALID");
    sc_trace(mVcdFile, in_r_TREADY, "(port)in_r_TREADY");
    sc_trace(mVcdFile, in_r_TID, "(port)in_r_TID");
    sc_trace(mVcdFile, in_r_TDEST, "(port)in_r_TDEST");
    sc_trace(mVcdFile, in_r_TUSER, "(port)in_r_TUSER");
    sc_trace(mVcdFile, in_r_TLAST, "(port)in_r_TLAST");
    sc_trace(mVcdFile, out_0_V_data_V_din, "(port)out_0_V_data_V_din");
    sc_trace(mVcdFile, out_0_V_data_V_full_n, "(port)out_0_V_data_V_full_n");
    sc_trace(mVcdFile, out_0_V_data_V_write, "(port)out_0_V_data_V_write");
    sc_trace(mVcdFile, out_1_V_data_V_din, "(port)out_1_V_data_V_din");
    sc_trace(mVcdFile, out_1_V_data_V_full_n, "(port)out_1_V_data_V_full_n");
    sc_trace(mVcdFile, out_1_V_data_V_write, "(port)out_1_V_data_V_write");
    sc_trace(mVcdFile, out_0_V_id_V_din, "(port)out_0_V_id_V_din");
    sc_trace(mVcdFile, out_0_V_id_V_full_n, "(port)out_0_V_id_V_full_n");
    sc_trace(mVcdFile, out_0_V_id_V_write, "(port)out_0_V_id_V_write");
    sc_trace(mVcdFile, out_1_V_id_V_din, "(port)out_1_V_id_V_din");
    sc_trace(mVcdFile, out_1_V_id_V_full_n, "(port)out_1_V_id_V_full_n");
    sc_trace(mVcdFile, out_1_V_id_V_write, "(port)out_1_V_id_V_write");
    sc_trace(mVcdFile, out_0_V_dest_V_din, "(port)out_0_V_dest_V_din");
    sc_trace(mVcdFile, out_0_V_dest_V_full_n, "(port)out_0_V_dest_V_full_n");
    sc_trace(mVcdFile, out_0_V_dest_V_write, "(port)out_0_V_dest_V_write");
    sc_trace(mVcdFile, out_1_V_dest_V_din, "(port)out_1_V_dest_V_din");
    sc_trace(mVcdFile, out_1_V_dest_V_full_n, "(port)out_1_V_dest_V_full_n");
    sc_trace(mVcdFile, out_1_V_dest_V_write, "(port)out_1_V_dest_V_write");
    sc_trace(mVcdFile, out_0_V_user_V_din, "(port)out_0_V_user_V_din");
    sc_trace(mVcdFile, out_0_V_user_V_full_n, "(port)out_0_V_user_V_full_n");
    sc_trace(mVcdFile, out_0_V_user_V_write, "(port)out_0_V_user_V_write");
    sc_trace(mVcdFile, out_1_V_user_V_din, "(port)out_1_V_user_V_din");
    sc_trace(mVcdFile, out_1_V_user_V_full_n, "(port)out_1_V_user_V_full_n");
    sc_trace(mVcdFile, out_1_V_user_V_write, "(port)out_1_V_user_V_write");
    sc_trace(mVcdFile, out_0_V_last_V_din, "(port)out_0_V_last_V_din");
    sc_trace(mVcdFile, out_0_V_last_V_full_n, "(port)out_0_V_last_V_full_n");
    sc_trace(mVcdFile, out_0_V_last_V_write, "(port)out_0_V_last_V_write");
    sc_trace(mVcdFile, out_1_V_last_V_din, "(port)out_1_V_last_V_din");
    sc_trace(mVcdFile, out_1_V_last_V_full_n, "(port)out_1_V_last_V_full_n");
    sc_trace(mVcdFile, out_1_V_last_V_write, "(port)out_1_V_last_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, in_V_data_V_0_data_out, "in_V_data_V_0_data_out");
    sc_trace(mVcdFile, in_V_data_V_0_vld_in, "in_V_data_V_0_vld_in");
    sc_trace(mVcdFile, in_V_data_V_0_vld_out, "in_V_data_V_0_vld_out");
    sc_trace(mVcdFile, in_V_data_V_0_ack_in, "in_V_data_V_0_ack_in");
    sc_trace(mVcdFile, in_V_data_V_0_ack_out, "in_V_data_V_0_ack_out");
    sc_trace(mVcdFile, in_V_data_V_0_payload_A, "in_V_data_V_0_payload_A");
    sc_trace(mVcdFile, in_V_data_V_0_payload_B, "in_V_data_V_0_payload_B");
    sc_trace(mVcdFile, in_V_data_V_0_sel_rd, "in_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_data_V_0_sel_wr, "in_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_data_V_0_sel, "in_V_data_V_0_sel");
    sc_trace(mVcdFile, in_V_data_V_0_load_A, "in_V_data_V_0_load_A");
    sc_trace(mVcdFile, in_V_data_V_0_load_B, "in_V_data_V_0_load_B");
    sc_trace(mVcdFile, in_V_data_V_0_state, "in_V_data_V_0_state");
    sc_trace(mVcdFile, in_V_data_V_0_state_cmp_full, "in_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_id_V_0_data_out, "in_V_id_V_0_data_out");
    sc_trace(mVcdFile, in_V_id_V_0_vld_in, "in_V_id_V_0_vld_in");
    sc_trace(mVcdFile, in_V_id_V_0_vld_out, "in_V_id_V_0_vld_out");
    sc_trace(mVcdFile, in_V_id_V_0_ack_in, "in_V_id_V_0_ack_in");
    sc_trace(mVcdFile, in_V_id_V_0_ack_out, "in_V_id_V_0_ack_out");
    sc_trace(mVcdFile, in_V_id_V_0_payload_A, "in_V_id_V_0_payload_A");
    sc_trace(mVcdFile, in_V_id_V_0_payload_B, "in_V_id_V_0_payload_B");
    sc_trace(mVcdFile, in_V_id_V_0_sel_rd, "in_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_id_V_0_sel_wr, "in_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_id_V_0_sel, "in_V_id_V_0_sel");
    sc_trace(mVcdFile, in_V_id_V_0_load_A, "in_V_id_V_0_load_A");
    sc_trace(mVcdFile, in_V_id_V_0_load_B, "in_V_id_V_0_load_B");
    sc_trace(mVcdFile, in_V_id_V_0_state, "in_V_id_V_0_state");
    sc_trace(mVcdFile, in_V_id_V_0_state_cmp_full, "in_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_dest_V_0_data_out, "in_V_dest_V_0_data_out");
    sc_trace(mVcdFile, in_V_dest_V_0_vld_in, "in_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, in_V_dest_V_0_vld_out, "in_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, in_V_dest_V_0_ack_in, "in_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, in_V_dest_V_0_ack_out, "in_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, in_V_dest_V_0_payload_A, "in_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, in_V_dest_V_0_payload_B, "in_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, in_V_dest_V_0_sel_rd, "in_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_dest_V_0_sel_wr, "in_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_dest_V_0_sel, "in_V_dest_V_0_sel");
    sc_trace(mVcdFile, in_V_dest_V_0_load_A, "in_V_dest_V_0_load_A");
    sc_trace(mVcdFile, in_V_dest_V_0_load_B, "in_V_dest_V_0_load_B");
    sc_trace(mVcdFile, in_V_dest_V_0_state, "in_V_dest_V_0_state");
    sc_trace(mVcdFile, in_V_dest_V_0_state_cmp_full, "in_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_user_V_0_data_out, "in_V_user_V_0_data_out");
    sc_trace(mVcdFile, in_V_user_V_0_vld_in, "in_V_user_V_0_vld_in");
    sc_trace(mVcdFile, in_V_user_V_0_vld_out, "in_V_user_V_0_vld_out");
    sc_trace(mVcdFile, in_V_user_V_0_ack_in, "in_V_user_V_0_ack_in");
    sc_trace(mVcdFile, in_V_user_V_0_ack_out, "in_V_user_V_0_ack_out");
    sc_trace(mVcdFile, in_V_user_V_0_payload_A, "in_V_user_V_0_payload_A");
    sc_trace(mVcdFile, in_V_user_V_0_payload_B, "in_V_user_V_0_payload_B");
    sc_trace(mVcdFile, in_V_user_V_0_sel_rd, "in_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_user_V_0_sel_wr, "in_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_user_V_0_sel, "in_V_user_V_0_sel");
    sc_trace(mVcdFile, in_V_user_V_0_load_A, "in_V_user_V_0_load_A");
    sc_trace(mVcdFile, in_V_user_V_0_load_B, "in_V_user_V_0_load_B");
    sc_trace(mVcdFile, in_V_user_V_0_state, "in_V_user_V_0_state");
    sc_trace(mVcdFile, in_V_user_V_0_state_cmp_full, "in_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_last_V_0_data_out, "in_V_last_V_0_data_out");
    sc_trace(mVcdFile, in_V_last_V_0_vld_in, "in_V_last_V_0_vld_in");
    sc_trace(mVcdFile, in_V_last_V_0_vld_out, "in_V_last_V_0_vld_out");
    sc_trace(mVcdFile, in_V_last_V_0_ack_in, "in_V_last_V_0_ack_in");
    sc_trace(mVcdFile, in_V_last_V_0_ack_out, "in_V_last_V_0_ack_out");
    sc_trace(mVcdFile, in_V_last_V_0_payload_A, "in_V_last_V_0_payload_A");
    sc_trace(mVcdFile, in_V_last_V_0_payload_B, "in_V_last_V_0_payload_B");
    sc_trace(mVcdFile, in_V_last_V_0_sel_rd, "in_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_last_V_0_sel_wr, "in_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_last_V_0_sel, "in_V_last_V_0_sel");
    sc_trace(mVcdFile, in_V_last_V_0_load_A, "in_V_last_V_0_load_A");
    sc_trace(mVcdFile, in_V_last_V_0_load_B, "in_V_last_V_0_load_B");
    sc_trace(mVcdFile, in_V_last_V_0_state, "in_V_last_V_0_state");
    sc_trace(mVcdFile, in_V_last_V_0_state_cmp_full, "in_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_r_TDATA_blk_n, "in_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_fu_337_p2, "exitcond_fu_337_p2");
    sc_trace(mVcdFile, out_0_V_data_V_blk_n, "out_0_V_data_V_blk_n");
    sc_trace(mVcdFile, grp_fu_287_p2, "grp_fu_287_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, tmp_12_reg_394, "tmp_12_reg_394");
    sc_trace(mVcdFile, out_1_V_data_V_blk_n, "out_1_V_data_V_blk_n");
    sc_trace(mVcdFile, out_0_V_id_V_blk_n, "out_0_V_id_V_blk_n");
    sc_trace(mVcdFile, out_1_V_id_V_blk_n, "out_1_V_id_V_blk_n");
    sc_trace(mVcdFile, out_0_V_dest_V_blk_n, "out_0_V_dest_V_blk_n");
    sc_trace(mVcdFile, out_1_V_dest_V_blk_n, "out_1_V_dest_V_blk_n");
    sc_trace(mVcdFile, out_0_V_user_V_blk_n, "out_0_V_user_V_blk_n");
    sc_trace(mVcdFile, out_1_V_user_V_blk_n, "out_1_V_user_V_blk_n");
    sc_trace(mVcdFile, out_0_V_last_V_blk_n, "out_0_V_last_V_blk_n");
    sc_trace(mVcdFile, out_1_V_last_V_blk_n, "out_1_V_last_V_blk_n");
    sc_trace(mVcdFile, i_op_assign_reg_247, "i_op_assign_reg_247");
    sc_trace(mVcdFile, ret_V_3_fu_331_p2, "ret_V_3_fu_331_p2");
    sc_trace(mVcdFile, ret_V_3_reg_351, "ret_V_3_reg_351");
    sc_trace(mVcdFile, out_0_V_id_V1_status, "out_0_V_id_V1_status");
    sc_trace(mVcdFile, out_1_V_id_V1_status, "out_1_V_id_V1_status");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, iter_fu_342_p2, "iter_fu_342_p2");
    sc_trace(mVcdFile, tmp_data_V_12_reg_365, "tmp_data_V_12_reg_365");
    sc_trace(mVcdFile, tmp_id_V_1_reg_371, "tmp_id_V_1_reg_371");
    sc_trace(mVcdFile, tmp_dest_V_4_reg_376, "tmp_dest_V_4_reg_376");
    sc_trace(mVcdFile, tmp_user_V_3_reg_382, "tmp_user_V_3_reg_382");
    sc_trace(mVcdFile, tmp_last_V_1_reg_388, "tmp_last_V_1_reg_388");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, out_0_V_id_V1_update, "out_0_V_id_V1_update");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, out_1_V_id_V1_update, "out_1_V_id_V1_update");
    sc_trace(mVcdFile, tmp_141_fu_293_p1, "tmp_141_fu_293_p1");
    sc_trace(mVcdFile, p_shl_fu_297_p3, "p_shl_fu_297_p3");
    sc_trace(mVcdFile, p_shl1_fu_309_p3, "p_shl1_fu_309_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_305_p1, "p_shl_cast_fu_305_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_317_p1, "p_shl1_cast_fu_317_p1");
    sc_trace(mVcdFile, ret_V_fu_321_p2, "ret_V_fu_321_p2");
    sc_trace(mVcdFile, ret_V_cast_fu_327_p1, "ret_V_cast_fu_327_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

IdentityGather::~IdentityGather() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void IdentityGather::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_op_assign_reg_247 = iter_fu_342_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        i_op_assign_reg_247 = ap_const_lv48_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_out.read()))) {
            in_V_data_V_0_sel_rd =  (sc_logic) (~in_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_in.read()))) {
            in_V_data_V_0_sel_wr =  (sc_logic) (~in_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()))))) {
            in_V_data_V_0_state = ap_const_lv2_3;
        } else {
            in_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_out.read()))) {
            in_V_dest_V_0_sel_rd =  (sc_logic) (~in_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_in.read()))) {
            in_V_dest_V_0_sel_wr =  (sc_logic) (~in_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_dest_V_0_state.read())))) {
            in_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_dest_V_0_state.read())))) {
            in_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_out.read()))))) {
            in_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            in_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_out.read()))) {
            in_V_id_V_0_sel_rd =  (sc_logic) (~in_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_in.read()))) {
            in_V_id_V_0_sel_wr =  (sc_logic) (~in_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_id_V_0_state.read())))) {
            in_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_id_V_0_state.read())))) {
            in_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_out.read()))))) {
            in_V_id_V_0_state = ap_const_lv2_3;
        } else {
            in_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_out.read()))) {
            in_V_last_V_0_sel_rd =  (sc_logic) (~in_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_in.read()))) {
            in_V_last_V_0_sel_wr =  (sc_logic) (~in_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_last_V_0_state.read())))) {
            in_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_last_V_0_state.read())))) {
            in_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()))))) {
            in_V_last_V_0_state = ap_const_lv2_3;
        } else {
            in_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_out.read()))) {
            in_V_user_V_0_sel_rd =  (sc_logic) (~in_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_in.read()))) {
            in_V_user_V_0_sel_wr =  (sc_logic) (~in_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_user_V_0_state.read())))) {
            in_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_user_V_0_state.read())))) {
            in_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_out.read()))))) {
            in_V_user_V_0_state = ap_const_lv2_3;
        } else {
            in_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_load_A.read())) {
        in_V_data_V_0_payload_A = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_load_B.read())) {
        in_V_data_V_0_payload_B = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_load_A.read())) {
        in_V_dest_V_0_payload_A = in_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_load_B.read())) {
        in_V_dest_V_0_payload_B = in_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_load_A.read())) {
        in_V_id_V_0_payload_A = in_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_load_B.read())) {
        in_V_id_V_0_payload_B = in_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_load_A.read())) {
        in_V_last_V_0_payload_A = in_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_load_B.read())) {
        in_V_last_V_0_payload_B = in_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_load_A.read())) {
        in_V_user_V_0_payload_A = in_r_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_load_B.read())) {
        in_V_user_V_0_payload_B = in_r_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        ret_V_3_reg_351 = ret_V_3_fu_331_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_12_reg_394 = grp_fu_287_p2.read();
        tmp_data_V_12_reg_365 = in_V_data_V_0_data_out.read();
        tmp_dest_V_4_reg_376 = in_V_dest_V_0_data_out.read();
        tmp_id_V_1_reg_371 = in_V_id_V_0_data_out.read();
        tmp_last_V_1_reg_388 = in_V_last_V_0_data_out.read();
        tmp_user_V_3_reg_382 = in_V_user_V_0_data_out.read();
    }
}

void IdentityGather::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void IdentityGather::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void IdentityGather::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void IdentityGather::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void IdentityGather::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))));
}

void IdentityGather::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))));
}

void IdentityGather::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))));
}

void IdentityGather::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())));
}

void IdentityGather::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()));
}

void IdentityGather::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())));
}

void IdentityGather::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_337_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void IdentityGather::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void IdentityGather::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void IdentityGather::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void IdentityGather::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void IdentityGather::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void IdentityGather::thread_exitcond_fu_337_p2() {
    exitcond_fu_337_p2 = (!i_op_assign_reg_247.read().is_01() || !ret_V_3_reg_351.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_reg_247.read() == ret_V_3_reg_351.read());
}

void IdentityGather::thread_grp_fu_287_p2() {
    grp_fu_287_p2 = (!in_V_id_V_0_data_out.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(in_V_id_V_0_data_out.read() == ap_const_lv8_0);
}

void IdentityGather::thread_in_V_data_V_0_ack_in() {
    in_V_data_V_0_ack_in = in_V_data_V_0_state.read()[1];
}

void IdentityGather::thread_in_V_data_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void IdentityGather::thread_in_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_sel.read())) {
        in_V_data_V_0_data_out = in_V_data_V_0_payload_B.read();
    } else {
        in_V_data_V_0_data_out = in_V_data_V_0_payload_A.read();
    }
}

void IdentityGather::thread_in_V_data_V_0_load_A() {
    in_V_data_V_0_load_A = (in_V_data_V_0_state_cmp_full.read() & ~in_V_data_V_0_sel_wr.read());
}

void IdentityGather::thread_in_V_data_V_0_load_B() {
    in_V_data_V_0_load_B = (in_V_data_V_0_sel_wr.read() & in_V_data_V_0_state_cmp_full.read());
}

void IdentityGather::thread_in_V_data_V_0_sel() {
    in_V_data_V_0_sel = in_V_data_V_0_sel_rd.read();
}

void IdentityGather::thread_in_V_data_V_0_state_cmp_full() {
    in_V_data_V_0_state_cmp_full =  (sc_logic) ((!in_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void IdentityGather::thread_in_V_data_V_0_vld_in() {
    in_V_data_V_0_vld_in = in_r_TVALID.read();
}

void IdentityGather::thread_in_V_data_V_0_vld_out() {
    in_V_data_V_0_vld_out = in_V_data_V_0_state.read()[0];
}

void IdentityGather::thread_in_V_dest_V_0_ack_in() {
    in_V_dest_V_0_ack_in = in_V_dest_V_0_state.read()[1];
}

void IdentityGather::thread_in_V_dest_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        in_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void IdentityGather::thread_in_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_sel.read())) {
        in_V_dest_V_0_data_out = in_V_dest_V_0_payload_B.read();
    } else {
        in_V_dest_V_0_data_out = in_V_dest_V_0_payload_A.read();
    }
}

void IdentityGather::thread_in_V_dest_V_0_load_A() {
    in_V_dest_V_0_load_A = (in_V_dest_V_0_state_cmp_full.read() & ~in_V_dest_V_0_sel_wr.read());
}

void IdentityGather::thread_in_V_dest_V_0_load_B() {
    in_V_dest_V_0_load_B = (in_V_dest_V_0_sel_wr.read() & in_V_dest_V_0_state_cmp_full.read());
}

void IdentityGather::thread_in_V_dest_V_0_sel() {
    in_V_dest_V_0_sel = in_V_dest_V_0_sel_rd.read();
}

void IdentityGather::thread_in_V_dest_V_0_state_cmp_full() {
    in_V_dest_V_0_state_cmp_full =  (sc_logic) ((!in_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void IdentityGather::thread_in_V_dest_V_0_vld_in() {
    in_V_dest_V_0_vld_in = in_r_TVALID.read();
}

void IdentityGather::thread_in_V_dest_V_0_vld_out() {
    in_V_dest_V_0_vld_out = in_V_dest_V_0_state.read()[0];
}

void IdentityGather::thread_in_V_id_V_0_ack_in() {
    in_V_id_V_0_ack_in = in_V_id_V_0_state.read()[1];
}

void IdentityGather::thread_in_V_id_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        in_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void IdentityGather::thread_in_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_sel.read())) {
        in_V_id_V_0_data_out = in_V_id_V_0_payload_B.read();
    } else {
        in_V_id_V_0_data_out = in_V_id_V_0_payload_A.read();
    }
}

void IdentityGather::thread_in_V_id_V_0_load_A() {
    in_V_id_V_0_load_A = (in_V_id_V_0_state_cmp_full.read() & ~in_V_id_V_0_sel_wr.read());
}

void IdentityGather::thread_in_V_id_V_0_load_B() {
    in_V_id_V_0_load_B = (in_V_id_V_0_sel_wr.read() & in_V_id_V_0_state_cmp_full.read());
}

void IdentityGather::thread_in_V_id_V_0_sel() {
    in_V_id_V_0_sel = in_V_id_V_0_sel_rd.read();
}

void IdentityGather::thread_in_V_id_V_0_state_cmp_full() {
    in_V_id_V_0_state_cmp_full =  (sc_logic) ((!in_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void IdentityGather::thread_in_V_id_V_0_vld_in() {
    in_V_id_V_0_vld_in = in_r_TVALID.read();
}

void IdentityGather::thread_in_V_id_V_0_vld_out() {
    in_V_id_V_0_vld_out = in_V_id_V_0_state.read()[0];
}

void IdentityGather::thread_in_V_last_V_0_ack_in() {
    in_V_last_V_0_ack_in = in_V_last_V_0_state.read()[1];
}

void IdentityGather::thread_in_V_last_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        in_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void IdentityGather::thread_in_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_sel.read())) {
        in_V_last_V_0_data_out = in_V_last_V_0_payload_B.read();
    } else {
        in_V_last_V_0_data_out = in_V_last_V_0_payload_A.read();
    }
}

void IdentityGather::thread_in_V_last_V_0_load_A() {
    in_V_last_V_0_load_A = (in_V_last_V_0_state_cmp_full.read() & ~in_V_last_V_0_sel_wr.read());
}

void IdentityGather::thread_in_V_last_V_0_load_B() {
    in_V_last_V_0_load_B = (in_V_last_V_0_sel_wr.read() & in_V_last_V_0_state_cmp_full.read());
}

void IdentityGather::thread_in_V_last_V_0_sel() {
    in_V_last_V_0_sel = in_V_last_V_0_sel_rd.read();
}

void IdentityGather::thread_in_V_last_V_0_state_cmp_full() {
    in_V_last_V_0_state_cmp_full =  (sc_logic) ((!in_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void IdentityGather::thread_in_V_last_V_0_vld_in() {
    in_V_last_V_0_vld_in = in_r_TVALID.read();
}

void IdentityGather::thread_in_V_last_V_0_vld_out() {
    in_V_last_V_0_vld_out = in_V_last_V_0_state.read()[0];
}

void IdentityGather::thread_in_V_user_V_0_ack_in() {
    in_V_user_V_0_ack_in = in_V_user_V_0_state.read()[1];
}

void IdentityGather::thread_in_V_user_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        in_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void IdentityGather::thread_in_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_sel.read())) {
        in_V_user_V_0_data_out = in_V_user_V_0_payload_B.read();
    } else {
        in_V_user_V_0_data_out = in_V_user_V_0_payload_A.read();
    }
}

void IdentityGather::thread_in_V_user_V_0_load_A() {
    in_V_user_V_0_load_A = (in_V_user_V_0_state_cmp_full.read() & ~in_V_user_V_0_sel_wr.read());
}

void IdentityGather::thread_in_V_user_V_0_load_B() {
    in_V_user_V_0_load_B = (in_V_user_V_0_sel_wr.read() & in_V_user_V_0_state_cmp_full.read());
}

void IdentityGather::thread_in_V_user_V_0_sel() {
    in_V_user_V_0_sel = in_V_user_V_0_sel_rd.read();
}

void IdentityGather::thread_in_V_user_V_0_state_cmp_full() {
    in_V_user_V_0_state_cmp_full =  (sc_logic) ((!in_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void IdentityGather::thread_in_V_user_V_0_vld_in() {
    in_V_user_V_0_vld_in = in_r_TVALID.read();
}

void IdentityGather::thread_in_V_user_V_0_vld_out() {
    in_V_user_V_0_vld_out = in_V_user_V_0_state.read()[0];
}

void IdentityGather::thread_in_r_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_337_p2.read())))) {
        in_r_TDATA_blk_n = in_V_data_V_0_state.read()[0];
    } else {
        in_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_in_r_TREADY() {
    in_r_TREADY = in_V_last_V_0_state.read()[1];
}

void IdentityGather::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void IdentityGather::thread_iter_fu_342_p2() {
    iter_fu_342_p2 = (!i_op_assign_reg_247.read().is_01() || !ap_const_lv48_1.is_01())? sc_lv<48>(): (sc_biguint<48>(i_op_assign_reg_247.read()) + sc_biguint<48>(ap_const_lv48_1));
}

void IdentityGather::thread_out_0_V_data_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read())))) {
        out_0_V_data_V_blk_n = out_0_V_data_V_full_n.read();
    } else {
        out_0_V_data_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_0_V_data_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_0_V_data_V_din = tmp_data_V_12_reg_365.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        out_0_V_data_V_din = in_V_data_V_0_data_out.read();
    } else {
        out_0_V_data_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void IdentityGather::thread_out_0_V_data_V_write() {
    out_0_V_data_V_write = out_0_V_id_V1_update.read();
}

void IdentityGather::thread_out_0_V_dest_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read())))) {
        out_0_V_dest_V_blk_n = out_0_V_dest_V_full_n.read();
    } else {
        out_0_V_dest_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_0_V_dest_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_0_V_dest_V_din = tmp_dest_V_4_reg_376.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        out_0_V_dest_V_din = in_V_dest_V_0_data_out.read();
    } else {
        out_0_V_dest_V_din =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void IdentityGather::thread_out_0_V_dest_V_write() {
    out_0_V_dest_V_write = out_0_V_id_V1_update.read();
}

void IdentityGather::thread_out_0_V_id_V1_status() {
    out_0_V_id_V1_status = (out_0_V_data_V_full_n.read() & out_0_V_id_V_full_n.read() & out_0_V_dest_V_full_n.read() & out_0_V_user_V_full_n.read() & out_0_V_last_V_full_n.read());
}

void IdentityGather::thread_out_0_V_id_V1_update() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_0_V_id_V1_update = ap_const_logic_1;
    } else {
        out_0_V_id_V1_update = ap_const_logic_0;
    }
}

void IdentityGather::thread_out_0_V_id_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read())))) {
        out_0_V_id_V_blk_n = out_0_V_id_V_full_n.read();
    } else {
        out_0_V_id_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_0_V_id_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_0_V_id_V_din = tmp_id_V_1_reg_371.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        out_0_V_id_V_din = in_V_id_V_0_data_out.read();
    } else {
        out_0_V_id_V_din =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void IdentityGather::thread_out_0_V_id_V_write() {
    out_0_V_id_V_write = out_0_V_id_V1_update.read();
}

void IdentityGather::thread_out_0_V_last_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read())))) {
        out_0_V_last_V_blk_n = out_0_V_last_V_full_n.read();
    } else {
        out_0_V_last_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_0_V_last_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_0_V_last_V_din = tmp_last_V_1_reg_388.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        out_0_V_last_V_din = in_V_last_V_0_data_out.read();
    } else {
        out_0_V_last_V_din =  (sc_lv<1>) ("X");
    }
}

void IdentityGather::thread_out_0_V_last_V_write() {
    out_0_V_last_V_write = out_0_V_id_V1_update.read();
}

void IdentityGather::thread_out_0_V_user_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read())))) {
        out_0_V_user_V_blk_n = out_0_V_user_V_full_n.read();
    } else {
        out_0_V_user_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_0_V_user_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_reg_394.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_0_V_user_V_din = tmp_user_V_3_reg_382.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        out_0_V_user_V_din = in_V_user_V_0_data_out.read();
    } else {
        out_0_V_user_V_din =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void IdentityGather::thread_out_0_V_user_V_write() {
    out_0_V_user_V_write = out_0_V_id_V1_update.read();
}

void IdentityGather::thread_out_1_V_data_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read())))) {
        out_1_V_data_V_blk_n = out_1_V_data_V_full_n.read();
    } else {
        out_1_V_data_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_1_V_data_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_1_V_data_V_din = tmp_data_V_12_reg_365.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        out_1_V_data_V_din = in_V_data_V_0_data_out.read();
    } else {
        out_1_V_data_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void IdentityGather::thread_out_1_V_data_V_write() {
    out_1_V_data_V_write = out_1_V_id_V1_update.read();
}

void IdentityGather::thread_out_1_V_dest_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read())))) {
        out_1_V_dest_V_blk_n = out_1_V_dest_V_full_n.read();
    } else {
        out_1_V_dest_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_1_V_dest_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_1_V_dest_V_din = tmp_dest_V_4_reg_376.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        out_1_V_dest_V_din = in_V_dest_V_0_data_out.read();
    } else {
        out_1_V_dest_V_din =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void IdentityGather::thread_out_1_V_dest_V_write() {
    out_1_V_dest_V_write = out_1_V_id_V1_update.read();
}

void IdentityGather::thread_out_1_V_id_V1_status() {
    out_1_V_id_V1_status = (out_1_V_data_V_full_n.read() & out_1_V_id_V_full_n.read() & out_1_V_dest_V_full_n.read() & out_1_V_user_V_full_n.read() & out_1_V_last_V_full_n.read());
}

void IdentityGather::thread_out_1_V_id_V1_update() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_1_V_id_V1_update = ap_const_logic_1;
    } else {
        out_1_V_id_V1_update = ap_const_logic_0;
    }
}

void IdentityGather::thread_out_1_V_id_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read())))) {
        out_1_V_id_V_blk_n = out_1_V_id_V_full_n.read();
    } else {
        out_1_V_id_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_1_V_id_V_din() {
    out_1_V_id_V_din = ap_const_lv8_0;
}

void IdentityGather::thread_out_1_V_id_V_write() {
    out_1_V_id_V_write = out_1_V_id_V1_update.read();
}

void IdentityGather::thread_out_1_V_last_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read())))) {
        out_1_V_last_V_blk_n = out_1_V_last_V_full_n.read();
    } else {
        out_1_V_last_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_1_V_last_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_1_V_last_V_din = tmp_last_V_1_reg_388.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        out_1_V_last_V_din = in_V_last_V_0_data_out.read();
    } else {
        out_1_V_last_V_din =  (sc_lv<1>) ("X");
    }
}

void IdentityGather::thread_out_1_V_last_V_write() {
    out_1_V_last_V_write = out_1_V_id_V1_update.read();
}

void IdentityGather::thread_out_1_V_user_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read())))) {
        out_1_V_user_V_blk_n = out_1_V_user_V_full_n.read();
    } else {
        out_1_V_user_V_blk_n = ap_const_logic_1;
    }
}

void IdentityGather::thread_out_1_V_user_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_394.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_1_V_user_V_din = tmp_user_V_3_reg_382.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
        out_1_V_user_V_din = in_V_user_V_0_data_out.read();
    } else {
        out_1_V_user_V_din =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void IdentityGather::thread_out_1_V_user_V_write() {
    out_1_V_user_V_write = out_1_V_id_V1_update.read();
}

void IdentityGather::thread_p_shl1_cast_fu_317_p1() {
    p_shl1_cast_fu_317_p1 = esl_zext<23,18>(p_shl1_fu_309_p3.read());
}

void IdentityGather::thread_p_shl1_fu_309_p3() {
    p_shl1_fu_309_p3 = esl_concat<16,2>(tmp_141_fu_293_p1.read(), ap_const_lv2_0);
}

void IdentityGather::thread_p_shl_cast_fu_305_p1() {
    p_shl_cast_fu_305_p1 = esl_zext<23,22>(p_shl_fu_297_p3.read());
}

void IdentityGather::thread_p_shl_fu_297_p3() {
    p_shl_fu_297_p3 = esl_concat<16,6>(tmp_141_fu_293_p1.read(), ap_const_lv6_0);
}

void IdentityGather::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void IdentityGather::thread_ret_V_3_fu_331_p2() {
    ret_V_3_fu_331_p2 = (ret_V_cast_fu_327_p1.read() | ap_const_lv48_1);
}

void IdentityGather::thread_ret_V_cast_fu_327_p1() {
    ret_V_cast_fu_327_p1 = esl_sext<48,23>(ret_V_fu_321_p2.read());
}

void IdentityGather::thread_ret_V_fu_321_p2() {
    ret_V_fu_321_p2 = (!p_shl_cast_fu_305_p1.read().is_01() || !p_shl1_cast_fu_317_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(p_shl_cast_fu_305_p1.read()) - sc_biguint<23>(p_shl1_cast_fu_317_p1.read()));
}

void IdentityGather::thread_start_out() {
    start_out = real_start.read();
}

void IdentityGather::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void IdentityGather::thread_tmp_141_fu_293_p1() {
    tmp_141_fu_293_p1 = in_V_data_V_0_data_out.read().range(16-1, 0);
}

void IdentityGather::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_id_V1_status.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_287_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_id_V1_status.read()))))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_337_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_337_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

