// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "layernorm_sqrt_alg_b.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic layernorm_sqrt_alg_b::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic layernorm_sqrt_alg_b::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state1 = "1";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state2 = "10";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state3 = "100";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state4 = "1000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state5 = "10000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state6 = "100000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state7 = "1000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state8 = "10000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state9 = "100000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state10 = "1000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state11 = "10000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state12 = "100000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<39> layernorm_sqrt_alg_b::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<32> layernorm_sqrt_alg_b::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> layernorm_sqrt_alg_b::ap_const_lv32_1 = "1";
const sc_lv<1> layernorm_sqrt_alg_b::ap_const_lv1_0 = "0";
const sc_lv<32> layernorm_sqrt_alg_b::ap_const_lv32_26 = "100110";
const sc_lv<32> layernorm_sqrt_alg_b::ap_const_lv32_2 = "10";
const sc_lv<1> layernorm_sqrt_alg_b::ap_const_lv1_1 = "1";
const sc_lv<32> layernorm_sqrt_alg_b::ap_const_lv32_3 = "11";
const sc_lv<31> layernorm_sqrt_alg_b::ap_const_lv31_40000000 = "1000000000000000000000000000000";
const sc_lv<32> layernorm_sqrt_alg_b::ap_const_lv32_1E = "11110";
const sc_lv<31> layernorm_sqrt_alg_b::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> layernorm_sqrt_alg_b::ap_const_lv32_1F = "11111";
const sc_lv<32> layernorm_sqrt_alg_b::ap_const_lv32_6 = "110";
const sc_lv<32> layernorm_sqrt_alg_b::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const bool layernorm_sqrt_alg_b::ap_const_boolean_1 = true;

layernorm_sqrt_alg_b::layernorm_sqrt_alg_b(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157 = new kernel_29_udiv_32s_32ns_32_36_seq_1<1,36,32,32,32>("kernel_29_udiv_32s_32ns_32_36_seq_1_U157");
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157->clk(ap_clk);
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157->reset(ap_rst);
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157->start(grp_fu_324_ap_start);
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157->done(grp_fu_324_ap_done);
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157->din0(ap_var_for_const0);
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157->din1(grp_fu_324_p1);
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157->ce(grp_fu_324_ce);
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157->dout(grp_fu_324_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( n_pipe2_V_V_empty_n );
    sensitive << ( n_pipe3_V_V_full_n );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( in_sqrt_V_V_empty_n );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( in_sqrt_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( in_sqrt_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_c_V_1_fu_296_p3);
    sensitive << ( c_V_4_fu_266_p1 );
    sensitive << ( tmp_3_i_fu_250_p2 );
    sensitive << ( c_V_fu_282_p2 );

    SC_METHOD(thread_c_V_2_fu_256_p4);
    sensitive << ( p_2_i_reg_167 );

    SC_METHOD(thread_c_V_4_fu_266_p1);
    sensitive << ( c_V_2_fu_256_p4 );

    SC_METHOD(thread_c_V_fu_282_p2);
    sensitive << ( p_082_2_cast_i_fu_222_p1 );
    sensitive << ( c_V_4_fu_266_p1 );

    SC_METHOD(thread_d_V_1_fu_304_p4);
    sensitive << ( p_082_2_i_reg_178 );

    SC_METHOD(thread_d_V_2_fu_218_p1);
    sensitive << ( d_V_fu_208_p4 );

    SC_METHOD(thread_d_V_3_fu_314_p1);
    sensitive << ( d_V_1_fu_304_p4 );

    SC_METHOD(thread_d_V_fu_208_p4);
    sensitive << ( p_i_reg_146 );

    SC_METHOD(thread_exitcond_i_fu_188_p2);
    sensitive << ( in_sqrt_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_188_p2 );
    sensitive << ( tmp_V_reg_331 );
    sensitive << ( i_i_reg_135 );

    SC_METHOD(thread_grp_fu_324_ap_start);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_i_fu_226_p2 );

    SC_METHOD(thread_grp_fu_324_ce);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_324_p1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_2_i_reg_167 );

    SC_METHOD(thread_i_fu_193_p2);
    sensitive << ( i_i_reg_135 );

    SC_METHOD(thread_in_compute_y_factor_s_0_blk_n);
    sensitive << ( in_compute_y_factor_s_0_full_n );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_in_compute_y_factor_s_0_din);
    sensitive << ( in_compute_y_factor_s_0_full_n );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( grp_fu_324_p2 );

    SC_METHOD(thread_in_compute_y_factor_s_0_write);
    sensitive << ( in_compute_y_factor_s_0_full_n );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_in_sqrt_V_V_blk_n);
    sensitive << ( in_sqrt_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_in_sqrt_V_V_read);
    sensitive << ( in_sqrt_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_lhs_V_fu_232_p1);
    sensitive << ( p_2_i_reg_167 );

    SC_METHOD(thread_n_pipe2_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe2_V_V_empty_n );

    SC_METHOD(thread_n_pipe2_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe2_V_V_empty_n );
    sensitive << ( n_pipe3_V_V_full_n );

    SC_METHOD(thread_n_pipe3_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe3_V_V_full_n );

    SC_METHOD(thread_n_pipe3_V_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe2_V_V_dout );
    sensitive << ( n_pipe2_V_V_empty_n );
    sensitive << ( n_pipe3_V_V_full_n );

    SC_METHOD(thread_n_pipe3_V_V_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe2_V_V_empty_n );
    sensitive << ( n_pipe3_V_V_full_n );

    SC_METHOD(thread_p_082_2_cast_i_fu_222_p1);
    sensitive << ( p_082_2_i_reg_178 );

    SC_METHOD(thread_p_cast_i_fu_199_p1);
    sensitive << ( p_i_reg_146 );

    SC_METHOD(thread_p_neg_i_fu_270_p2);
    sensitive << ( p_1_i_reg_158 );
    sensitive << ( p_2_i_reg_167 );

    SC_METHOD(thread_ret_V_fu_240_p2);
    sensitive << ( lhs_V_fu_232_p1 );
    sensitive << ( rhs_V_fu_236_p1 );

    SC_METHOD(thread_rhs_V_fu_236_p1);
    sensitive << ( p_082_2_i_reg_178 );

    SC_METHOD(thread_tmp_1_i_fu_226_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_082_2_i_reg_178 );

    SC_METHOD(thread_tmp_2_i_fu_246_p1);
    sensitive << ( p_1_i_reg_158 );

    SC_METHOD(thread_tmp_3_i_fu_250_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_i_fu_226_p2 );
    sensitive << ( tmp_2_i_fu_246_p1 );
    sensitive << ( ret_V_fu_240_p2 );

    SC_METHOD(thread_tmp_i_21_fu_203_p2);
    sensitive << ( tmp_V_19_reg_344 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_cast_i_fu_199_p1 );

    SC_METHOD(thread_x_V_1_fu_276_p2);
    sensitive << ( p_neg_i_fu_270_p2 );
    sensitive << ( p_082_2_cast_i_fu_222_p1 );

    SC_METHOD(thread_x_V_2_fu_288_p3);
    sensitive << ( p_1_i_reg_158 );
    sensitive << ( tmp_3_i_fu_250_p2 );
    sensitive << ( x_V_1_fu_276_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n_pipe2_V_V_empty_n );
    sensitive << ( n_pipe3_V_V_full_n );
    sensitive << ( in_sqrt_V_V_empty_n );
    sensitive << ( in_compute_y_factor_s_0_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_188_p2 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_i_21_fu_203_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_i_fu_226_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "layernorm_sqrt_alg_b_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, n_pipe2_V_V_dout, "(port)n_pipe2_V_V_dout");
    sc_trace(mVcdFile, n_pipe2_V_V_empty_n, "(port)n_pipe2_V_V_empty_n");
    sc_trace(mVcdFile, n_pipe2_V_V_read, "(port)n_pipe2_V_V_read");
    sc_trace(mVcdFile, n_pipe3_V_V_din, "(port)n_pipe3_V_V_din");
    sc_trace(mVcdFile, n_pipe3_V_V_full_n, "(port)n_pipe3_V_V_full_n");
    sc_trace(mVcdFile, n_pipe3_V_V_write, "(port)n_pipe3_V_V_write");
    sc_trace(mVcdFile, in_sqrt_V_V_dout, "(port)in_sqrt_V_V_dout");
    sc_trace(mVcdFile, in_sqrt_V_V_empty_n, "(port)in_sqrt_V_V_empty_n");
    sc_trace(mVcdFile, in_sqrt_V_V_read, "(port)in_sqrt_V_V_read");
    sc_trace(mVcdFile, in_compute_y_factor_s_0_din, "(port)in_compute_y_factor_s_0_din");
    sc_trace(mVcdFile, in_compute_y_factor_s_0_full_n, "(port)in_compute_y_factor_s_0_full_n");
    sc_trace(mVcdFile, in_compute_y_factor_s_0_write, "(port)in_compute_y_factor_s_0_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, n_pipe2_V_V_blk_n, "n_pipe2_V_V_blk_n");
    sc_trace(mVcdFile, n_pipe3_V_V_blk_n, "n_pipe3_V_V_blk_n");
    sc_trace(mVcdFile, in_sqrt_V_V_blk_n, "in_sqrt_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_i_fu_188_p2, "exitcond_i_fu_188_p2");
    sc_trace(mVcdFile, in_compute_y_factor_s_0_blk_n, "in_compute_y_factor_s_0_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, tmp_V_reg_331, "tmp_V_reg_331");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, i_fu_193_p2, "i_fu_193_p2");
    sc_trace(mVcdFile, i_reg_339, "i_reg_339");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, tmp_V_19_reg_344, "tmp_V_19_reg_344");
    sc_trace(mVcdFile, d_V_2_fu_218_p1, "d_V_2_fu_218_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_i_21_fu_203_p2, "tmp_i_21_fu_203_p2");
    sc_trace(mVcdFile, x_V_2_fu_288_p3, "x_V_2_fu_288_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_1_i_fu_226_p2, "tmp_1_i_fu_226_p2");
    sc_trace(mVcdFile, c_V_1_fu_296_p3, "c_V_1_fu_296_p3");
    sc_trace(mVcdFile, d_V_3_fu_314_p1, "d_V_3_fu_314_p1");
    sc_trace(mVcdFile, i_i_reg_135, "i_i_reg_135");
    sc_trace(mVcdFile, p_i_reg_146, "p_i_reg_146");
    sc_trace(mVcdFile, p_1_i_reg_158, "p_1_i_reg_158");
    sc_trace(mVcdFile, p_2_i_reg_167, "p_2_i_reg_167");
    sc_trace(mVcdFile, p_082_2_i_reg_178, "p_082_2_i_reg_178");
    sc_trace(mVcdFile, grp_fu_324_p2, "grp_fu_324_p2");
    sc_trace(mVcdFile, p_cast_i_fu_199_p1, "p_cast_i_fu_199_p1");
    sc_trace(mVcdFile, d_V_fu_208_p4, "d_V_fu_208_p4");
    sc_trace(mVcdFile, lhs_V_fu_232_p1, "lhs_V_fu_232_p1");
    sc_trace(mVcdFile, rhs_V_fu_236_p1, "rhs_V_fu_236_p1");
    sc_trace(mVcdFile, tmp_2_i_fu_246_p1, "tmp_2_i_fu_246_p1");
    sc_trace(mVcdFile, ret_V_fu_240_p2, "ret_V_fu_240_p2");
    sc_trace(mVcdFile, c_V_2_fu_256_p4, "c_V_2_fu_256_p4");
    sc_trace(mVcdFile, p_neg_i_fu_270_p2, "p_neg_i_fu_270_p2");
    sc_trace(mVcdFile, p_082_2_cast_i_fu_222_p1, "p_082_2_cast_i_fu_222_p1");
    sc_trace(mVcdFile, c_V_4_fu_266_p1, "c_V_4_fu_266_p1");
    sc_trace(mVcdFile, tmp_3_i_fu_250_p2, "tmp_3_i_fu_250_p2");
    sc_trace(mVcdFile, x_V_1_fu_276_p2, "x_V_1_fu_276_p2");
    sc_trace(mVcdFile, c_V_fu_282_p2, "c_V_fu_282_p2");
    sc_trace(mVcdFile, d_V_1_fu_304_p4, "d_V_1_fu_304_p4");
    sc_trace(mVcdFile, grp_fu_324_p1, "grp_fu_324_p1");
    sc_trace(mVcdFile, grp_fu_324_ap_start, "grp_fu_324_ap_start");
    sc_trace(mVcdFile, grp_fu_324_ap_done, "grp_fu_324_ap_done");
    sc_trace(mVcdFile, grp_fu_324_ce, "grp_fu_324_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

layernorm_sqrt_alg_b::~layernorm_sqrt_alg_b() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete kernel_29_udiv_32s_32ns_32_36_seq_1_U157;
}

void layernorm_sqrt_alg_b::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_80000000;
}

void layernorm_sqrt_alg_b::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read())) && 
                    esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
         esl_seteq<1,1,1>(in_compute_y_factor_s_0_full_n.read(), ap_const_logic_1))) {
        i_i_reg_135 = i_reg_339.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe2_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe3_V_V_full_n.read())))) {
        i_i_reg_135 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_21_fu_203_p2.read()))) {
        p_082_2_i_reg_178 = p_i_reg_146.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_fu_226_p2.read()))) {
        p_082_2_i_reg_178 = d_V_3_fu_314_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_21_fu_203_p2.read()))) {
        p_1_i_reg_158 = tmp_V_19_reg_344.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_fu_226_p2.read()))) {
        p_1_i_reg_158 = x_V_2_fu_288_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_21_fu_203_p2.read()))) {
        p_2_i_reg_167 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_fu_226_p2.read()))) {
        p_2_i_reg_167 = c_V_1_fu_296_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_i_21_fu_203_p2.read(), ap_const_lv1_1))) {
        p_i_reg_146 = d_V_2_fu_218_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && 
                !(esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read())))) {
        p_i_reg_146 = ap_const_lv31_40000000;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read())))) {
        i_reg_339 = i_fu_193_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read())))) {
        tmp_V_19_reg_344 = in_sqrt_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe2_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe3_V_V_full_n.read())))) {
        tmp_V_reg_331 = n_pipe2_V_V_dout.read();
    }
}

void layernorm_sqrt_alg_b::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void layernorm_sqrt_alg_b::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void layernorm_sqrt_alg_b::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void layernorm_sqrt_alg_b::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void layernorm_sqrt_alg_b::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void layernorm_sqrt_alg_b::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe2_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe3_V_V_full_n.read()));
}

void layernorm_sqrt_alg_b::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read()));
}

void layernorm_sqrt_alg_b::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read())) && 
         esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void layernorm_sqrt_alg_b::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void layernorm_sqrt_alg_b::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read())) && 
         esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void layernorm_sqrt_alg_b::thread_c_V_1_fu_296_p3() {
    c_V_1_fu_296_p3 = (!tmp_3_i_fu_250_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_3_i_fu_250_p2.read()[0].to_bool())? c_V_4_fu_266_p1.read(): c_V_fu_282_p2.read());
}

void layernorm_sqrt_alg_b::thread_c_V_2_fu_256_p4() {
    c_V_2_fu_256_p4 = p_2_i_reg_167.read().range(31, 1);
}

void layernorm_sqrt_alg_b::thread_c_V_4_fu_266_p1() {
    c_V_4_fu_266_p1 = esl_zext<32,31>(c_V_2_fu_256_p4.read());
}

void layernorm_sqrt_alg_b::thread_c_V_fu_282_p2() {
    c_V_fu_282_p2 = (!c_V_4_fu_266_p1.read().is_01() || !p_082_2_cast_i_fu_222_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(c_V_4_fu_266_p1.read()) + sc_biguint<32>(p_082_2_cast_i_fu_222_p1.read()));
}

void layernorm_sqrt_alg_b::thread_d_V_1_fu_304_p4() {
    d_V_1_fu_304_p4 = p_082_2_i_reg_178.read().range(30, 2);
}

void layernorm_sqrt_alg_b::thread_d_V_2_fu_218_p1() {
    d_V_2_fu_218_p1 = esl_zext<31,29>(d_V_fu_208_p4.read());
}

void layernorm_sqrt_alg_b::thread_d_V_3_fu_314_p1() {
    d_V_3_fu_314_p1 = esl_zext<31,29>(d_V_1_fu_304_p4.read());
}

void layernorm_sqrt_alg_b::thread_d_V_fu_208_p4() {
    d_V_fu_208_p4 = p_i_reg_146.read().range(30, 2);
}

void layernorm_sqrt_alg_b::thread_exitcond_i_fu_188_p2() {
    exitcond_i_fu_188_p2 = (!i_i_reg_135.read().is_01() || !tmp_V_reg_331.read().is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_135.read() == tmp_V_reg_331.read());
}

void layernorm_sqrt_alg_b::thread_grp_fu_324_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_i_fu_226_p2.read()))) {
        grp_fu_324_ap_start = ap_const_logic_1;
    } else {
        grp_fu_324_ap_start = ap_const_logic_0;
    }
}

void layernorm_sqrt_alg_b::thread_grp_fu_324_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        grp_fu_324_ce = ap_const_logic_0;
    } else {
        grp_fu_324_ce = ap_const_logic_1;
    }
}

void layernorm_sqrt_alg_b::thread_grp_fu_324_p1() {
    grp_fu_324_p1 = (!ap_const_lv32_6.is_01())? sc_lv<32>(): p_2_i_reg_167.read() << (unsigned short)ap_const_lv32_6.to_uint();
}

void layernorm_sqrt_alg_b::thread_i_fu_193_p2() {
    i_fu_193_p2 = (!i_i_reg_135.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_i_reg_135.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void layernorm_sqrt_alg_b::thread_in_compute_y_factor_s_0_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        in_compute_y_factor_s_0_blk_n = in_compute_y_factor_s_0_full_n.read();
    } else {
        in_compute_y_factor_s_0_blk_n = ap_const_logic_1;
    }
}

void layernorm_sqrt_alg_b::thread_in_compute_y_factor_s_0_din() {
    in_compute_y_factor_s_0_din = grp_fu_324_p2.read();
}

void layernorm_sqrt_alg_b::thread_in_compute_y_factor_s_0_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
         esl_seteq<1,1,1>(in_compute_y_factor_s_0_full_n.read(), ap_const_logic_1))) {
        in_compute_y_factor_s_0_write = ap_const_logic_1;
    } else {
        in_compute_y_factor_s_0_write = ap_const_logic_0;
    }
}

void layernorm_sqrt_alg_b::thread_in_sqrt_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0))) {
        in_sqrt_V_V_blk_n = in_sqrt_V_V_empty_n.read();
    } else {
        in_sqrt_V_V_blk_n = ap_const_logic_1;
    }
}

void layernorm_sqrt_alg_b::thread_in_sqrt_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read())))) {
        in_sqrt_V_V_read = ap_const_logic_1;
    } else {
        in_sqrt_V_V_read = ap_const_logic_0;
    }
}

void layernorm_sqrt_alg_b::thread_lhs_V_fu_232_p1() {
    lhs_V_fu_232_p1 = esl_zext<33,32>(p_2_i_reg_167.read());
}

void layernorm_sqrt_alg_b::thread_n_pipe2_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        n_pipe2_V_V_blk_n = n_pipe2_V_V_empty_n.read();
    } else {
        n_pipe2_V_V_blk_n = ap_const_logic_1;
    }
}

void layernorm_sqrt_alg_b::thread_n_pipe2_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe2_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe3_V_V_full_n.read())))) {
        n_pipe2_V_V_read = ap_const_logic_1;
    } else {
        n_pipe2_V_V_read = ap_const_logic_0;
    }
}

void layernorm_sqrt_alg_b::thread_n_pipe3_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        n_pipe3_V_V_blk_n = n_pipe3_V_V_full_n.read();
    } else {
        n_pipe3_V_V_blk_n = ap_const_logic_1;
    }
}

void layernorm_sqrt_alg_b::thread_n_pipe3_V_V_din() {
    n_pipe3_V_V_din = n_pipe2_V_V_dout.read();
}

void layernorm_sqrt_alg_b::thread_n_pipe3_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe2_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe3_V_V_full_n.read())))) {
        n_pipe3_V_V_write = ap_const_logic_1;
    } else {
        n_pipe3_V_V_write = ap_const_logic_0;
    }
}

void layernorm_sqrt_alg_b::thread_p_082_2_cast_i_fu_222_p1() {
    p_082_2_cast_i_fu_222_p1 = esl_zext<32,31>(p_082_2_i_reg_178.read());
}

void layernorm_sqrt_alg_b::thread_p_cast_i_fu_199_p1() {
    p_cast_i_fu_199_p1 = esl_zext<32,31>(p_i_reg_146.read());
}

void layernorm_sqrt_alg_b::thread_p_neg_i_fu_270_p2() {
    p_neg_i_fu_270_p2 = (!p_1_i_reg_158.read().is_01() || !p_2_i_reg_167.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_1_i_reg_158.read()) - sc_biguint<32>(p_2_i_reg_167.read()));
}

void layernorm_sqrt_alg_b::thread_ret_V_fu_240_p2() {
    ret_V_fu_240_p2 = (!lhs_V_fu_232_p1.read().is_01() || !rhs_V_fu_236_p1.read().is_01())? sc_lv<33>(): (sc_biguint<33>(lhs_V_fu_232_p1.read()) + sc_biguint<33>(rhs_V_fu_236_p1.read()));
}

void layernorm_sqrt_alg_b::thread_rhs_V_fu_236_p1() {
    rhs_V_fu_236_p1 = esl_zext<33,31>(p_082_2_i_reg_178.read());
}

void layernorm_sqrt_alg_b::thread_tmp_1_i_fu_226_p2() {
    tmp_1_i_fu_226_p2 = (!p_082_2_i_reg_178.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): sc_lv<1>(p_082_2_i_reg_178.read() == ap_const_lv31_0);
}

void layernorm_sqrt_alg_b::thread_tmp_2_i_fu_246_p1() {
    tmp_2_i_fu_246_p1 = esl_zext<33,32>(p_1_i_reg_158.read());
}

void layernorm_sqrt_alg_b::thread_tmp_3_i_fu_250_p2() {
    tmp_3_i_fu_250_p2 = (!tmp_2_i_fu_246_p1.read().is_01() || !ret_V_fu_240_p2.read().is_01())? sc_lv<1>(): (sc_biguint<33>(tmp_2_i_fu_246_p1.read()) < sc_biguint<33>(ret_V_fu_240_p2.read()));
}

void layernorm_sqrt_alg_b::thread_tmp_i_21_fu_203_p2() {
    tmp_i_21_fu_203_p2 = (!p_cast_i_fu_199_p1.read().is_01() || !tmp_V_19_reg_344.read().is_01())? sc_lv<1>(): (sc_biguint<32>(p_cast_i_fu_199_p1.read()) > sc_biguint<32>(tmp_V_19_reg_344.read()));
}

void layernorm_sqrt_alg_b::thread_x_V_1_fu_276_p2() {
    x_V_1_fu_276_p2 = (!p_neg_i_fu_270_p2.read().is_01() || !p_082_2_cast_i_fu_222_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_neg_i_fu_270_p2.read()) - sc_biguint<32>(p_082_2_cast_i_fu_222_p1.read()));
}

void layernorm_sqrt_alg_b::thread_x_V_2_fu_288_p3() {
    x_V_2_fu_288_p3 = (!tmp_3_i_fu_250_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_3_i_fu_250_p2.read()[0].to_bool())? p_1_i_reg_158.read(): x_V_1_fu_276_p2.read());
}

void layernorm_sqrt_alg_b::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe2_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, n_pipe3_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read())) && esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_sqrt_V_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_21_fu_203_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_fu_226_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && esl_seteq<1,1,1>(in_compute_y_factor_s_0_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state39;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

