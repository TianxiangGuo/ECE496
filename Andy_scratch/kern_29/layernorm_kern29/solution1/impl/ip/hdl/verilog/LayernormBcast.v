// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LayernormBcast (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_V_data_V_dout,
        in_V_data_V_empty_n,
        in_V_data_V_read,
        in_V_id_V_dout,
        in_V_id_V_empty_n,
        in_V_id_V_read,
        in_V_dest_V_dout,
        in_V_dest_V_empty_n,
        in_V_dest_V_read,
        in_V_user_V_dout,
        in_V_user_V_empty_n,
        in_V_user_V_read,
        in_V_last_V_dout,
        in_V_last_V_empty_n,
        in_V_last_V_read,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TID,
        out_r_TDEST,
        out_r_TUSER,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] in_V_data_V_dout;
input   in_V_data_V_empty_n;
output   in_V_data_V_read;
input  [7:0] in_V_id_V_dout;
input   in_V_id_V_empty_n;
output   in_V_id_V_read;
input  [7:0] in_V_dest_V_dout;
input   in_V_dest_V_empty_n;
output   in_V_dest_V_read;
input  [15:0] in_V_user_V_dout;
input   in_V_user_V_empty_n;
output   in_V_user_V_read;
input  [0:0] in_V_last_V_dout;
input   in_V_last_V_empty_n;
output   in_V_last_V_read;
output  [511:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TID;
output  [7:0] out_r_TDEST;
output  [15:0] out_r_TUSER;
output  [0:0] out_r_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [511:0] out_V_data_V_1_data_in;
reg   [511:0] out_V_data_V_1_data_out;
reg    out_V_data_V_1_vld_in;
wire    out_V_data_V_1_vld_out;
wire    out_V_data_V_1_ack_in;
wire    out_V_data_V_1_ack_out;
reg   [511:0] out_V_data_V_1_payload_A;
reg   [511:0] out_V_data_V_1_payload_B;
reg    out_V_data_V_1_sel_rd;
reg    out_V_data_V_1_sel_wr;
wire    out_V_data_V_1_sel;
wire    out_V_data_V_1_load_A;
wire    out_V_data_V_1_load_B;
reg   [1:0] out_V_data_V_1_state;
wire    out_V_data_V_1_state_cmp_full;
wire   [7:0] out_V_id_V_1_data_out;
reg    out_V_id_V_1_vld_in;
wire    out_V_id_V_1_vld_out;
wire    out_V_id_V_1_ack_in;
wire    out_V_id_V_1_ack_out;
reg    out_V_id_V_1_sel_rd;
wire    out_V_id_V_1_sel;
reg   [1:0] out_V_id_V_1_state;
reg   [7:0] out_V_dest_V_1_data_in;
reg   [7:0] out_V_dest_V_1_data_out;
reg    out_V_dest_V_1_vld_in;
wire    out_V_dest_V_1_vld_out;
wire    out_V_dest_V_1_ack_in;
wire    out_V_dest_V_1_ack_out;
reg   [7:0] out_V_dest_V_1_payload_A;
reg   [7:0] out_V_dest_V_1_payload_B;
reg    out_V_dest_V_1_sel_rd;
reg    out_V_dest_V_1_sel_wr;
wire    out_V_dest_V_1_sel;
wire    out_V_dest_V_1_load_A;
wire    out_V_dest_V_1_load_B;
reg   [1:0] out_V_dest_V_1_state;
wire    out_V_dest_V_1_state_cmp_full;
reg   [15:0] out_V_user_V_1_data_in;
reg   [15:0] out_V_user_V_1_data_out;
reg    out_V_user_V_1_vld_in;
wire    out_V_user_V_1_vld_out;
wire    out_V_user_V_1_ack_in;
wire    out_V_user_V_1_ack_out;
reg   [15:0] out_V_user_V_1_payload_A;
reg   [15:0] out_V_user_V_1_payload_B;
reg    out_V_user_V_1_sel_rd;
reg    out_V_user_V_1_sel_wr;
wire    out_V_user_V_1_sel;
wire    out_V_user_V_1_load_A;
wire    out_V_user_V_1_load_B;
reg   [1:0] out_V_user_V_1_state;
wire    out_V_user_V_1_state_cmp_full;
reg   [0:0] out_V_last_V_1_data_in;
reg   [0:0] out_V_last_V_1_data_out;
reg    out_V_last_V_1_vld_in;
wire    out_V_last_V_1_vld_out;
wire    out_V_last_V_1_ack_in;
wire    out_V_last_V_1_ack_out;
reg   [0:0] out_V_last_V_1_payload_A;
reg   [0:0] out_V_last_V_1_payload_B;
reg    out_V_last_V_1_sel_rd;
reg    out_V_last_V_1_sel_wr;
wire    out_V_last_V_1_sel;
wire    out_V_last_V_1_load_A;
wire    out_V_last_V_1_load_B;
reg   [1:0] out_V_last_V_1_state;
wire    out_V_last_V_1_state_cmp_full;
reg    in_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_2_reg_555;
reg   [0:0] tmp_9_reg_542;
reg    in_V_id_V_blk_n;
reg    in_V_dest_V_blk_n;
reg    in_V_user_V_blk_n;
reg    in_V_last_V_blk_n;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_341_p2;
wire   [0:0] tmp_mid2_fu_379_p3;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_mid2_reg_523;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_2_reg_555_pp0_iter1_reg;
reg   [3:0] j_reg_259;
wire   [511:0] temp_data_V_fu_301_p1;
reg   [511:0] temp_data_V_reg_497;
wire    in_V_id_V0_status;
reg    ap_block_state1;
wire   [34:0] bound_fu_321_p2;
reg   [34:0] bound_reg_502;
wire   [34:0] indvar_flatten_next_fu_346_p2;
reg   [34:0] indvar_flatten_next_reg_510;
reg    ap_block_state2;
reg    ap_predicate_op50_write_state2;
reg    ap_block_state2_io;
wire   [2:0] iter_mid2_fu_358_p3;
reg   [2:0] iter_mid2_reg_515;
wire   [15:0] tmp_user_V_10_cast_fu_407_p1;
reg   [15:0] tmp_user_V_10_cast_reg_527;
wire   [31:0] i_mid2_fu_411_p3;
reg   [31:0] i_mid2_reg_532;
wire   [7:0] tmp_dest_V_1_fu_437_p1;
wire   [0:0] tmp_9_fu_442_p2;
reg    ap_block_state3_io;
wire   [0:0] grp_fu_292_p2;
reg   [0:0] tmp_1_reg_546;
wire   [7:0] tmp_dest_V_3_fu_464_p1;
reg   [7:0] tmp_dest_V_3_reg_550;
wire   [0:0] tmp_2_fu_468_p2;
wire    ap_block_state4_pp0_stage0_iter0;
wire   [511:0] fifo_V_V_dout;
wire    fifo_V_V_empty_n;
reg    fifo_V_V_read;
reg    ap_predicate_op68_read_state5;
reg   [511:0] fifo_V_V_din;
wire    fifo_V_V_full_n;
reg    fifo_V_V_write;
reg    ap_predicate_op70_write_state5;
reg    ap_predicate_op72_read_state5;
reg    ap_predicate_op74_write_state5;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] j_2_fu_474_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] temp_last_V_fu_480_p2;
reg   [0:0] temp_last_V_reg_564;
wire   [2:0] iter_1_fu_486_p2;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [34:0] indvar_flatten_reg_226;
reg   [31:0] i_reg_237;
reg   [2:0] iter_reg_248;
reg   [511:0] ap_phi_mux_tmp_data_V_7_phi_fu_274_p6;
wire   [511:0] ap_phi_reg_pp0_iter1_tmp_data_V_7_reg_270;
reg    in_V_id_V0_update;
reg    ap_block_pp0_stage0_01001;
reg   [2:0] grp_fu_292_p0;
wire   [31:0] N_fu_297_p1;
wire   [33:0] tmp_10_fu_309_p3;
wire   [34:0] cast_fu_305_p1;
wire   [34:0] p_shl_fu_317_p1;
wire   [0:0] tmp_s_fu_327_p2;
wire   [0:0] tmp_11_fu_352_p2;
wire   [31:0] i_s_fu_367_p2;
wire   [0:0] tmp_mid1_fu_373_p2;
wire   [2:0] tmp_user_V_9_mid1_fu_387_p3;
wire   [2:0] tmp_user_V_fu_333_p3;
wire   [2:0] tmp_user_V_2_fu_395_p3;
wire  signed [3:0] tmp_user_V_10_cast8_fu_403_p1;
wire   [5:0] tmp_25_cast_fu_419_p1;
wire   [5:0] phitmp1_fu_423_p2;
wire   [5:0] temp_dest_V_fu_429_p3;
wire   [5:0] tmp_28_cast_fu_447_p1;
wire   [5:0] phitmp_fu_450_p2;
wire   [5:0] temp_dest_V_1_fu_456_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_575;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 out_V_data_V_1_sel_rd = 1'b0;
#0 out_V_data_V_1_sel_wr = 1'b0;
#0 out_V_data_V_1_state = 2'd0;
#0 out_V_id_V_1_sel_rd = 1'b0;
#0 out_V_id_V_1_state = 2'd0;
#0 out_V_dest_V_1_sel_rd = 1'b0;
#0 out_V_dest_V_1_sel_wr = 1'b0;
#0 out_V_dest_V_1_state = 2'd0;
#0 out_V_user_V_1_sel_rd = 1'b0;
#0 out_V_user_V_1_sel_wr = 1'b0;
#0 out_V_user_V_1_state = 2'd0;
#0 out_V_last_V_1_sel_rd = 1'b0;
#0 out_V_last_V_1_sel_wr = 1'b0;
#0 out_V_last_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

fifo_w512_d12_A fifo_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fifo_V_V_din),
    .if_full_n(fifo_V_V_full_n),
    .if_write(fifo_V_V_write),
    .if_dout(fifo_V_V_dout),
    .if_empty_n(fifo_V_V_empty_n),
    .if_read(fifo_V_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (exitcond_flatten_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_out == 1'b1) & (out_V_data_V_1_vld_out == 1'b1))) begin
            out_V_data_V_1_sel_rd <= ~out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_in == 1'b1) & (out_V_data_V_1_vld_in == 1'b1))) begin
            out_V_data_V_1_sel_wr <= ~out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd2;
        end else if ((((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd1;
        end else if (((~((out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)) & ~((out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)) & (out_V_data_V_1_state == 2'd3)) | ((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b1)) | ((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd3;
        end else begin
            out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_dest_V_1_ack_out == 1'b1) & (out_V_dest_V_1_vld_out == 1'b1))) begin
            out_V_dest_V_1_sel_rd <= ~out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_dest_V_1_ack_in == 1'b1) & (out_V_dest_V_1_vld_in == 1'b1))) begin
            out_V_dest_V_1_sel_wr <= ~out_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd2;
        end else if ((((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)) & ~((out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)) & (out_V_dest_V_1_state == 2'd3)) | ((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b1)) | ((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd3;
        end else begin
            out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_id_V_1_ack_out == 1'b1) & (out_V_id_V_1_vld_out == 1'b1))) begin
            out_V_id_V_1_sel_rd <= ~out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd2;
        end else if ((((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd1;
        end else if (((~((out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)) & ~((out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)) & (out_V_id_V_1_state == 2'd3)) | ((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b1)) | ((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd3;
        end else begin
            out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_out == 1'b1) & (out_V_last_V_1_vld_out == 1'b1))) begin
            out_V_last_V_1_sel_rd <= ~out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_in == 1'b1) & (out_V_last_V_1_vld_in == 1'b1))) begin
            out_V_last_V_1_sel_wr <= ~out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd2;
        end else if ((((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd1;
        end else if (((~((out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)) & ~((out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)) & (out_V_last_V_1_state == 2'd3)) | ((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b1)) | ((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd3;
        end else begin
            out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_out == 1'b1) & (out_V_user_V_1_vld_out == 1'b1))) begin
            out_V_user_V_1_sel_rd <= ~out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_in == 1'b1) & (out_V_user_V_1_vld_in == 1'b1))) begin
            out_V_user_V_1_sel_wr <= ~out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd2;
        end else if ((((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd1;
        end else if (((~((out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)) & ~((out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)) & (out_V_user_V_1_state == 2'd3)) | ((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b1)) | ((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd3;
        end else begin
            out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_237 <= i_mid2_reg_532;
    end else if ((~((in_V_id_V0_status == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_237 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_226 <= indvar_flatten_next_reg_510;
    end else if ((~((in_V_id_V0_status == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_226 <= 35'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        iter_reg_248 <= iter_1_fu_486_p2;
    end else if ((~((in_V_id_V0_status == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        iter_reg_248 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_468_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_259 <= j_2_fu_474_p2;
    end else if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_259 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_id_V0_status == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_502 <= bound_fu_321_p2;
        temp_data_V_reg_497[31 : 0] <= temp_data_V_fu_301_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (exitcond_flatten_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_mid2_reg_532 <= i_mid2_fu_411_p3;
        iter_mid2_reg_515 <= iter_mid2_fu_358_p3;
        tmp_mid2_reg_523 <= tmp_mid2_fu_379_p3;
        tmp_user_V_10_cast_reg_527[0] <= tmp_user_V_10_cast_fu_407_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_next_reg_510 <= indvar_flatten_next_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_A == 1'b1)) begin
        out_V_data_V_1_payload_A <= out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_B == 1'b1)) begin
        out_V_data_V_1_payload_B <= out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_dest_V_1_load_A == 1'b1)) begin
        out_V_dest_V_1_payload_A <= out_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_dest_V_1_load_B == 1'b1)) begin
        out_V_dest_V_1_payload_B <= out_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_A == 1'b1)) begin
        out_V_last_V_1_payload_A <= out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_B == 1'b1)) begin
        out_V_last_V_1_payload_B <= out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_user_V_1_load_A == 1'b1)) begin
        out_V_user_V_1_payload_A <= out_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_user_V_1_load_B == 1'b1)) begin
        out_V_user_V_1_payload_B <= out_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_468_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_last_V_reg_564 <= temp_last_V_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_1_reg_546 <= grp_fu_292_p2;
        tmp_9_reg_542 <= tmp_9_fu_442_p2;
        tmp_dest_V_3_reg_550[5 : 0] <= tmp_dest_V_3_fu_464_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_555 <= tmp_2_fu_468_p2;
        tmp_2_reg_555_pp0_iter1_reg <= tmp_2_reg_555;
    end
end

always @ (*) begin
    if ((tmp_2_fu_468_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (exitcond_flatten_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_1_reg_546 == 1'd1) & (tmp_9_reg_542 == 1'd0) & (tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_1_reg_546 == 1'd0) & (tmp_9_reg_542 == 1'd0) & (tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_mux_tmp_data_V_7_phi_fu_274_p6 = fifo_V_V_dout;
    end else if (((tmp_9_reg_542 == 1'd1) & (tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_tmp_data_V_7_phi_fu_274_p6 = in_V_data_V_dout;
    end else begin
        ap_phi_mux_tmp_data_V_7_phi_fu_274_p6 = ap_phi_reg_pp0_iter1_tmp_data_V_7_reg_270;
    end
end

always @ (*) begin
    if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (exitcond_flatten_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_575)) begin
        if ((ap_predicate_op74_write_state5 == 1'b1)) begin
            fifo_V_V_din = in_V_data_V_dout;
        end else if ((ap_predicate_op70_write_state5 == 1'b1)) begin
            fifo_V_V_din = fifo_V_V_dout;
        end else begin
            fifo_V_V_din = 'bx;
        end
    end else begin
        fifo_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op68_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_V_V_read = 1'b1;
    end else begin
        fifo_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op74_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op70_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        fifo_V_V_write = 1'b1;
    end else begin
        fifo_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_292_p0 = iter_mid2_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_292_p0 = iter_mid2_fu_358_p3;
    end else begin
        grp_fu_292_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_9_reg_542 == 1'd1) & (tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_data_V_blk_n = in_V_data_V_empty_n;
    end else begin
        in_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_9_reg_542 == 1'd1) & (tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_dest_V_blk_n = in_V_dest_V_empty_n;
    end else begin
        in_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op72_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((in_V_id_V0_status == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_id_V0_update = 1'b1;
    end else begin
        in_V_id_V0_update = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_9_reg_542 == 1'd1) & (tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_id_V_blk_n = in_V_id_V_empty_n;
    end else begin
        in_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_9_reg_542 == 1'd1) & (tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_last_V_blk_n = in_V_last_V_empty_n;
    end else begin
        in_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_9_reg_542 == 1'd1) & (tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_user_V_blk_n = in_V_user_V_empty_n;
    end else begin
        in_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_data_V_1_data_in = ap_phi_mux_tmp_data_V_7_phi_fu_274_p6;
    end else if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0)) & (ap_predicate_op50_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_data_V_1_data_in = temp_data_V_reg_497;
    end else begin
        out_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_V_data_V_1_sel == 1'b1)) begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B;
    end else begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (ap_predicate_op50_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_dest_V_1_data_in = tmp_dest_V_3_reg_550;
    end else if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0)) & (ap_predicate_op50_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_dest_V_1_data_in = tmp_dest_V_1_fu_437_p1;
    end else begin
        out_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_V_dest_V_1_sel == 1'b1)) begin
        out_V_dest_V_1_data_out = out_V_dest_V_1_payload_B;
    end else begin
        out_V_dest_V_1_data_out = out_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (ap_predicate_op50_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (ap_predicate_op50_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_id_V_1_vld_in = 1'b1;
    end else begin
        out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_last_V_1_data_in = temp_last_V_reg_564;
    end else if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0)) & (ap_predicate_op50_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_last_V_1_data_in = 1'd0;
    end else begin
        out_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_V_last_V_1_sel == 1'b1)) begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_B;
    end else begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (ap_predicate_op50_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_user_V_1_data_in = tmp_user_V_10_cast_reg_527;
    end else if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0)) & (ap_predicate_op50_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_user_V_1_data_in = 16'd13;
    end else begin
        out_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_V_user_V_1_sel == 1'b1)) begin
        out_V_user_V_1_data_out = out_V_user_V_1_payload_B;
    end else begin
        out_V_user_V_1_data_out = out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (ap_predicate_op50_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_user_V_1_vld_in = 1'b1;
    end else begin
        out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_mid2_reg_523 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_mid2_fu_379_p3 == 1'd1) & (exitcond_flatten_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_2_reg_555_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_2_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_r_TDATA_blk_n = out_V_data_V_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_V_id_V0_status == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (exitcond_flatten_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (exitcond_flatten_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_2_fu_468_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((tmp_2_fu_468_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign N_fu_297_p1 = in_V_data_V_dout[31:0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((fifo_V_V_full_n == 1'b0) & (ap_predicate_op74_write_state5 == 1'b1)) | ((fifo_V_V_full_n == 1'b0) & (ap_predicate_op70_write_state5 == 1'b1)) | ((fifo_V_V_empty_n == 1'b0) & (ap_predicate_op68_read_state5 == 1'b1)) | ((in_V_id_V0_status == 1'b0) & (ap_predicate_op72_read_state5 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((fifo_V_V_full_n == 1'b0) & (ap_predicate_op74_write_state5 == 1'b1)) | ((fifo_V_V_full_n == 1'b0) & (ap_predicate_op70_write_state5 == 1'b1)) | ((fifo_V_V_empty_n == 1'b0) & (ap_predicate_op68_read_state5 == 1'b1)) | ((in_V_id_V0_status == 1'b0) & (ap_predicate_op72_read_state5 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((fifo_V_V_full_n == 1'b0) & (ap_predicate_op74_write_state5 == 1'b1)) | ((fifo_V_V_full_n == 1'b0) & (ap_predicate_op70_write_state5 == 1'b1)) | ((fifo_V_V_empty_n == 1'b0) & (ap_predicate_op68_read_state5 == 1'b1)) | ((in_V_id_V0_status == 1'b0) & (ap_predicate_op72_read_state5 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((in_V_id_V0_status == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((out_V_data_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((out_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op50_write_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state3_io = ((tmp_mid2_reg_523 == 1'd1) & (out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((tmp_2_reg_555 == 1'd0) & (out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((fifo_V_V_full_n == 1'b0) & (ap_predicate_op74_write_state5 == 1'b1)) | ((fifo_V_V_full_n == 1'b0) & (ap_predicate_op70_write_state5 == 1'b1)) | ((fifo_V_V_empty_n == 1'b0) & (ap_predicate_op68_read_state5 == 1'b1)) | ((in_V_id_V0_status == 1'b0) & (ap_predicate_op72_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_state6_io = ((tmp_2_reg_555_pp0_iter1_reg == 1'd0) & (out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_575 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_tmp_data_V_7_reg_270 = 'bx;

always @ (*) begin
    ap_predicate_op50_write_state2 = ((tmp_mid2_fu_379_p3 == 1'd1) & (exitcond_flatten_fu_341_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op68_read_state5 = ((tmp_9_reg_542 == 1'd0) & (tmp_2_reg_555 == 1'd0));
end

always @ (*) begin
    ap_predicate_op70_write_state5 = ((tmp_1_reg_546 == 1'd0) & (tmp_9_reg_542 == 1'd0) & (tmp_2_reg_555 == 1'd0));
end

always @ (*) begin
    ap_predicate_op72_read_state5 = ((tmp_9_reg_542 == 1'd1) & (tmp_2_reg_555 == 1'd0));
end

always @ (*) begin
    ap_predicate_op74_write_state5 = ((tmp_9_reg_542 == 1'd1) & (tmp_2_reg_555 == 1'd0));
end

assign bound_fu_321_p2 = (cast_fu_305_p1 + p_shl_fu_317_p1);

assign cast_fu_305_p1 = N_fu_297_p1;

assign exitcond_flatten_fu_341_p2 = ((indvar_flatten_reg_226 == bound_reg_502) ? 1'b1 : 1'b0);

assign grp_fu_292_p2 = ((grp_fu_292_p0 == 3'd4) ? 1'b1 : 1'b0);

assign i_mid2_fu_411_p3 = ((tmp_11_fu_352_p2[0:0] === 1'b1) ? i_s_fu_367_p2 : i_reg_237);

assign i_s_fu_367_p2 = (i_reg_237 + 32'd1);

assign in_V_data_V_read = in_V_id_V0_update;

assign in_V_dest_V_read = in_V_id_V0_update;

assign in_V_id_V0_status = (in_V_user_V_empty_n & in_V_last_V_empty_n & in_V_id_V_empty_n & in_V_dest_V_empty_n & in_V_data_V_empty_n);

assign in_V_id_V_read = in_V_id_V0_update;

assign in_V_last_V_read = in_V_id_V0_update;

assign in_V_user_V_read = in_V_id_V0_update;

assign indvar_flatten_next_fu_346_p2 = (indvar_flatten_reg_226 + 35'd1);

assign iter_1_fu_486_p2 = (iter_mid2_reg_515 + 3'd1);

assign iter_mid2_fu_358_p3 = ((tmp_11_fu_352_p2[0:0] === 1'b1) ? 3'd0 : iter_reg_248);

assign j_2_fu_474_p2 = (j_reg_259 + 4'd1);

assign out_V_data_V_1_ack_in = out_V_data_V_1_state[1'd1];

assign out_V_data_V_1_ack_out = out_r_TREADY;

assign out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full & ~out_V_data_V_1_sel_wr);

assign out_V_data_V_1_load_B = (out_V_data_V_1_state_cmp_full & out_V_data_V_1_sel_wr);

assign out_V_data_V_1_sel = out_V_data_V_1_sel_rd;

assign out_V_data_V_1_state_cmp_full = ((out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_data_V_1_vld_out = out_V_data_V_1_state[1'd0];

assign out_V_dest_V_1_ack_in = out_V_dest_V_1_state[1'd1];

assign out_V_dest_V_1_ack_out = out_r_TREADY;

assign out_V_dest_V_1_load_A = (out_V_dest_V_1_state_cmp_full & ~out_V_dest_V_1_sel_wr);

assign out_V_dest_V_1_load_B = (out_V_dest_V_1_state_cmp_full & out_V_dest_V_1_sel_wr);

assign out_V_dest_V_1_sel = out_V_dest_V_1_sel_rd;

assign out_V_dest_V_1_state_cmp_full = ((out_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_dest_V_1_vld_out = out_V_dest_V_1_state[1'd0];

assign out_V_id_V_1_ack_in = out_V_id_V_1_state[1'd1];

assign out_V_id_V_1_ack_out = out_r_TREADY;

assign out_V_id_V_1_data_out = 8'd29;

assign out_V_id_V_1_sel = out_V_id_V_1_sel_rd;

assign out_V_id_V_1_vld_out = out_V_id_V_1_state[1'd0];

assign out_V_last_V_1_ack_in = out_V_last_V_1_state[1'd1];

assign out_V_last_V_1_ack_out = out_r_TREADY;

assign out_V_last_V_1_load_A = (out_V_last_V_1_state_cmp_full & ~out_V_last_V_1_sel_wr);

assign out_V_last_V_1_load_B = (out_V_last_V_1_state_cmp_full & out_V_last_V_1_sel_wr);

assign out_V_last_V_1_sel = out_V_last_V_1_sel_rd;

assign out_V_last_V_1_state_cmp_full = ((out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_last_V_1_vld_out = out_V_last_V_1_state[1'd0];

assign out_V_user_V_1_ack_in = out_V_user_V_1_state[1'd1];

assign out_V_user_V_1_ack_out = out_r_TREADY;

assign out_V_user_V_1_load_A = (out_V_user_V_1_state_cmp_full & ~out_V_user_V_1_sel_wr);

assign out_V_user_V_1_load_B = (out_V_user_V_1_state_cmp_full & out_V_user_V_1_sel_wr);

assign out_V_user_V_1_sel = out_V_user_V_1_sel_rd;

assign out_V_user_V_1_state_cmp_full = ((out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_user_V_1_vld_out = out_V_user_V_1_state[1'd0];

assign out_r_TDATA = out_V_data_V_1_data_out;

assign out_r_TDEST = out_V_dest_V_1_data_out;

assign out_r_TID = out_V_id_V_1_data_out;

assign out_r_TLAST = out_V_last_V_1_data_out;

assign out_r_TUSER = out_V_user_V_1_data_out;

assign out_r_TVALID = out_V_last_V_1_state[1'd0];

assign p_shl_fu_317_p1 = tmp_10_fu_309_p3;

assign phitmp1_fu_423_p2 = (tmp_25_cast_fu_419_p1 + 6'd30);

assign phitmp_fu_450_p2 = (tmp_28_cast_fu_447_p1 + 6'd30);

assign temp_data_V_fu_301_p1 = N_fu_297_p1;

assign temp_dest_V_1_fu_456_p3 = ((grp_fu_292_p2[0:0] === 1'b1) ? 6'd38 : phitmp_fu_450_p2);

assign temp_dest_V_fu_429_p3 = ((grp_fu_292_p2[0:0] === 1'b1) ? 6'd38 : phitmp1_fu_423_p2);

assign temp_last_V_fu_480_p2 = ((j_reg_259 == 4'd11) ? 1'b1 : 1'b0);

assign tmp_10_fu_309_p3 = {{N_fu_297_p1}, {2'd0}};

assign tmp_11_fu_352_p2 = ((iter_reg_248 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_25_cast_fu_419_p1 = iter_mid2_fu_358_p3;

assign tmp_28_cast_fu_447_p1 = iter_mid2_reg_515;

assign tmp_2_fu_468_p2 = ((j_reg_259 == 4'd12) ? 1'b1 : 1'b0);

assign tmp_9_fu_442_p2 = ((iter_mid2_reg_515 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_dest_V_1_fu_437_p1 = temp_dest_V_fu_429_p3;

assign tmp_dest_V_3_fu_464_p1 = temp_dest_V_1_fu_456_p3;

assign tmp_mid1_fu_373_p2 = ((i_s_fu_367_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_379_p3 = ((tmp_11_fu_352_p2[0:0] === 1'b1) ? tmp_mid1_fu_373_p2 : tmp_s_fu_327_p2);

assign tmp_s_fu_327_p2 = ((i_reg_237 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_user_V_10_cast8_fu_403_p1 = $signed(tmp_user_V_2_fu_395_p3);

assign tmp_user_V_10_cast_fu_407_p1 = $unsigned(tmp_user_V_10_cast8_fu_403_p1);

assign tmp_user_V_2_fu_395_p3 = ((tmp_11_fu_352_p2[0:0] === 1'b1) ? tmp_user_V_9_mid1_fu_387_p3 : tmp_user_V_fu_333_p3);

assign tmp_user_V_9_mid1_fu_387_p3 = ((tmp_mid1_fu_373_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign tmp_user_V_fu_333_p3 = ((tmp_s_fu_327_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

always @ (posedge ap_clk) begin
    temp_data_V_reg_497[511:32] <= 480'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    tmp_user_V_10_cast_reg_527[15:1] <= 15'b000000000000110;
    tmp_dest_V_3_reg_550[7:6] <= 2'b00;
end

endmodule //LayernormBcast
