-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity layernorm_sqrt_alg_b is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_pipe2_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    n_pipe2_V_V_empty_n : IN STD_LOGIC;
    n_pipe2_V_V_read : OUT STD_LOGIC;
    n_pipe3_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_pipe3_V_V_full_n : IN STD_LOGIC;
    n_pipe3_V_V_write : OUT STD_LOGIC;
    in_sqrt_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_sqrt_V_V_empty_n : IN STD_LOGIC;
    in_sqrt_V_V_read : OUT STD_LOGIC;
    in_compute_y_factor_s_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_compute_y_factor_s_0_full_n : IN STD_LOGIC;
    in_compute_y_factor_s_0_write : OUT STD_LOGIC );
end;


architecture behav of layernorm_sqrt_alg_b is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_40000000 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n_pipe2_V_V_blk_n : STD_LOGIC;
    signal n_pipe3_V_V_blk_n : STD_LOGIC;
    signal in_sqrt_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_i_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_compute_y_factor_s_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_V_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_19_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_V_2_fu_218_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_21_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_2_fu_288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_1_i_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_V_1_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_V_3_fu_314_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_i_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i_reg_146 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_1_i_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_2_i_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_082_2_i_reg_178 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_i_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_V_fu_208_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal lhs_V_fu_232_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal rhs_V_fu_236_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_i_fu_246_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_240_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal c_V_2_fu_256_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_neg_i_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_082_2_cast_i_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_V_4_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_1_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_V_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_V_1_fu_304_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_ap_start : STD_LOGIC;
    signal grp_fu_324_ap_done : STD_LOGIC;
    signal grp_fu_324_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);

    component kernel_29_udiv_32s_32ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    kernel_29_udiv_32s_32ns_32_36_seq_1_U157 : component kernel_29_udiv_32s_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_324_ap_start,
        done => grp_fu_324_ap_done,
        din0 => ap_const_lv32_80000000,
        din1 => grp_fu_324_p1,
        ce => grp_fu_324_ce,
        dout => grp_fu_324_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0))) and (exitcond_i_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_compute_y_factor_s_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                i_i_reg_135 <= i_reg_339;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (n_pipe3_V_V_full_n = ap_const_logic_0) or (n_pipe2_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_135 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_082_2_i_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_21_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                                p_082_2_i_reg_178(0) <= p_i_reg_146(0);                p_082_2_i_reg_178(2) <= p_i_reg_146(2);                p_082_2_i_reg_178(4) <= p_i_reg_146(4);                p_082_2_i_reg_178(6) <= p_i_reg_146(6);                p_082_2_i_reg_178(8) <= p_i_reg_146(8);                p_082_2_i_reg_178(10) <= p_i_reg_146(10);                p_082_2_i_reg_178(12) <= p_i_reg_146(12);                p_082_2_i_reg_178(14) <= p_i_reg_146(14);                p_082_2_i_reg_178(16) <= p_i_reg_146(16);                p_082_2_i_reg_178(18) <= p_i_reg_146(18);                p_082_2_i_reg_178(20) <= p_i_reg_146(20);                p_082_2_i_reg_178(22) <= p_i_reg_146(22);                p_082_2_i_reg_178(24) <= p_i_reg_146(24);                p_082_2_i_reg_178(26) <= p_i_reg_146(26);                p_082_2_i_reg_178(28) <= p_i_reg_146(28);                p_082_2_i_reg_178(30) <= p_i_reg_146(30);
            elsif (((tmp_1_i_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                                p_082_2_i_reg_178(0) <= d_V_3_fu_314_p1(0);                p_082_2_i_reg_178(2) <= d_V_3_fu_314_p1(2);                p_082_2_i_reg_178(4) <= d_V_3_fu_314_p1(4);                p_082_2_i_reg_178(6) <= d_V_3_fu_314_p1(6);                p_082_2_i_reg_178(8) <= d_V_3_fu_314_p1(8);                p_082_2_i_reg_178(10) <= d_V_3_fu_314_p1(10);                p_082_2_i_reg_178(12) <= d_V_3_fu_314_p1(12);                p_082_2_i_reg_178(14) <= d_V_3_fu_314_p1(14);                p_082_2_i_reg_178(16) <= d_V_3_fu_314_p1(16);                p_082_2_i_reg_178(18) <= d_V_3_fu_314_p1(18);                p_082_2_i_reg_178(20) <= d_V_3_fu_314_p1(20);                p_082_2_i_reg_178(22) <= d_V_3_fu_314_p1(22);                p_082_2_i_reg_178(24) <= d_V_3_fu_314_p1(24);                p_082_2_i_reg_178(26) <= d_V_3_fu_314_p1(26);                p_082_2_i_reg_178(28) <= d_V_3_fu_314_p1(28);                p_082_2_i_reg_178(30) <= d_V_3_fu_314_p1(30);
            end if; 
        end if;
    end process;

    p_1_i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_21_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_1_i_reg_158 <= tmp_V_19_reg_344;
            elsif (((tmp_1_i_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_1_i_reg_158 <= x_V_2_fu_288_p3;
            end if; 
        end if;
    end process;

    p_2_i_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_21_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_2_i_reg_167 <= ap_const_lv32_0;
            elsif (((tmp_1_i_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_2_i_reg_167 <= c_V_1_fu_296_p3;
            end if; 
        end if;
    end process;

    p_i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_21_fu_203_p2 = ap_const_lv1_1))) then 
                                p_i_reg_146(0) <= d_V_2_fu_218_p1(0);                p_i_reg_146(2) <= d_V_2_fu_218_p1(2);                p_i_reg_146(4) <= d_V_2_fu_218_p1(4);                p_i_reg_146(6) <= d_V_2_fu_218_p1(6);                p_i_reg_146(8) <= d_V_2_fu_218_p1(8);                p_i_reg_146(10) <= d_V_2_fu_218_p1(10);                p_i_reg_146(12) <= d_V_2_fu_218_p1(12);                p_i_reg_146(14) <= d_V_2_fu_218_p1(14);                p_i_reg_146(16) <= d_V_2_fu_218_p1(16);                p_i_reg_146(18) <= d_V_2_fu_218_p1(18);                p_i_reg_146(20) <= d_V_2_fu_218_p1(20);                p_i_reg_146(22) <= d_V_2_fu_218_p1(22);                p_i_reg_146(24) <= d_V_2_fu_218_p1(24);                p_i_reg_146(26) <= d_V_2_fu_218_p1(26);                p_i_reg_146(28) <= d_V_2_fu_218_p1(28);                p_i_reg_146(30) <= d_V_2_fu_218_p1(30);
            elsif ((not(((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0))) and (exitcond_i_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_i_reg_146(0) <= '0';
                p_i_reg_146(2) <= '0';
                p_i_reg_146(4) <= '0';
                p_i_reg_146(6) <= '0';
                p_i_reg_146(8) <= '0';
                p_i_reg_146(10) <= '0';
                p_i_reg_146(12) <= '0';
                p_i_reg_146(14) <= '0';
                p_i_reg_146(16) <= '0';
                p_i_reg_146(18) <= '0';
                p_i_reg_146(20) <= '0';
                p_i_reg_146(22) <= '0';
                p_i_reg_146(24) <= '0';
                p_i_reg_146(26) <= '0';
                p_i_reg_146(28) <= '0';
                p_i_reg_146(30) <= '1';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_339 <= i_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0))) and (exitcond_i_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_19_reg_344 <= in_sqrt_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (n_pipe3_V_V_full_n = ap_const_logic_0) or (n_pipe2_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_V_reg_331 <= n_pipe2_V_V_dout;
            end if;
        end if;
    end process;
    p_i_reg_146(1) <= '0';
    p_i_reg_146(3 downto 3) <= "0";
    p_i_reg_146(5 downto 5) <= "0";
    p_i_reg_146(7 downto 7) <= "0";
    p_i_reg_146(9 downto 9) <= "0";
    p_i_reg_146(11 downto 11) <= "0";
    p_i_reg_146(13 downto 13) <= "0";
    p_i_reg_146(15 downto 15) <= "0";
    p_i_reg_146(17 downto 17) <= "0";
    p_i_reg_146(19 downto 19) <= "0";
    p_i_reg_146(21 downto 21) <= "0";
    p_i_reg_146(23 downto 23) <= "0";
    p_i_reg_146(25 downto 25) <= "0";
    p_i_reg_146(27 downto 27) <= "0";
    p_i_reg_146(29) <= '0';
    p_082_2_i_reg_178(1) <= '0';
    p_082_2_i_reg_178(3 downto 3) <= "0";
    p_082_2_i_reg_178(5 downto 5) <= "0";
    p_082_2_i_reg_178(7 downto 7) <= "0";
    p_082_2_i_reg_178(9 downto 9) <= "0";
    p_082_2_i_reg_178(11 downto 11) <= "0";
    p_082_2_i_reg_178(13 downto 13) <= "0";
    p_082_2_i_reg_178(15 downto 15) <= "0";
    p_082_2_i_reg_178(17 downto 17) <= "0";
    p_082_2_i_reg_178(19 downto 19) <= "0";
    p_082_2_i_reg_178(21 downto 21) <= "0";
    p_082_2_i_reg_178(23 downto 23) <= "0";
    p_082_2_i_reg_178(25 downto 25) <= "0";
    p_082_2_i_reg_178(27 downto 27) <= "0";
    p_082_2_i_reg_178(29) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, n_pipe2_V_V_empty_n, n_pipe3_V_V_full_n, in_sqrt_V_V_empty_n, in_compute_y_factor_s_0_full_n, ap_CS_fsm_state2, exitcond_i_fu_188_p2, ap_CS_fsm_state39, ap_CS_fsm_state3, tmp_i_21_fu_203_p2, ap_CS_fsm_state4, tmp_1_i_fu_226_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (n_pipe3_V_V_full_n = ap_const_logic_0) or (n_pipe2_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0))) and (exitcond_i_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0))) and (exitcond_i_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_i_21_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_1_i_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((in_compute_y_factor_s_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, n_pipe2_V_V_empty_n, n_pipe3_V_V_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (n_pipe3_V_V_full_n = ap_const_logic_0) or (n_pipe2_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(in_sqrt_V_V_empty_n, exitcond_i_fu_188_p2)
    begin
                ap_block_state2 <= ((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, in_sqrt_V_V_empty_n, ap_CS_fsm_state2, exitcond_i_fu_188_p2)
    begin
        if ((not(((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0))) and (exitcond_i_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(in_sqrt_V_V_empty_n, ap_CS_fsm_state2, exitcond_i_fu_188_p2)
    begin
        if ((not(((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0))) and (exitcond_i_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_V_1_fu_296_p3 <= 
        c_V_4_fu_266_p1 when (tmp_3_i_fu_250_p2(0) = '1') else 
        c_V_fu_282_p2;
    c_V_2_fu_256_p4 <= p_2_i_reg_167(31 downto 1);
    c_V_4_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_V_2_fu_256_p4),32));
    c_V_fu_282_p2 <= std_logic_vector(unsigned(c_V_4_fu_266_p1) + unsigned(p_082_2_cast_i_fu_222_p1));
    d_V_1_fu_304_p4 <= p_082_2_i_reg_178(30 downto 2);
    d_V_2_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_V_fu_208_p4),31));
    d_V_3_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_V_1_fu_304_p4),31));
    d_V_fu_208_p4 <= p_i_reg_146(30 downto 2);
    exitcond_i_fu_188_p2 <= "1" when (i_i_reg_135 = tmp_V_reg_331) else "0";

    grp_fu_324_ap_start_assign_proc : process(ap_CS_fsm_state4, tmp_1_i_fu_226_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_i_fu_226_p2 = ap_const_lv1_1))) then 
            grp_fu_324_ap_start <= ap_const_logic_1;
        else 
            grp_fu_324_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_324_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_324_ce <= ap_const_logic_0;
        else 
            grp_fu_324_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_324_p1 <= std_logic_vector(shift_left(unsigned(p_2_i_reg_167),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    i_fu_193_p2 <= std_logic_vector(unsigned(i_i_reg_135) + unsigned(ap_const_lv32_1));

    in_compute_y_factor_s_0_blk_n_assign_proc : process(in_compute_y_factor_s_0_full_n, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            in_compute_y_factor_s_0_blk_n <= in_compute_y_factor_s_0_full_n;
        else 
            in_compute_y_factor_s_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_compute_y_factor_s_0_din <= grp_fu_324_p2;

    in_compute_y_factor_s_0_write_assign_proc : process(in_compute_y_factor_s_0_full_n, ap_CS_fsm_state39)
    begin
        if (((in_compute_y_factor_s_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            in_compute_y_factor_s_0_write <= ap_const_logic_1;
        else 
            in_compute_y_factor_s_0_write <= ap_const_logic_0;
        end if; 
    end process;


    in_sqrt_V_V_blk_n_assign_proc : process(in_sqrt_V_V_empty_n, ap_CS_fsm_state2, exitcond_i_fu_188_p2)
    begin
        if (((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_sqrt_V_V_blk_n <= in_sqrt_V_V_empty_n;
        else 
            in_sqrt_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_sqrt_V_V_read_assign_proc : process(in_sqrt_V_V_empty_n, ap_CS_fsm_state2, exitcond_i_fu_188_p2)
    begin
        if ((not(((exitcond_i_fu_188_p2 = ap_const_lv1_0) and (in_sqrt_V_V_empty_n = ap_const_logic_0))) and (exitcond_i_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_sqrt_V_V_read <= ap_const_logic_1;
        else 
            in_sqrt_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_i_reg_167),33));

    n_pipe2_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_pipe2_V_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_pipe2_V_V_blk_n <= n_pipe2_V_V_empty_n;
        else 
            n_pipe2_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    n_pipe2_V_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_pipe2_V_V_empty_n, n_pipe3_V_V_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (n_pipe3_V_V_full_n = ap_const_logic_0) or (n_pipe2_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_pipe2_V_V_read <= ap_const_logic_1;
        else 
            n_pipe2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    n_pipe3_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_pipe3_V_V_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_pipe3_V_V_blk_n <= n_pipe3_V_V_full_n;
        else 
            n_pipe3_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    n_pipe3_V_V_din <= n_pipe2_V_V_dout;

    n_pipe3_V_V_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_pipe2_V_V_empty_n, n_pipe3_V_V_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (n_pipe3_V_V_full_n = ap_const_logic_0) or (n_pipe2_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_pipe3_V_V_write <= ap_const_logic_1;
        else 
            n_pipe3_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_082_2_cast_i_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_082_2_i_reg_178),32));
    p_cast_i_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_i_reg_146),32));
    p_neg_i_fu_270_p2 <= std_logic_vector(unsigned(p_1_i_reg_158) - unsigned(p_2_i_reg_167));
    ret_V_fu_240_p2 <= std_logic_vector(unsigned(lhs_V_fu_232_p1) + unsigned(rhs_V_fu_236_p1));
    rhs_V_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_082_2_i_reg_178),33));
    tmp_1_i_fu_226_p2 <= "1" when (p_082_2_i_reg_178 = ap_const_lv31_0) else "0";
    tmp_2_i_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_i_reg_158),33));
    tmp_3_i_fu_250_p2 <= "1" when (unsigned(tmp_2_i_fu_246_p1) < unsigned(ret_V_fu_240_p2)) else "0";
    tmp_i_21_fu_203_p2 <= "1" when (unsigned(p_cast_i_fu_199_p1) > unsigned(tmp_V_19_reg_344)) else "0";
    x_V_1_fu_276_p2 <= std_logic_vector(unsigned(p_neg_i_fu_270_p2) - unsigned(p_082_2_cast_i_fu_222_p1));
    x_V_2_fu_288_p3 <= 
        p_1_i_reg_158 when (tmp_3_i_fu_250_p2(0) = '1') else 
        x_V_1_fu_276_p2;
end behav;
