// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module layernorm_sqrt_alg_b (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        n_pipe2_V_V_dout,
        n_pipe2_V_V_empty_n,
        n_pipe2_V_V_read,
        n_pipe3_V_V_din,
        n_pipe3_V_V_full_n,
        n_pipe3_V_V_write,
        in_sqrt_V_V_dout,
        in_sqrt_V_V_empty_n,
        in_sqrt_V_V_read,
        in_compute_y_factor_s_0_din,
        in_compute_y_factor_s_0_full_n,
        in_compute_y_factor_s_0_write
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_state33 = 39'd4294967296;
parameter    ap_ST_fsm_state34 = 39'd8589934592;
parameter    ap_ST_fsm_state35 = 39'd17179869184;
parameter    ap_ST_fsm_state36 = 39'd34359738368;
parameter    ap_ST_fsm_state37 = 39'd68719476736;
parameter    ap_ST_fsm_state38 = 39'd137438953472;
parameter    ap_ST_fsm_state39 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] n_pipe2_V_V_dout;
input   n_pipe2_V_V_empty_n;
output   n_pipe2_V_V_read;
output  [31:0] n_pipe3_V_V_din;
input   n_pipe3_V_V_full_n;
output   n_pipe3_V_V_write;
input  [31:0] in_sqrt_V_V_dout;
input   in_sqrt_V_V_empty_n;
output   in_sqrt_V_V_read;
output  [31:0] in_compute_y_factor_s_0_din;
input   in_compute_y_factor_s_0_full_n;
output   in_compute_y_factor_s_0_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg n_pipe2_V_V_read;
reg n_pipe3_V_V_write;
reg in_sqrt_V_V_read;
reg in_compute_y_factor_s_0_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    n_pipe2_V_V_blk_n;
reg    n_pipe3_V_V_blk_n;
reg    in_sqrt_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_fu_188_p2;
reg    in_compute_y_factor_s_0_blk_n;
wire    ap_CS_fsm_state39;
reg   [31:0] tmp_V_reg_331;
reg    ap_block_state1;
wire   [31:0] i_fu_193_p2;
reg   [31:0] i_reg_339;
reg    ap_block_state2;
reg   [31:0] tmp_V_19_reg_344;
wire   [30:0] d_V_2_fu_218_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_i_21_fu_203_p2;
wire   [31:0] x_V_2_fu_288_p3;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_1_i_fu_226_p2;
wire   [31:0] c_V_1_fu_296_p3;
wire   [30:0] d_V_3_fu_314_p1;
reg   [31:0] i_i_reg_135;
reg   [30:0] p_i_reg_146;
reg   [31:0] p_1_i_reg_158;
reg   [31:0] p_2_i_reg_167;
reg   [30:0] p_082_2_i_reg_178;
wire   [31:0] grp_fu_324_p2;
wire   [31:0] p_cast_i_fu_199_p1;
wire   [28:0] d_V_fu_208_p4;
wire   [32:0] lhs_V_fu_232_p1;
wire   [32:0] rhs_V_fu_236_p1;
wire   [32:0] tmp_2_i_fu_246_p1;
wire   [32:0] ret_V_fu_240_p2;
wire   [30:0] c_V_2_fu_256_p4;
wire   [31:0] p_neg_i_fu_270_p2;
wire   [31:0] p_082_2_cast_i_fu_222_p1;
wire   [31:0] c_V_4_fu_266_p1;
wire   [0:0] tmp_3_i_fu_250_p2;
wire   [31:0] x_V_1_fu_276_p2;
wire   [31:0] c_V_fu_282_p2;
wire   [28:0] d_V_1_fu_304_p4;
wire   [31:0] grp_fu_324_p1;
reg    grp_fu_324_ap_start;
wire    grp_fu_324_ap_done;
reg    grp_fu_324_ce;
reg   [38:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 39'd1;
end

kernel_29_udiv_32s_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_29_udiv_32s_32ns_32_36_seq_1_U157(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_324_ap_start),
    .done(grp_fu_324_ap_done),
    .din0(32'd2147483648),
    .din1(grp_fu_324_p1),
    .ce(grp_fu_324_ce),
    .dout(grp_fu_324_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0)) & (exitcond_i_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((in_compute_y_factor_s_0_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        i_i_reg_135 <= i_reg_339;
    end else if ((~((ap_done_reg == 1'b1) | (n_pipe3_V_V_full_n == 1'b0) | (n_pipe2_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_135 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_21_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                p_082_2_i_reg_178[0] <= p_i_reg_146[0];
        p_082_2_i_reg_178[2] <= p_i_reg_146[2];
        p_082_2_i_reg_178[4] <= p_i_reg_146[4];
        p_082_2_i_reg_178[6] <= p_i_reg_146[6];
        p_082_2_i_reg_178[8] <= p_i_reg_146[8];
        p_082_2_i_reg_178[10] <= p_i_reg_146[10];
        p_082_2_i_reg_178[12] <= p_i_reg_146[12];
        p_082_2_i_reg_178[14] <= p_i_reg_146[14];
        p_082_2_i_reg_178[16] <= p_i_reg_146[16];
        p_082_2_i_reg_178[18] <= p_i_reg_146[18];
        p_082_2_i_reg_178[20] <= p_i_reg_146[20];
        p_082_2_i_reg_178[22] <= p_i_reg_146[22];
        p_082_2_i_reg_178[24] <= p_i_reg_146[24];
        p_082_2_i_reg_178[26] <= p_i_reg_146[26];
        p_082_2_i_reg_178[28] <= p_i_reg_146[28];
        p_082_2_i_reg_178[30] <= p_i_reg_146[30];
    end else if (((tmp_1_i_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                p_082_2_i_reg_178[0] <= d_V_3_fu_314_p1[0];
        p_082_2_i_reg_178[2] <= d_V_3_fu_314_p1[2];
        p_082_2_i_reg_178[4] <= d_V_3_fu_314_p1[4];
        p_082_2_i_reg_178[6] <= d_V_3_fu_314_p1[6];
        p_082_2_i_reg_178[8] <= d_V_3_fu_314_p1[8];
        p_082_2_i_reg_178[10] <= d_V_3_fu_314_p1[10];
        p_082_2_i_reg_178[12] <= d_V_3_fu_314_p1[12];
        p_082_2_i_reg_178[14] <= d_V_3_fu_314_p1[14];
        p_082_2_i_reg_178[16] <= d_V_3_fu_314_p1[16];
        p_082_2_i_reg_178[18] <= d_V_3_fu_314_p1[18];
        p_082_2_i_reg_178[20] <= d_V_3_fu_314_p1[20];
        p_082_2_i_reg_178[22] <= d_V_3_fu_314_p1[22];
        p_082_2_i_reg_178[24] <= d_V_3_fu_314_p1[24];
        p_082_2_i_reg_178[26] <= d_V_3_fu_314_p1[26];
        p_082_2_i_reg_178[28] <= d_V_3_fu_314_p1[28];
        p_082_2_i_reg_178[30] <= d_V_3_fu_314_p1[30];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_21_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_1_i_reg_158 <= tmp_V_19_reg_344;
    end else if (((tmp_1_i_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_1_i_reg_158 <= x_V_2_fu_288_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_21_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_2_i_reg_167 <= 32'd0;
    end else if (((tmp_1_i_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_2_i_reg_167 <= c_V_1_fu_296_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_i_21_fu_203_p2 == 1'd1))) begin
                p_i_reg_146[0] <= d_V_2_fu_218_p1[0];
        p_i_reg_146[2] <= d_V_2_fu_218_p1[2];
        p_i_reg_146[4] <= d_V_2_fu_218_p1[4];
        p_i_reg_146[6] <= d_V_2_fu_218_p1[6];
        p_i_reg_146[8] <= d_V_2_fu_218_p1[8];
        p_i_reg_146[10] <= d_V_2_fu_218_p1[10];
        p_i_reg_146[12] <= d_V_2_fu_218_p1[12];
        p_i_reg_146[14] <= d_V_2_fu_218_p1[14];
        p_i_reg_146[16] <= d_V_2_fu_218_p1[16];
        p_i_reg_146[18] <= d_V_2_fu_218_p1[18];
        p_i_reg_146[20] <= d_V_2_fu_218_p1[20];
        p_i_reg_146[22] <= d_V_2_fu_218_p1[22];
        p_i_reg_146[24] <= d_V_2_fu_218_p1[24];
        p_i_reg_146[26] <= d_V_2_fu_218_p1[26];
        p_i_reg_146[28] <= d_V_2_fu_218_p1[28];
        p_i_reg_146[30] <= d_V_2_fu_218_p1[30];
    end else if ((~((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0)) & (exitcond_i_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                p_i_reg_146[0] <= 1'b0;
        p_i_reg_146[2] <= 1'b0;
        p_i_reg_146[4] <= 1'b0;
        p_i_reg_146[6] <= 1'b0;
        p_i_reg_146[8] <= 1'b0;
        p_i_reg_146[10] <= 1'b0;
        p_i_reg_146[12] <= 1'b0;
        p_i_reg_146[14] <= 1'b0;
        p_i_reg_146[16] <= 1'b0;
        p_i_reg_146[18] <= 1'b0;
        p_i_reg_146[20] <= 1'b0;
        p_i_reg_146[22] <= 1'b0;
        p_i_reg_146[24] <= 1'b0;
        p_i_reg_146[26] <= 1'b0;
        p_i_reg_146[28] <= 1'b0;
        p_i_reg_146[30] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_339 <= i_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0)) & (exitcond_i_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_19_reg_344 <= in_sqrt_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (n_pipe3_V_V_full_n == 1'b0) | (n_pipe2_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_reg_331 <= n_pipe2_V_V_dout;
    end
end

always @ (*) begin
    if ((~((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0)) & (exitcond_i_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0)) & (exitcond_i_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_i_fu_226_p2 == 1'd1))) begin
        grp_fu_324_ap_start = 1'b1;
    end else begin
        grp_fu_324_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_324_ce = 1'b0;
    end else begin
        grp_fu_324_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        in_compute_y_factor_s_0_blk_n = in_compute_y_factor_s_0_full_n;
    end else begin
        in_compute_y_factor_s_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_compute_y_factor_s_0_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        in_compute_y_factor_s_0_write = 1'b1;
    end else begin
        in_compute_y_factor_s_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_sqrt_V_V_blk_n = in_sqrt_V_V_empty_n;
    end else begin
        in_sqrt_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0)) & (exitcond_i_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_sqrt_V_V_read = 1'b1;
    end else begin
        in_sqrt_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_pipe2_V_V_blk_n = n_pipe2_V_V_empty_n;
    end else begin
        n_pipe2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (n_pipe3_V_V_full_n == 1'b0) | (n_pipe2_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_pipe2_V_V_read = 1'b1;
    end else begin
        n_pipe2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_pipe3_V_V_blk_n = n_pipe3_V_V_full_n;
    end else begin
        n_pipe3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (n_pipe3_V_V_full_n == 1'b0) | (n_pipe2_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_pipe3_V_V_write = 1'b1;
    end else begin
        n_pipe3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (n_pipe3_V_V_full_n == 1'b0) | (n_pipe2_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0)) & (exitcond_i_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0)) & (exitcond_i_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_i_21_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_1_i_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((in_compute_y_factor_s_0_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (n_pipe3_V_V_full_n == 1'b0) | (n_pipe2_V_V_empty_n == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((exitcond_i_fu_188_p2 == 1'd0) & (in_sqrt_V_V_empty_n == 1'b0));
end

assign c_V_1_fu_296_p3 = ((tmp_3_i_fu_250_p2[0:0] === 1'b1) ? c_V_4_fu_266_p1 : c_V_fu_282_p2);

assign c_V_2_fu_256_p4 = {{p_2_i_reg_167[31:1]}};

assign c_V_4_fu_266_p1 = c_V_2_fu_256_p4;

assign c_V_fu_282_p2 = (c_V_4_fu_266_p1 + p_082_2_cast_i_fu_222_p1);

assign d_V_1_fu_304_p4 = {{p_082_2_i_reg_178[30:2]}};

assign d_V_2_fu_218_p1 = d_V_fu_208_p4;

assign d_V_3_fu_314_p1 = d_V_1_fu_304_p4;

assign d_V_fu_208_p4 = {{p_i_reg_146[30:2]}};

assign exitcond_i_fu_188_p2 = ((i_i_reg_135 == tmp_V_reg_331) ? 1'b1 : 1'b0);

assign grp_fu_324_p1 = p_2_i_reg_167 << 32'd6;

assign i_fu_193_p2 = (i_i_reg_135 + 32'd1);

assign in_compute_y_factor_s_0_din = grp_fu_324_p2;

assign lhs_V_fu_232_p1 = p_2_i_reg_167;

assign n_pipe3_V_V_din = n_pipe2_V_V_dout;

assign p_082_2_cast_i_fu_222_p1 = p_082_2_i_reg_178;

assign p_cast_i_fu_199_p1 = p_i_reg_146;

assign p_neg_i_fu_270_p2 = (p_1_i_reg_158 - p_2_i_reg_167);

assign ret_V_fu_240_p2 = (lhs_V_fu_232_p1 + rhs_V_fu_236_p1);

assign rhs_V_fu_236_p1 = p_082_2_i_reg_178;

assign tmp_1_i_fu_226_p2 = ((p_082_2_i_reg_178 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_2_i_fu_246_p1 = p_1_i_reg_158;

assign tmp_3_i_fu_250_p2 = ((tmp_2_i_fu_246_p1 < ret_V_fu_240_p2) ? 1'b1 : 1'b0);

assign tmp_i_21_fu_203_p2 = ((p_cast_i_fu_199_p1 > tmp_V_19_reg_344) ? 1'b1 : 1'b0);

assign x_V_1_fu_276_p2 = (p_neg_i_fu_270_p2 - p_082_2_cast_i_fu_222_p1);

assign x_V_2_fu_288_p3 = ((tmp_3_i_fu_250_p2[0:0] === 1'b1) ? p_1_i_reg_158 : x_V_1_fu_276_p2);

always @ (posedge ap_clk) begin
    p_i_reg_146[1] <= 1'b0;
    p_i_reg_146[3:3] <= 1'b0;
    p_i_reg_146[5:5] <= 1'b0;
    p_i_reg_146[7:7] <= 1'b0;
    p_i_reg_146[9:9] <= 1'b0;
    p_i_reg_146[11:11] <= 1'b0;
    p_i_reg_146[13:13] <= 1'b0;
    p_i_reg_146[15:15] <= 1'b0;
    p_i_reg_146[17:17] <= 1'b0;
    p_i_reg_146[19:19] <= 1'b0;
    p_i_reg_146[21:21] <= 1'b0;
    p_i_reg_146[23:23] <= 1'b0;
    p_i_reg_146[25:25] <= 1'b0;
    p_i_reg_146[27:27] <= 1'b0;
    p_i_reg_146[29] <= 1'b0;
    p_082_2_i_reg_178[1] <= 1'b0;
    p_082_2_i_reg_178[3:3] <= 1'b0;
    p_082_2_i_reg_178[5:5] <= 1'b0;
    p_082_2_i_reg_178[7:7] <= 1'b0;
    p_082_2_i_reg_178[9:9] <= 1'b0;
    p_082_2_i_reg_178[11:11] <= 1'b0;
    p_082_2_i_reg_178[13:13] <= 1'b0;
    p_082_2_i_reg_178[15:15] <= 1'b0;
    p_082_2_i_reg_178[17:17] <= 1'b0;
    p_082_2_i_reg_178[19:19] <= 1'b0;
    p_082_2_i_reg_178[21:21] <= 1'b0;
    p_082_2_i_reg_178[23:23] <= 1'b0;
    p_082_2_i_reg_178[25:25] <= 1'b0;
    p_082_2_i_reg_178[27:27] <= 1'b0;
    p_082_2_i_reg_178[29] <= 1'b0;
end

endmodule //layernorm_sqrt_alg_b
