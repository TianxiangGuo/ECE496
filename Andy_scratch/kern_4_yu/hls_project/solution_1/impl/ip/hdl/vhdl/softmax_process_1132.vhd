-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_process_1132 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_iter_r_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_iter_r_V_V_empty_n : IN STD_LOGIC;
    in_iter_r_V_V_read : OUT STD_LOGIC;
    in_iter_c_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_iter_c_V_V_empty_n : IN STD_LOGIC;
    in_iter_c_V_V_read : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_iter_r_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_iter_r_V_V_full_n : IN STD_LOGIC;
    out_iter_r_V_V_write : OUT STD_LOGIC;
    out_iter_c_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_iter_c_V_V_full_n : IN STD_LOGIC;
    out_iter_c_V_V_write : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of softmax_process_1132 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_FFFFC694 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111100011010010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv65_10B7E6EC3 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100001011011111100110111011000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_1EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101010";
    constant ap_const_lv33_778 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000011101111000";
    constant ap_const_lv64_1544FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000101010100010011111111";
    constant ap_const_lv24_1E : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000011110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_iter_r_V_V_blk_n : STD_LOGIC;
    signal in_iter_c_V_V_blk_n : STD_LOGIC;
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1778_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_iter_r_V_V_blk_n : STD_LOGIC;
    signal out_iter_c_V_V_blk_n : STD_LOGIC;
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln1778_reg_593_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_201 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_45_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_V_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_218_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1778_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1778_reg_593_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1778_reg_593_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1778_reg_593_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1778_reg_593_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1778_reg_593_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1778_reg_593_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1778_fu_229_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln647_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln647_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln887_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_245_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln887_1_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1792_fu_261_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1792_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1792_reg_622_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1371_fu_271_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1371_reg_627 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_5_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1792_1_fu_285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1792_1_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1792_1_reg_639_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1371_1_fu_295_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1371_1_reg_644 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_9_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1371_1_fu_354_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1371_1_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln68_fu_361_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln68_reg_661 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln68_reg_661_pp0_iter4_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln68_reg_661_pp0_iter5_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln68_reg_661_pp0_iter6_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln1371_3_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1371_3_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln68_2_fu_417_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln68_2_reg_671 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln68_2_reg_671_pp0_iter4_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln68_2_reg_671_pp0_iter5_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln68_2_reg_671_pp0_iter6_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln68_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_reg_676_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_1_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_1_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_1_reg_682_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1353_fu_444_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1353_reg_688 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1353_2_fu_453_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1353_2_reg_693 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1352_fu_465_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1352_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1352_1_fu_477_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1352_1_reg_703 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1803_fu_515_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln1803_reg_708 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln1803_1_fu_555_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln1803_1_reg_713 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_218_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1371_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1371_1_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1371_fu_309_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_6_fu_314_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_328_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1371_1_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1371_2_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1371_fu_341_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1371_1_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1371_2_fu_365_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_12_fu_370_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_384_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1371_4_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1371_5_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1371_2_fu_397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1371_3_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_fu_421_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln68_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_1_fu_431_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln68_1_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_fu_441_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_2_fu_450_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1352_fu_465_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1352_fu_465_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1352_1_fu_477_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1352_1_fu_477_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln461_fu_488_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1353_1_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln790_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln790_fu_497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln887_fu_503_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln461_1_fu_528_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1353_3_fu_523_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln790_1_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln790_1_fu_537_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln887_1_fu_543_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1803_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_566_p3 : STD_LOGIC_VECTOR (126 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_218_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_218_p10 : STD_LOGIC_VECTOR (63 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1778_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_201 <= add_ln1778_fu_229_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_201 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1778_reg_593_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln1353_2_reg_693 <= add_ln1353_2_fu_453_p2;
                add_ln1353_reg_688 <= add_ln1353_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1778_reg_593_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln68_1_reg_682 <= add_ln68_1_fu_436_p2;
                add_ln68_reg_676 <= add_ln68_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln68_1_reg_682_pp0_iter5_reg <= add_ln68_1_reg_682;
                add_ln68_reg_676_pp0_iter5_reg <= add_ln68_reg_676;
                icmp_ln1778_reg_593_pp0_iter2_reg <= icmp_ln1778_reg_593_pp0_iter1_reg;
                icmp_ln1778_reg_593_pp0_iter3_reg <= icmp_ln1778_reg_593_pp0_iter2_reg;
                icmp_ln1778_reg_593_pp0_iter4_reg <= icmp_ln1778_reg_593_pp0_iter3_reg;
                icmp_ln1778_reg_593_pp0_iter5_reg <= icmp_ln1778_reg_593_pp0_iter4_reg;
                icmp_ln1778_reg_593_pp0_iter6_reg <= icmp_ln1778_reg_593_pp0_iter5_reg;
                icmp_ln1778_reg_593_pp0_iter7_reg <= icmp_ln1778_reg_593_pp0_iter6_reg;
                select_ln1792_1_reg_639_pp0_iter3_reg <= select_ln1792_1_reg_639;
                select_ln1792_reg_622_pp0_iter3_reg <= select_ln1792_reg_622;
                trunc_ln68_2_reg_671_pp0_iter4_reg <= trunc_ln68_2_reg_671;
                trunc_ln68_2_reg_671_pp0_iter5_reg <= trunc_ln68_2_reg_671_pp0_iter4_reg;
                trunc_ln68_2_reg_671_pp0_iter6_reg <= trunc_ln68_2_reg_671_pp0_iter5_reg;
                trunc_ln68_reg_661_pp0_iter4_reg <= trunc_ln68_reg_661;
                trunc_ln68_reg_661_pp0_iter5_reg <= trunc_ln68_reg_661_pp0_iter4_reg;
                trunc_ln68_reg_661_pp0_iter6_reg <= trunc_ln68_reg_661_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_588 <= bound_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1778_reg_593 <= icmp_ln1778_fu_224_p2;
                icmp_ln1778_reg_593_pp0_iter1_reg <= icmp_ln1778_reg_593;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1778_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln887_1_reg_617 <= icmp_ln887_1_fu_255_p2;
                icmp_ln887_reg_607 <= icmp_ln887_fu_239_p2;
                p_Result_1_reg_612 <= in_V_V_dout(63 downto 32);
                trunc_ln647_reg_602 <= trunc_ln647_fu_235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1778_reg_593_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln1352_1_reg_703 <= mul_ln1352_1_fu_477_p2;
                mul_ln1352_reg_698 <= mul_ln1352_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1778_reg_593_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln1371_1_reg_644 <= mul_ln1371_1_fu_295_p2;
                mul_ln1371_reg_627 <= mul_ln1371_fu_271_p2;
                select_ln1792_1_reg_639 <= select_ln1792_1_fu_285_p3;
                select_ln1792_reg_622 <= select_ln1792_fu_261_p3;
                tmp_5_reg_633 <= select_ln1792_fu_261_p3(31 downto 31);
                tmp_9_reg_650 <= select_ln1792_1_fu_285_p3(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1778_reg_593_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln1371_1_reg_656 <= select_ln1371_1_fu_354_p3;
                select_ln1371_3_reg_666 <= select_ln1371_3_fu_410_p3;
                trunc_ln68_2_reg_671 <= trunc_ln68_2_fu_417_p1;
                trunc_ln68_reg_661 <= trunc_ln68_fu_361_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1778_reg_593_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln1803_1_reg_713 <= select_ln1803_1_fu_555_p3;
                select_ln1803_reg_708 <= select_ln1803_fu_515_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_V_45_reg_578 <= in_iter_c_V_V_dout;
                tmp_V_reg_583 <= in_iter_r_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln1778_fu_224_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1778_fu_224_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1778_fu_224_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1353_1_fu_483_p2 <= std_logic_vector(unsigned(ap_const_lv64_1544FF) + unsigned(mul_ln1352_reg_698));
    add_ln1353_2_fu_453_p2 <= std_logic_vector(unsigned(ap_const_lv33_778) + unsigned(sext_ln215_2_fu_450_p1));
    add_ln1353_3_fu_523_p2 <= std_logic_vector(unsigned(ap_const_lv64_1544FF) + unsigned(mul_ln1352_1_reg_703));
    add_ln1353_fu_444_p2 <= std_logic_vector(unsigned(ap_const_lv33_778) + unsigned(sext_ln215_fu_441_p1));
    add_ln1778_fu_229_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_201) + unsigned(ap_const_lv64_1));
    add_ln68_1_fu_436_p2 <= std_logic_vector(unsigned(mul_ln68_1_fu_431_p2) + unsigned(select_ln1792_1_reg_639_pp0_iter3_reg));
    add_ln68_fu_426_p2 <= std_logic_vector(unsigned(mul_ln68_fu_421_p2) + unsigned(select_ln1792_reg_622_pp0_iter3_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln1778_reg_593, ap_enable_reg_pp0_iter8, icmp_ln1778_reg_593_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1778_reg_593_pp0_iter7_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln1778_reg_593 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln1778_reg_593, ap_enable_reg_pp0_iter8, icmp_ln1778_reg_593_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1778_reg_593_pp0_iter7_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln1778_reg_593 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln1778_reg_593, ap_enable_reg_pp0_iter8, icmp_ln1778_reg_593_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1778_reg_593_pp0_iter7_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln1778_reg_593 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
                ap_block_state1 <= ((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter8_assign_proc : process(out_V_V_full_n, icmp_ln1778_reg_593_pp0_iter7_reg)
    begin
                ap_block_state11_pp0_stage0_iter8 <= ((icmp_ln1778_reg_593_pp0_iter7_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, icmp_ln1778_reg_593)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln1778_reg_593 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln1778_fu_224_p2)
    begin
        if ((icmp_ln1778_fu_224_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_218_p0 <= bound_fu_218_p00(32 - 1 downto 0);
    bound_fu_218_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_45_reg_578),64));
    bound_fu_218_p1 <= bound_fu_218_p10(32 - 1 downto 0);
    bound_fu_218_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_583),64));
    bound_fu_218_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_218_p0) * unsigned(bound_fu_218_p1), 64));
    icmp_ln1778_fu_224_p2 <= "1" when (indvar_flatten_reg_201 = bound_reg_588) else "0";
    icmp_ln887_1_fu_255_p2 <= "1" when (signed(p_Result_1_fu_245_p4) < signed(ap_const_lv32_FFFFC694)) else "0";
    icmp_ln887_fu_239_p2 <= "1" when (signed(trunc_ln647_fu_235_p1) < signed(ap_const_lv32_FFFFC694)) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1778_reg_593)
    begin
        if (((icmp_ln1778_reg_593 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1778_reg_593, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1778_reg_593 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_iter_c_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_c_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_iter_c_V_V_blk_n <= in_iter_c_V_V_empty_n;
        else 
            in_iter_c_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_iter_c_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
        if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_iter_c_V_V_read <= ap_const_logic_1;
        else 
            in_iter_c_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_iter_r_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_iter_r_V_V_blk_n <= in_iter_r_V_V_empty_n;
        else 
            in_iter_r_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_iter_r_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
        if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_iter_r_V_V_read <= ap_const_logic_1;
        else 
            in_iter_r_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1352_1_fu_477_p0 <= add_ln68_1_reg_682_pp0_iter5_reg;
    mul_ln1352_1_fu_477_p1 <= add_ln1353_2_reg_693;
    mul_ln1352_1_fu_477_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1352_1_fu_477_p0) * signed(mul_ln1352_1_fu_477_p1))), 64));
    mul_ln1352_fu_465_p0 <= add_ln68_reg_676_pp0_iter5_reg;
    mul_ln1352_fu_465_p1 <= add_ln1353_reg_688;
    mul_ln1352_fu_465_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1352_fu_465_p0) * signed(mul_ln1352_fu_465_p1))), 64));
    mul_ln1371_1_fu_295_p1 <= select_ln1792_1_fu_285_p3;
    mul_ln1371_1_fu_295_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_10B7E6EC3) * signed(mul_ln1371_1_fu_295_p1))), 65));
    mul_ln1371_fu_271_p1 <= select_ln1792_fu_261_p3;
    mul_ln1371_fu_271_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_10B7E6EC3) * signed(mul_ln1371_fu_271_p1))), 65));
    mul_ln68_1_fu_431_p1 <= select_ln1371_3_reg_666(26 - 1 downto 0);
    mul_ln68_1_fu_431_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_1EA) * signed(mul_ln68_1_fu_431_p1))), 32));
    mul_ln68_fu_421_p1 <= select_ln1371_1_reg_656(26 - 1 downto 0);
    mul_ln68_fu_421_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_1EA) * signed(mul_ln68_fu_421_p1))), 32));

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln1778_reg_593_pp0_iter7_reg)
    begin
        if (((icmp_ln1778_reg_593_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_566_p3),128));

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln1778_reg_593_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1778_reg_593_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_iter_c_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_iter_c_V_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_iter_c_V_V_blk_n <= out_iter_c_V_V_full_n;
        else 
            out_iter_c_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_iter_c_V_V_din <= in_iter_c_V_V_dout;

    out_iter_c_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
        if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_iter_c_V_V_write <= ap_const_logic_1;
        else 
            out_iter_c_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_iter_r_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_iter_r_V_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_iter_r_V_V_blk_n <= out_iter_r_V_V_full_n;
        else 
            out_iter_r_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_iter_r_V_V_din <= in_iter_r_V_V_dout;

    out_iter_r_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
        if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_iter_r_V_V_write <= ap_const_logic_1;
        else 
            out_iter_r_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_245_p4 <= in_V_V_dout(63 downto 32);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln1371_1_fu_354_p3 <= 
        sext_ln1371_1_fu_324_p1 when (tmp_5_reg_633(0) = '1') else 
        sub_ln1371_1_fu_348_p2;
    select_ln1371_2_fu_397_p3 <= 
        sext_ln1371_4_fu_380_p1 when (tmp_9_reg_650(0) = '1') else 
        sext_ln1371_5_fu_393_p1;
    select_ln1371_3_fu_410_p3 <= 
        sext_ln1371_4_fu_380_p1 when (tmp_9_reg_650(0) = '1') else 
        sub_ln1371_3_fu_404_p2;
    select_ln1371_fu_341_p3 <= 
        sext_ln1371_1_fu_324_p1 when (tmp_5_reg_633(0) = '1') else 
        sext_ln1371_2_fu_337_p1;
    select_ln1792_1_fu_285_p3 <= 
        ap_const_lv32_FFFFC694 when (icmp_ln887_1_reg_617(0) = '1') else 
        p_Result_1_reg_612;
    select_ln1792_fu_261_p3 <= 
        ap_const_lv32_FFFFC694 when (icmp_ln887_reg_607(0) = '1') else 
        trunc_ln647_reg_602;
    select_ln1803_1_fu_555_p3 <= 
        ap_const_lv63_0 when (tmp_14_fu_547_p3(0) = '1') else 
        trunc_ln887_1_fu_543_p1;
    select_ln1803_fu_515_p3 <= 
        ap_const_lv63_0 when (tmp_8_fu_507_p3(0) = '1') else 
        trunc_ln887_fu_503_p1;
        sext_ln1371_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_314_p4),32));

        sext_ln1371_2_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_328_p4),32));

        sext_ln1371_4_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_370_p4),32));

        sext_ln1371_5_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_384_p4),32));

        sext_ln215_2_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln68_1_reg_682),33));

        sext_ln215_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln68_reg_676),33));

    shl_ln790_1_fu_537_p2 <= std_logic_vector(shift_left(unsigned(add_ln1353_3_fu_523_p2),to_integer(unsigned('0' & zext_ln790_1_fu_533_p1(31-1 downto 0)))));
    shl_ln790_fu_497_p2 <= std_logic_vector(shift_left(unsigned(add_ln1353_1_fu_483_p2),to_integer(unsigned('0' & zext_ln790_fu_493_p1(31-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1371_1_fu_348_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln1371_fu_341_p3));
    sub_ln1371_2_fu_365_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1371_1_reg_644));
    sub_ln1371_3_fu_404_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln1371_2_fu_397_p3));
    sub_ln1371_fu_309_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1371_reg_627));
    sub_ln461_1_fu_528_p2 <= std_logic_vector(unsigned(ap_const_lv24_1E) - unsigned(trunc_ln68_2_reg_671_pp0_iter6_reg));
    sub_ln461_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv24_1E) - unsigned(trunc_ln68_reg_661_pp0_iter6_reg));
    tmp_12_fu_370_p4 <= sub_ln1371_2_fu_365_p2(64 downto 41);
    tmp_13_fu_384_p4 <= mul_ln1371_1_reg_644(64 downto 41);
    tmp_14_fu_547_p3 <= shl_ln790_1_fu_537_p2(63 downto 63);
    tmp_1_fu_566_p3 <= (select_ln1803_1_reg_713 & zext_ln1803_fu_563_p1);
    tmp_6_fu_314_p4 <= sub_ln1371_fu_309_p2(64 downto 41);
    tmp_8_fu_507_p3 <= shl_ln790_fu_497_p2(63 downto 63);
    tmp_fu_328_p4 <= mul_ln1371_reg_627(64 downto 41);
    trunc_ln647_fu_235_p1 <= in_V_V_dout(32 - 1 downto 0);
    trunc_ln68_2_fu_417_p1 <= select_ln1371_3_fu_410_p3(24 - 1 downto 0);
    trunc_ln68_fu_361_p1 <= select_ln1371_1_fu_354_p3(24 - 1 downto 0);
    trunc_ln887_1_fu_543_p1 <= shl_ln790_1_fu_537_p2(63 - 1 downto 0);
    trunc_ln887_fu_503_p1 <= shl_ln790_fu_497_p2(63 - 1 downto 0);
    zext_ln1803_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1803_reg_708),64));
    zext_ln790_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln461_1_fu_528_p2),64));
    zext_ln790_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln461_fu_488_p2),64));
end behav;
