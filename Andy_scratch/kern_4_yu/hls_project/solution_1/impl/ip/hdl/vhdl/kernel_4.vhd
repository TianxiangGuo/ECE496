-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_4 is
port (
    in_r_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC );
end;


architecture behav of kernel_4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_4,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.371000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=151,HLS_SYN_DSP=111,HLS_SYN_FF=38316,HLS_SYN_LUT=49248,HLS_VERSION=2019_1}";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal AttentionMatmul_U0_ap_start : STD_LOGIC;
    signal AttentionMatmul_U0_start_out : STD_LOGIC;
    signal AttentionMatmul_U0_start_write : STD_LOGIC;
    signal AttentionMatmul_U0_out_V_data_V_din : STD_LOGIC_VECTOR (511 downto 0);
    signal AttentionMatmul_U0_out_V_data_V_write : STD_LOGIC;
    signal AttentionMatmul_U0_out_V_id_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AttentionMatmul_U0_out_V_id_V_write : STD_LOGIC;
    signal AttentionMatmul_U0_out_V_dest_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AttentionMatmul_U0_out_V_dest_V_write : STD_LOGIC;
    signal AttentionMatmul_U0_out_V_user_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AttentionMatmul_U0_out_V_user_V_write : STD_LOGIC;
    signal AttentionMatmul_U0_out_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal AttentionMatmul_U0_out_V_last_V_write : STD_LOGIC;
    signal ap_rst_n_inv : STD_LOGIC;
    signal AttentionMatmul_U0_in_r_TREADY : STD_LOGIC;
    signal AttentionMatmul_U0_ap_done : STD_LOGIC;
    signal AttentionMatmul_U0_ap_ready : STD_LOGIC;
    signal AttentionMatmul_U0_ap_idle : STD_LOGIC;
    signal AttentionMatmul_U0_ap_continue : STD_LOGIC;
    signal Softmax130_U0_in_V_data_V_read : STD_LOGIC;
    signal Softmax130_U0_in_V_id_V_read : STD_LOGIC;
    signal Softmax130_U0_in_V_dest_V_read : STD_LOGIC;
    signal Softmax130_U0_in_V_user_V_read : STD_LOGIC;
    signal Softmax130_U0_in_V_last_V_read : STD_LOGIC;
    signal Softmax130_U0_out_r_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal Softmax130_U0_out_r_TID : STD_LOGIC_VECTOR (7 downto 0);
    signal Softmax130_U0_out_r_TDEST : STD_LOGIC_VECTOR (7 downto 0);
    signal Softmax130_U0_out_r_TUSER : STD_LOGIC_VECTOR (15 downto 0);
    signal Softmax130_U0_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Softmax130_U0_ap_start : STD_LOGIC;
    signal Softmax130_U0_out_r_TVALID : STD_LOGIC;
    signal Softmax130_U0_ap_done : STD_LOGIC;
    signal Softmax130_U0_ap_ready : STD_LOGIC;
    signal Softmax130_U0_ap_idle : STD_LOGIC;
    signal Softmax130_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal pipe_1_V_data_V_full_n : STD_LOGIC;
    signal pipe_1_V_data_V_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal pipe_1_V_data_V_empty_n : STD_LOGIC;
    signal pipe_1_V_id_V_full_n : STD_LOGIC;
    signal pipe_1_V_id_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal pipe_1_V_id_V_empty_n : STD_LOGIC;
    signal pipe_1_V_dest_V_full_n : STD_LOGIC;
    signal pipe_1_V_dest_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal pipe_1_V_dest_V_empty_n : STD_LOGIC;
    signal pipe_1_V_user_V_full_n : STD_LOGIC;
    signal pipe_1_V_user_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal pipe_1_V_user_V_empty_n : STD_LOGIC;
    signal pipe_1_V_last_V_full_n : STD_LOGIC;
    signal pipe_1_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal pipe_1_V_last_V_empty_n : STD_LOGIC;
    signal start_for_Softmax130_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Softmax130_U0_full_n : STD_LOGIC;
    signal start_for_Softmax130_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Softmax130_U0_empty_n : STD_LOGIC;
    signal Softmax130_U0_start_full_n : STD_LOGIC;
    signal Softmax130_U0_start_write : STD_LOGIC;

    component AttentionMatmul IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        in_r_TID : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TDEST : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TUSER : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        out_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        out_V_data_V_full_n : IN STD_LOGIC;
        out_V_data_V_write : OUT STD_LOGIC;
        out_V_id_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_id_V_full_n : IN STD_LOGIC;
        out_V_id_V_write : OUT STD_LOGIC;
        out_V_dest_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_dest_V_full_n : IN STD_LOGIC;
        out_V_dest_V_write : OUT STD_LOGIC;
        out_V_user_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_user_V_full_n : IN STD_LOGIC;
        out_V_user_V_write : OUT STD_LOGIC;
        out_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_V_last_V_full_n : IN STD_LOGIC;
        out_V_last_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Softmax130 IS
    port (
        in_V_data_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        in_V_data_V_empty_n : IN STD_LOGIC;
        in_V_data_V_read : OUT STD_LOGIC;
        in_V_id_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_V_id_V_empty_n : IN STD_LOGIC;
        in_V_id_V_read : OUT STD_LOGIC;
        in_V_dest_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_V_dest_V_empty_n : IN STD_LOGIC;
        in_V_dest_V_read : OUT STD_LOGIC;
        in_V_user_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_user_V_empty_n : IN STD_LOGIC;
        in_V_user_V_read : OUT STD_LOGIC;
        in_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        in_V_last_V_empty_n : IN STD_LOGIC;
        in_V_last_V_read : OUT STD_LOGIC;
        out_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        out_r_TID : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_TDEST : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_TUSER : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fifo_w512_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A_x0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Softmax130_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    AttentionMatmul_U0 : component AttentionMatmul
    port map (
        ap_start => AttentionMatmul_U0_ap_start,
        start_full_n => start_for_Softmax130_U0_full_n,
        start_out => AttentionMatmul_U0_start_out,
        start_write => AttentionMatmul_U0_start_write,
        in_r_TDATA => in_r_TDATA,
        in_r_TID => in_r_TID,
        in_r_TDEST => in_r_TDEST,
        in_r_TUSER => in_r_TUSER,
        in_r_TLAST => in_r_TLAST,
        out_V_data_V_din => AttentionMatmul_U0_out_V_data_V_din,
        out_V_data_V_full_n => pipe_1_V_data_V_full_n,
        out_V_data_V_write => AttentionMatmul_U0_out_V_data_V_write,
        out_V_id_V_din => AttentionMatmul_U0_out_V_id_V_din,
        out_V_id_V_full_n => pipe_1_V_id_V_full_n,
        out_V_id_V_write => AttentionMatmul_U0_out_V_id_V_write,
        out_V_dest_V_din => AttentionMatmul_U0_out_V_dest_V_din,
        out_V_dest_V_full_n => pipe_1_V_dest_V_full_n,
        out_V_dest_V_write => AttentionMatmul_U0_out_V_dest_V_write,
        out_V_user_V_din => AttentionMatmul_U0_out_V_user_V_din,
        out_V_user_V_full_n => pipe_1_V_user_V_full_n,
        out_V_user_V_write => AttentionMatmul_U0_out_V_user_V_write,
        out_V_last_V_din => AttentionMatmul_U0_out_V_last_V_din,
        out_V_last_V_full_n => pipe_1_V_last_V_full_n,
        out_V_last_V_write => AttentionMatmul_U0_out_V_last_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        in_r_TVALID => in_r_TVALID,
        in_r_TREADY => AttentionMatmul_U0_in_r_TREADY,
        ap_done => AttentionMatmul_U0_ap_done,
        ap_ready => AttentionMatmul_U0_ap_ready,
        ap_idle => AttentionMatmul_U0_ap_idle,
        ap_continue => AttentionMatmul_U0_ap_continue);

    Softmax130_U0 : component Softmax130
    port map (
        in_V_data_V_dout => pipe_1_V_data_V_dout,
        in_V_data_V_empty_n => pipe_1_V_data_V_empty_n,
        in_V_data_V_read => Softmax130_U0_in_V_data_V_read,
        in_V_id_V_dout => pipe_1_V_id_V_dout,
        in_V_id_V_empty_n => pipe_1_V_id_V_empty_n,
        in_V_id_V_read => Softmax130_U0_in_V_id_V_read,
        in_V_dest_V_dout => pipe_1_V_dest_V_dout,
        in_V_dest_V_empty_n => pipe_1_V_dest_V_empty_n,
        in_V_dest_V_read => Softmax130_U0_in_V_dest_V_read,
        in_V_user_V_dout => pipe_1_V_user_V_dout,
        in_V_user_V_empty_n => pipe_1_V_user_V_empty_n,
        in_V_user_V_read => Softmax130_U0_in_V_user_V_read,
        in_V_last_V_dout => pipe_1_V_last_V_dout,
        in_V_last_V_empty_n => pipe_1_V_last_V_empty_n,
        in_V_last_V_read => Softmax130_U0_in_V_last_V_read,
        out_r_TDATA => Softmax130_U0_out_r_TDATA,
        out_r_TID => Softmax130_U0_out_r_TID,
        out_r_TDEST => Softmax130_U0_out_r_TDEST,
        out_r_TUSER => Softmax130_U0_out_r_TUSER,
        out_r_TLAST => Softmax130_U0_out_r_TLAST,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Softmax130_U0_ap_start,
        out_r_TVALID => Softmax130_U0_out_r_TVALID,
        out_r_TREADY => out_r_TREADY,
        ap_done => Softmax130_U0_ap_done,
        ap_ready => Softmax130_U0_ap_ready,
        ap_idle => Softmax130_U0_ap_idle,
        ap_continue => Softmax130_U0_ap_continue);

    pipe_1_V_data_V_U : component fifo_w512_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AttentionMatmul_U0_out_V_data_V_din,
        if_full_n => pipe_1_V_data_V_full_n,
        if_write => AttentionMatmul_U0_out_V_data_V_write,
        if_dout => pipe_1_V_data_V_dout,
        if_empty_n => pipe_1_V_data_V_empty_n,
        if_read => Softmax130_U0_in_V_data_V_read);

    pipe_1_V_id_V_U : component fifo_w8_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AttentionMatmul_U0_out_V_id_V_din,
        if_full_n => pipe_1_V_id_V_full_n,
        if_write => AttentionMatmul_U0_out_V_id_V_write,
        if_dout => pipe_1_V_id_V_dout,
        if_empty_n => pipe_1_V_id_V_empty_n,
        if_read => Softmax130_U0_in_V_id_V_read);

    pipe_1_V_dest_V_U : component fifo_w8_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AttentionMatmul_U0_out_V_dest_V_din,
        if_full_n => pipe_1_V_dest_V_full_n,
        if_write => AttentionMatmul_U0_out_V_dest_V_write,
        if_dout => pipe_1_V_dest_V_dout,
        if_empty_n => pipe_1_V_dest_V_empty_n,
        if_read => Softmax130_U0_in_V_dest_V_read);

    pipe_1_V_user_V_U : component fifo_w16_d2_A_x0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AttentionMatmul_U0_out_V_user_V_din,
        if_full_n => pipe_1_V_user_V_full_n,
        if_write => AttentionMatmul_U0_out_V_user_V_write,
        if_dout => pipe_1_V_user_V_dout,
        if_empty_n => pipe_1_V_user_V_empty_n,
        if_read => Softmax130_U0_in_V_user_V_read);

    pipe_1_V_last_V_U : component fifo_w1_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AttentionMatmul_U0_out_V_last_V_din,
        if_full_n => pipe_1_V_last_V_full_n,
        if_write => AttentionMatmul_U0_out_V_last_V_write,
        if_dout => pipe_1_V_last_V_dout,
        if_empty_n => pipe_1_V_last_V_empty_n,
        if_read => Softmax130_U0_in_V_last_V_read);

    start_for_Softmax130_U0_U : component start_for_Softmax130_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Softmax130_U0_din,
        if_full_n => start_for_Softmax130_U0_full_n,
        if_write => AttentionMatmul_U0_start_write,
        if_dout => start_for_Softmax130_U0_dout,
        if_empty_n => start_for_Softmax130_U0_empty_n,
        if_read => Softmax130_U0_ap_ready);




    AttentionMatmul_U0_ap_continue <= ap_const_logic_1;
    AttentionMatmul_U0_ap_start <= ap_const_logic_1;
    Softmax130_U0_ap_continue <= ap_const_logic_1;
    Softmax130_U0_ap_start <= start_for_Softmax130_U0_empty_n;
    Softmax130_U0_start_full_n <= ap_const_logic_1;
    Softmax130_U0_start_write <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    in_r_TREADY <= AttentionMatmul_U0_in_r_TREADY;
    out_r_TDATA <= Softmax130_U0_out_r_TDATA;
    out_r_TDEST <= Softmax130_U0_out_r_TDEST;
    out_r_TID <= Softmax130_U0_out_r_TID;
    out_r_TLAST <= Softmax130_U0_out_r_TLAST;
    out_r_TUSER <= Softmax130_U0_out_r_TUSER;
    out_r_TVALID <= Softmax130_U0_out_r_TVALID;
    start_for_Softmax130_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
