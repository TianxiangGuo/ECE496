// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_process_1132 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_iter_r_V_V_dout,
        in_iter_r_V_V_empty_n,
        in_iter_r_V_V_read,
        in_iter_c_V_V_dout,
        in_iter_c_V_V_empty_n,
        in_iter_c_V_V_read,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_iter_r_V_V_din,
        out_iter_r_V_V_full_n,
        out_iter_r_V_V_write,
        out_iter_c_V_V_din,
        out_iter_c_V_V_full_n,
        out_iter_c_V_V_write,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state12 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_iter_r_V_V_dout;
input   in_iter_r_V_V_empty_n;
output   in_iter_r_V_V_read;
input  [31:0] in_iter_c_V_V_dout;
input   in_iter_c_V_V_empty_n;
output   in_iter_c_V_V_read;
input  [63:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_iter_r_V_V_din;
input   out_iter_r_V_V_full_n;
output   out_iter_r_V_V_write;
output  [31:0] out_iter_c_V_V_din;
input   out_iter_c_V_V_full_n;
output   out_iter_c_V_V_write;
output  [127:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_iter_r_V_V_read;
reg in_iter_c_V_V_read;
reg in_V_V_read;
reg out_iter_r_V_V_write;
reg out_iter_c_V_V_write;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_iter_r_V_V_blk_n;
reg    in_iter_c_V_V_blk_n;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1778_reg_593;
reg    out_iter_r_V_V_blk_n;
reg    out_iter_c_V_V_blk_n;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln1778_reg_593_pp0_iter7_reg;
reg   [63:0] indvar_flatten_reg_201;
reg   [31:0] tmp_V_45_reg_578;
reg    ap_block_state1;
reg   [31:0] tmp_V_reg_583;
wire   [63:0] bound_fu_218_p2;
reg   [63:0] bound_reg_588;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1778_fu_224_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
reg    ap_block_state11_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1778_reg_593_pp0_iter1_reg;
reg   [0:0] icmp_ln1778_reg_593_pp0_iter2_reg;
reg   [0:0] icmp_ln1778_reg_593_pp0_iter3_reg;
reg   [0:0] icmp_ln1778_reg_593_pp0_iter4_reg;
reg   [0:0] icmp_ln1778_reg_593_pp0_iter5_reg;
reg   [0:0] icmp_ln1778_reg_593_pp0_iter6_reg;
wire   [63:0] add_ln1778_fu_229_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] trunc_ln647_fu_235_p1;
reg   [31:0] trunc_ln647_reg_602;
wire   [0:0] icmp_ln887_fu_239_p2;
reg   [0:0] icmp_ln887_reg_607;
wire   [31:0] p_Result_1_fu_245_p4;
reg   [31:0] p_Result_1_reg_612;
wire   [0:0] icmp_ln887_1_fu_255_p2;
reg   [0:0] icmp_ln887_1_reg_617;
wire  signed [31:0] select_ln1792_fu_261_p3;
reg  signed [31:0] select_ln1792_reg_622;
reg  signed [31:0] select_ln1792_reg_622_pp0_iter3_reg;
wire   [64:0] mul_ln1371_fu_271_p2;
reg   [64:0] mul_ln1371_reg_627;
reg   [0:0] tmp_5_reg_633;
wire  signed [31:0] select_ln1792_1_fu_285_p3;
reg  signed [31:0] select_ln1792_1_reg_639;
reg  signed [31:0] select_ln1792_1_reg_639_pp0_iter3_reg;
wire   [64:0] mul_ln1371_1_fu_295_p2;
reg   [64:0] mul_ln1371_1_reg_644;
reg   [0:0] tmp_9_reg_650;
wire  signed [31:0] select_ln1371_1_fu_354_p3;
reg  signed [31:0] select_ln1371_1_reg_656;
wire   [23:0] trunc_ln68_fu_361_p1;
reg   [23:0] trunc_ln68_reg_661;
reg   [23:0] trunc_ln68_reg_661_pp0_iter4_reg;
reg   [23:0] trunc_ln68_reg_661_pp0_iter5_reg;
reg   [23:0] trunc_ln68_reg_661_pp0_iter6_reg;
wire  signed [31:0] select_ln1371_3_fu_410_p3;
reg  signed [31:0] select_ln1371_3_reg_666;
wire   [23:0] trunc_ln68_2_fu_417_p1;
reg   [23:0] trunc_ln68_2_reg_671;
reg   [23:0] trunc_ln68_2_reg_671_pp0_iter4_reg;
reg   [23:0] trunc_ln68_2_reg_671_pp0_iter5_reg;
reg   [23:0] trunc_ln68_2_reg_671_pp0_iter6_reg;
wire  signed [31:0] add_ln68_fu_426_p2;
reg  signed [31:0] add_ln68_reg_676;
reg  signed [31:0] add_ln68_reg_676_pp0_iter5_reg;
wire  signed [31:0] add_ln68_1_fu_436_p2;
reg  signed [31:0] add_ln68_1_reg_682;
reg  signed [31:0] add_ln68_1_reg_682_pp0_iter5_reg;
wire   [32:0] add_ln1353_fu_444_p2;
reg   [32:0] add_ln1353_reg_688;
wire   [32:0] add_ln1353_2_fu_453_p2;
reg   [32:0] add_ln1353_2_reg_693;
wire   [63:0] mul_ln1352_fu_465_p2;
reg   [63:0] mul_ln1352_reg_698;
wire   [63:0] mul_ln1352_1_fu_477_p2;
reg   [63:0] mul_ln1352_1_reg_703;
wire   [62:0] select_ln1803_fu_515_p3;
reg   [62:0] select_ln1803_reg_708;
wire   [62:0] select_ln1803_1_fu_555_p3;
reg   [62:0] select_ln1803_1_reg_713;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_218_p0;
wire   [31:0] bound_fu_218_p1;
wire  signed [31:0] mul_ln1371_fu_271_p1;
wire  signed [31:0] mul_ln1371_1_fu_295_p1;
wire   [64:0] sub_ln1371_fu_309_p2;
wire   [23:0] tmp_6_fu_314_p4;
wire   [23:0] tmp_fu_328_p4;
wire  signed [31:0] sext_ln1371_1_fu_324_p1;
wire  signed [31:0] sext_ln1371_2_fu_337_p1;
wire   [31:0] select_ln1371_fu_341_p3;
wire   [31:0] sub_ln1371_1_fu_348_p2;
wire   [64:0] sub_ln1371_2_fu_365_p2;
wire   [23:0] tmp_12_fu_370_p4;
wire   [23:0] tmp_13_fu_384_p4;
wire  signed [31:0] sext_ln1371_4_fu_380_p1;
wire  signed [31:0] sext_ln1371_5_fu_393_p1;
wire   [31:0] select_ln1371_2_fu_397_p3;
wire   [31:0] sub_ln1371_3_fu_404_p2;
wire  signed [25:0] mul_ln68_fu_421_p1;
wire   [31:0] mul_ln68_fu_421_p2;
wire  signed [25:0] mul_ln68_1_fu_431_p1;
wire   [31:0] mul_ln68_1_fu_431_p2;
wire  signed [32:0] sext_ln215_fu_441_p1;
wire  signed [32:0] sext_ln215_2_fu_450_p1;
wire  signed [31:0] mul_ln1352_fu_465_p0;
wire  signed [32:0] mul_ln1352_fu_465_p1;
wire  signed [31:0] mul_ln1352_1_fu_477_p0;
wire  signed [32:0] mul_ln1352_1_fu_477_p1;
wire   [23:0] sub_ln461_fu_488_p2;
wire   [63:0] add_ln1353_1_fu_483_p2;
wire   [63:0] zext_ln790_fu_493_p1;
wire   [63:0] shl_ln790_fu_497_p2;
wire   [0:0] tmp_8_fu_507_p3;
wire   [62:0] trunc_ln887_fu_503_p1;
wire   [23:0] sub_ln461_1_fu_528_p2;
wire   [63:0] add_ln1353_3_fu_523_p2;
wire   [63:0] zext_ln790_1_fu_533_p1;
wire   [63:0] shl_ln790_1_fu_537_p2;
wire   [0:0] tmp_14_fu_547_p3;
wire   [62:0] trunc_ln887_1_fu_543_p1;
wire   [63:0] zext_ln1803_fu_563_p1;
wire   [126:0] tmp_1_fu_566_p3;
wire    ap_CS_fsm_state12;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_218_p00;
wire   [63:0] bound_fu_218_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1778_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_201 <= add_ln1778_fu_229_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_201 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1778_reg_593_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln1353_2_reg_693 <= add_ln1353_2_fu_453_p2;
        add_ln1353_reg_688 <= add_ln1353_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1778_reg_593_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln68_1_reg_682 <= add_ln68_1_fu_436_p2;
        add_ln68_reg_676 <= add_ln68_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln68_1_reg_682_pp0_iter5_reg <= add_ln68_1_reg_682;
        add_ln68_reg_676_pp0_iter5_reg <= add_ln68_reg_676;
        icmp_ln1778_reg_593_pp0_iter2_reg <= icmp_ln1778_reg_593_pp0_iter1_reg;
        icmp_ln1778_reg_593_pp0_iter3_reg <= icmp_ln1778_reg_593_pp0_iter2_reg;
        icmp_ln1778_reg_593_pp0_iter4_reg <= icmp_ln1778_reg_593_pp0_iter3_reg;
        icmp_ln1778_reg_593_pp0_iter5_reg <= icmp_ln1778_reg_593_pp0_iter4_reg;
        icmp_ln1778_reg_593_pp0_iter6_reg <= icmp_ln1778_reg_593_pp0_iter5_reg;
        icmp_ln1778_reg_593_pp0_iter7_reg <= icmp_ln1778_reg_593_pp0_iter6_reg;
        select_ln1792_1_reg_639_pp0_iter3_reg <= select_ln1792_1_reg_639;
        select_ln1792_reg_622_pp0_iter3_reg <= select_ln1792_reg_622;
        trunc_ln68_2_reg_671_pp0_iter4_reg <= trunc_ln68_2_reg_671;
        trunc_ln68_2_reg_671_pp0_iter5_reg <= trunc_ln68_2_reg_671_pp0_iter4_reg;
        trunc_ln68_2_reg_671_pp0_iter6_reg <= trunc_ln68_2_reg_671_pp0_iter5_reg;
        trunc_ln68_reg_661_pp0_iter4_reg <= trunc_ln68_reg_661;
        trunc_ln68_reg_661_pp0_iter5_reg <= trunc_ln68_reg_661_pp0_iter4_reg;
        trunc_ln68_reg_661_pp0_iter6_reg <= trunc_ln68_reg_661_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_588 <= bound_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1778_reg_593 <= icmp_ln1778_fu_224_p2;
        icmp_ln1778_reg_593_pp0_iter1_reg <= icmp_ln1778_reg_593;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1778_reg_593 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln887_1_reg_617 <= icmp_ln887_1_fu_255_p2;
        icmp_ln887_reg_607 <= icmp_ln887_fu_239_p2;
        p_Result_1_reg_612 <= {{in_V_V_dout[63:32]}};
        trunc_ln647_reg_602 <= trunc_ln647_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1778_reg_593_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1352_1_reg_703 <= mul_ln1352_1_fu_477_p2;
        mul_ln1352_reg_698 <= mul_ln1352_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1778_reg_593_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1371_1_reg_644 <= mul_ln1371_1_fu_295_p2;
        mul_ln1371_reg_627 <= mul_ln1371_fu_271_p2;
        select_ln1792_1_reg_639 <= select_ln1792_1_fu_285_p3;
        select_ln1792_reg_622 <= select_ln1792_fu_261_p3;
        tmp_5_reg_633 <= select_ln1792_fu_261_p3[32'd31];
        tmp_9_reg_650 <= select_ln1792_1_fu_285_p3[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1778_reg_593_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln1371_1_reg_656 <= select_ln1371_1_fu_354_p3;
        select_ln1371_3_reg_666 <= select_ln1371_3_fu_410_p3;
        trunc_ln68_2_reg_671 <= trunc_ln68_2_fu_417_p1;
        trunc_ln68_reg_661 <= trunc_ln68_fu_361_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1778_reg_593_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln1803_1_reg_713 <= select_ln1803_1_fu_555_p3;
        select_ln1803_reg_708 <= select_ln1803_fu_515_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_45_reg_578 <= in_iter_c_V_V_dout;
        tmp_V_reg_583 <= in_iter_r_V_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln1778_fu_224_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1778_reg_593 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1778_reg_593 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_iter_c_V_V_blk_n = in_iter_c_V_V_empty_n;
    end else begin
        in_iter_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_iter_c_V_V_read = 1'b1;
    end else begin
        in_iter_c_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_iter_r_V_V_blk_n = in_iter_r_V_V_empty_n;
    end else begin
        in_iter_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_iter_r_V_V_read = 1'b1;
    end else begin
        in_iter_r_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1778_reg_593_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1778_reg_593_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_iter_c_V_V_blk_n = out_iter_c_V_V_full_n;
    end else begin
        out_iter_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_iter_c_V_V_write = 1'b1;
    end else begin
        out_iter_c_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_iter_r_V_V_blk_n = out_iter_r_V_V_full_n;
    end else begin
        out_iter_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_iter_r_V_V_write = 1'b1;
    end else begin
        out_iter_r_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1778_fu_224_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1778_fu_224_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1353_1_fu_483_p2 = (64'd1393919 + mul_ln1352_reg_698);

assign add_ln1353_2_fu_453_p2 = ($signed(33'd1912) + $signed(sext_ln215_2_fu_450_p1));

assign add_ln1353_3_fu_523_p2 = (64'd1393919 + mul_ln1352_1_reg_703);

assign add_ln1353_fu_444_p2 = ($signed(33'd1912) + $signed(sext_ln215_fu_441_p1));

assign add_ln1778_fu_229_p2 = (indvar_flatten_reg_201 + 64'd1);

assign add_ln68_1_fu_436_p2 = ($signed(mul_ln68_1_fu_431_p2) + $signed(select_ln1792_1_reg_639_pp0_iter3_reg));

assign add_ln68_fu_426_p2 = ($signed(mul_ln68_fu_421_p2) + $signed(select_ln1792_reg_622_pp0_iter3_reg));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1778_reg_593_pp0_iter7_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln1778_reg_593 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1778_reg_593_pp0_iter7_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln1778_reg_593 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1778_reg_593_pp0_iter7_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln1778_reg_593 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter8 = ((icmp_ln1778_reg_593_pp0_iter7_reg == 1'd0) & (out_V_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln1778_reg_593 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_218_p0 = bound_fu_218_p00;

assign bound_fu_218_p00 = tmp_V_45_reg_578;

assign bound_fu_218_p1 = bound_fu_218_p10;

assign bound_fu_218_p10 = tmp_V_reg_583;

assign bound_fu_218_p2 = (bound_fu_218_p0 * bound_fu_218_p1);

assign icmp_ln1778_fu_224_p2 = ((indvar_flatten_reg_201 == bound_reg_588) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_255_p2 = (($signed(p_Result_1_fu_245_p4) < $signed(32'd4294952596)) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_239_p2 = (($signed(trunc_ln647_fu_235_p1) < $signed(32'd4294952596)) ? 1'b1 : 1'b0);

assign mul_ln1352_1_fu_477_p0 = add_ln68_1_reg_682_pp0_iter5_reg;

assign mul_ln1352_1_fu_477_p1 = add_ln1353_2_reg_693;

assign mul_ln1352_1_fu_477_p2 = ($signed(mul_ln1352_1_fu_477_p0) * $signed(mul_ln1352_1_fu_477_p1));

assign mul_ln1352_fu_465_p0 = add_ln68_reg_676_pp0_iter5_reg;

assign mul_ln1352_fu_465_p1 = add_ln1353_reg_688;

assign mul_ln1352_fu_465_p2 = ($signed(mul_ln1352_fu_465_p0) * $signed(mul_ln1352_fu_465_p1));

assign mul_ln1371_1_fu_295_p1 = select_ln1792_1_fu_285_p3;

assign mul_ln1371_1_fu_295_p2 = ($signed({{1'b0}, {65'd4487802563}}) * $signed(mul_ln1371_1_fu_295_p1));

assign mul_ln1371_fu_271_p1 = select_ln1792_fu_261_p3;

assign mul_ln1371_fu_271_p2 = ($signed({{1'b0}, {65'd4487802563}}) * $signed(mul_ln1371_fu_271_p1));

assign mul_ln68_1_fu_431_p1 = select_ln1371_3_reg_666;

assign mul_ln68_1_fu_431_p2 = ($signed({{1'b0}, {32'd490}}) * $signed(mul_ln68_1_fu_431_p1));

assign mul_ln68_fu_421_p1 = select_ln1371_1_reg_656;

assign mul_ln68_fu_421_p2 = ($signed({{1'b0}, {32'd490}}) * $signed(mul_ln68_fu_421_p1));

assign out_V_V_din = tmp_1_fu_566_p3;

assign out_iter_c_V_V_din = in_iter_c_V_V_dout;

assign out_iter_r_V_V_din = in_iter_r_V_V_dout;

assign p_Result_1_fu_245_p4 = {{in_V_V_dout[63:32]}};

assign select_ln1371_1_fu_354_p3 = ((tmp_5_reg_633[0:0] === 1'b1) ? sext_ln1371_1_fu_324_p1 : sub_ln1371_1_fu_348_p2);

assign select_ln1371_2_fu_397_p3 = ((tmp_9_reg_650[0:0] === 1'b1) ? sext_ln1371_4_fu_380_p1 : sext_ln1371_5_fu_393_p1);

assign select_ln1371_3_fu_410_p3 = ((tmp_9_reg_650[0:0] === 1'b1) ? sext_ln1371_4_fu_380_p1 : sub_ln1371_3_fu_404_p2);

assign select_ln1371_fu_341_p3 = ((tmp_5_reg_633[0:0] === 1'b1) ? sext_ln1371_1_fu_324_p1 : sext_ln1371_2_fu_337_p1);

assign select_ln1792_1_fu_285_p3 = ((icmp_ln887_1_reg_617[0:0] === 1'b1) ? 32'd4294952596 : p_Result_1_reg_612);

assign select_ln1792_fu_261_p3 = ((icmp_ln887_reg_607[0:0] === 1'b1) ? 32'd4294952596 : trunc_ln647_reg_602);

assign select_ln1803_1_fu_555_p3 = ((tmp_14_fu_547_p3[0:0] === 1'b1) ? 63'd0 : trunc_ln887_1_fu_543_p1);

assign select_ln1803_fu_515_p3 = ((tmp_8_fu_507_p3[0:0] === 1'b1) ? 63'd0 : trunc_ln887_fu_503_p1);

assign sext_ln1371_1_fu_324_p1 = $signed(tmp_6_fu_314_p4);

assign sext_ln1371_2_fu_337_p1 = $signed(tmp_fu_328_p4);

assign sext_ln1371_4_fu_380_p1 = $signed(tmp_12_fu_370_p4);

assign sext_ln1371_5_fu_393_p1 = $signed(tmp_13_fu_384_p4);

assign sext_ln215_2_fu_450_p1 = add_ln68_1_reg_682;

assign sext_ln215_fu_441_p1 = add_ln68_reg_676;

assign shl_ln790_1_fu_537_p2 = add_ln1353_3_fu_523_p2 << zext_ln790_1_fu_533_p1;

assign shl_ln790_fu_497_p2 = add_ln1353_1_fu_483_p2 << zext_ln790_fu_493_p1;

assign start_out = real_start;

assign sub_ln1371_1_fu_348_p2 = (32'd0 - select_ln1371_fu_341_p3);

assign sub_ln1371_2_fu_365_p2 = (65'd0 - mul_ln1371_1_reg_644);

assign sub_ln1371_3_fu_404_p2 = (32'd0 - select_ln1371_2_fu_397_p3);

assign sub_ln1371_fu_309_p2 = (65'd0 - mul_ln1371_reg_627);

assign sub_ln461_1_fu_528_p2 = (24'd30 - trunc_ln68_2_reg_671_pp0_iter6_reg);

assign sub_ln461_fu_488_p2 = (24'd30 - trunc_ln68_reg_661_pp0_iter6_reg);

assign tmp_12_fu_370_p4 = {{sub_ln1371_2_fu_365_p2[64:41]}};

assign tmp_13_fu_384_p4 = {{mul_ln1371_1_reg_644[64:41]}};

assign tmp_14_fu_547_p3 = shl_ln790_1_fu_537_p2[32'd63];

assign tmp_1_fu_566_p3 = {{select_ln1803_1_reg_713}, {zext_ln1803_fu_563_p1}};

assign tmp_6_fu_314_p4 = {{sub_ln1371_fu_309_p2[64:41]}};

assign tmp_8_fu_507_p3 = shl_ln790_fu_497_p2[32'd63];

assign tmp_fu_328_p4 = {{mul_ln1371_reg_627[64:41]}};

assign trunc_ln647_fu_235_p1 = in_V_V_dout[31:0];

assign trunc_ln68_2_fu_417_p1 = select_ln1371_3_fu_410_p3[23:0];

assign trunc_ln68_fu_361_p1 = select_ln1371_1_fu_354_p3[23:0];

assign trunc_ln887_1_fu_543_p1 = shl_ln790_1_fu_537_p2[62:0];

assign trunc_ln887_fu_503_p1 = shl_ln790_fu_497_p2[62:0];

assign zext_ln1803_fu_563_p1 = select_ln1803_reg_708;

assign zext_ln790_1_fu_533_p1 = sub_ln461_1_fu_528_p2;

assign zext_ln790_fu_493_p1 = sub_ln461_fu_488_p2;

endmodule //softmax_process_1132
