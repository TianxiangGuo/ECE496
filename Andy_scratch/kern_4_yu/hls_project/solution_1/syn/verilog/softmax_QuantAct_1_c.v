// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_QuantAct_1_c (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_iter_r_V_V_dout,
        in_iter_r_V_V_empty_n,
        in_iter_r_V_V_read,
        in_iter_c_V_V_dout,
        in_iter_c_V_V_empty_n,
        in_iter_c_V_V_read,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_iter_r_V_V_din,
        out_iter_r_V_V_full_n,
        out_iter_r_V_V_write,
        out_iter_c_V_V_din,
        out_iter_c_V_V_full_n,
        out_iter_c_V_V_write,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_iter_r_V_V_dout;
input   in_iter_r_V_V_empty_n;
output   in_iter_r_V_V_read;
input  [31:0] in_iter_c_V_V_dout;
input   in_iter_c_V_V_empty_n;
output   in_iter_c_V_V_read;
input  [127:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_iter_r_V_V_din;
input   out_iter_r_V_V_full_n;
output   out_iter_r_V_V_write;
output  [31:0] out_iter_c_V_V_din;
input   out_iter_c_V_V_full_n;
output   out_iter_c_V_V_write;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_iter_r_V_V_read;
reg in_iter_c_V_V_read;
reg in_V_V_read;
reg out_iter_r_V_V_write;
reg out_iter_c_V_V_write;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_iter_r_V_V_blk_n;
reg    in_iter_c_V_V_blk_n;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1835_reg_333;
reg    out_iter_r_V_V_blk_n;
reg    out_iter_c_V_V_blk_n;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln1835_reg_333_pp0_iter3_reg;
reg   [63:0] indvar_flatten_reg_185;
reg   [31:0] tmp_V_49_reg_318;
reg    ap_block_state1;
reg   [31:0] tmp_V_reg_323;
wire   [63:0] bound_fu_202_p2;
reg   [63:0] bound_reg_328;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1835_fu_208_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1835_reg_333_pp0_iter1_reg;
reg   [0:0] icmp_ln1835_reg_333_pp0_iter2_reg;
wire   [63:0] add_ln1835_fu_213_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] trunc_ln647_fu_219_p1;
reg  signed [63:0] trunc_ln647_reg_342;
reg  signed [63:0] p_Result_27_1_reg_347;
reg   [0:0] tmp_reg_362;
reg   [15:0] trunc_ln5_reg_367;
reg   [0:0] tmp_15_reg_373;
reg   [15:0] trunc_ln798_1_reg_378;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_202_p0;
wire   [31:0] bound_fu_202_p1;
wire   [31:0] grp_fu_236_p0;
wire   [31:0] grp_fu_245_p0;
wire   [94:0] grp_fu_236_p2;
wire   [94:0] grp_fu_245_p2;
wire   [15:0] add_ln68_fu_287_p2;
wire   [15:0] add_ln68_2_fu_298_p2;
wire   [15:0] select_ln791_1_fu_303_p3;
wire   [15:0] select_ln791_fu_292_p3;
reg    grp_fu_236_ce;
reg    grp_fu_245_ce;
wire    ap_CS_fsm_state8;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_202_p00;
wire   [63:0] bound_fu_202_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

kernel_4_mul_32ns_64s_95_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 95 ))
kernel_4_mul_32ns_64s_95_2_1_U775(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_236_p0),
    .din1(trunc_ln647_reg_342),
    .ce(grp_fu_236_ce),
    .dout(grp_fu_236_p2)
);

kernel_4_mul_32ns_64s_95_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 95 ))
kernel_4_mul_32ns_64s_95_2_1_U776(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_245_p0),
    .din1(p_Result_27_1_reg_347),
    .ce(grp_fu_245_ce),
    .dout(grp_fu_245_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1835_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_185 <= add_ln1835_fu_213_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_185 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_328 <= bound_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1835_reg_333 <= icmp_ln1835_fu_208_p2;
        icmp_ln1835_reg_333_pp0_iter1_reg <= icmp_ln1835_reg_333;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln1835_reg_333_pp0_iter2_reg <= icmp_ln1835_reg_333_pp0_iter1_reg;
        icmp_ln1835_reg_333_pp0_iter3_reg <= icmp_ln1835_reg_333_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1835_reg_333 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_27_1_reg_347 <= {{in_V_V_dout[127:64]}};
        trunc_ln647_reg_342 <= trunc_ln647_fu_219_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1835_reg_333_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_15_reg_373 <= grp_fu_245_p2[32'd65];
        tmp_reg_362 <= grp_fu_236_p2[32'd65];
        trunc_ln5_reg_367 <= {{grp_fu_236_p2[81:66]}};
        trunc_ln798_1_reg_378 <= {{grp_fu_245_p2[81:66]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_49_reg_318 <= in_iter_c_V_V_dout;
        tmp_V_reg_323 <= in_iter_r_V_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln1835_fu_208_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_236_ce = 1'b1;
    end else begin
        grp_fu_236_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_245_ce = 1'b1;
    end else begin
        grp_fu_245_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1835_reg_333 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1835_reg_333 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_iter_c_V_V_blk_n = in_iter_c_V_V_empty_n;
    end else begin
        in_iter_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_iter_c_V_V_read = 1'b1;
    end else begin
        in_iter_c_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_iter_r_V_V_blk_n = in_iter_r_V_V_empty_n;
    end else begin
        in_iter_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_iter_r_V_V_read = 1'b1;
    end else begin
        in_iter_r_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1835_reg_333_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1835_reg_333_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_iter_c_V_V_blk_n = out_iter_c_V_V_full_n;
    end else begin
        out_iter_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_iter_c_V_V_write = 1'b1;
    end else begin
        out_iter_c_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_iter_r_V_V_blk_n = out_iter_r_V_V_full_n;
    end else begin
        out_iter_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_iter_r_V_V_write = 1'b1;
    end else begin
        out_iter_r_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1835_fu_208_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1835_fu_208_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1835_fu_213_p2 = (indvar_flatten_reg_185 + 64'd1);

assign add_ln68_2_fu_298_p2 = (16'd1 + trunc_ln798_1_reg_378);

assign add_ln68_fu_287_p2 = (16'd1 + trunc_ln5_reg_367);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1835_reg_333_pp0_iter3_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln1835_reg_333 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1835_reg_333_pp0_iter3_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln1835_reg_333 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1835_reg_333_pp0_iter3_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln1835_reg_333 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((out_iter_c_V_V_full_n == 1'b0) | (out_iter_r_V_V_full_n == 1'b0) | (in_iter_c_V_V_empty_n == 1'b0) | (in_iter_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln1835_reg_333 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((icmp_ln1835_reg_333_pp0_iter3_reg == 1'd0) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_202_p0 = bound_fu_202_p00;

assign bound_fu_202_p00 = tmp_V_49_reg_318;

assign bound_fu_202_p1 = bound_fu_202_p10;

assign bound_fu_202_p10 = tmp_V_reg_323;

assign bound_fu_202_p2 = (bound_fu_202_p0 * bound_fu_202_p1);

assign grp_fu_236_p0 = 95'd1615394284;

assign grp_fu_245_p0 = 95'd1615394284;

assign icmp_ln1835_fu_208_p2 = ((indvar_flatten_reg_185 == bound_reg_328) ? 1'b1 : 1'b0);

assign out_V_V_din = {{select_ln791_1_fu_303_p3}, {select_ln791_fu_292_p3}};

assign out_iter_c_V_V_din = in_iter_c_V_V_dout;

assign out_iter_r_V_V_din = in_iter_r_V_V_dout;

assign select_ln791_1_fu_303_p3 = ((tmp_15_reg_373[0:0] === 1'b1) ? add_ln68_2_fu_298_p2 : trunc_ln798_1_reg_378);

assign select_ln791_fu_292_p3 = ((tmp_reg_362[0:0] === 1'b1) ? add_ln68_fu_287_p2 : trunc_ln5_reg_367);

assign start_out = real_start;

assign trunc_ln647_fu_219_p1 = in_V_V_dout[63:0];

endmodule //softmax_QuantAct_1_c
