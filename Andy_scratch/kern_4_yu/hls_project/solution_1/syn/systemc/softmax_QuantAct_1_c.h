// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _softmax_QuantAct_1_c_HH_
#define _softmax_QuantAct_1_c_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel_4_mul_32ns_64s_95_2_1.h"

namespace ap_rtl {

struct softmax_QuantAct_1_c : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > in_iter_r_V_V_dout;
    sc_in< sc_logic > in_iter_r_V_V_empty_n;
    sc_out< sc_logic > in_iter_r_V_V_read;
    sc_in< sc_lv<32> > in_iter_c_V_V_dout;
    sc_in< sc_logic > in_iter_c_V_V_empty_n;
    sc_out< sc_logic > in_iter_c_V_V_read;
    sc_in< sc_lv<128> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<32> > out_iter_r_V_V_din;
    sc_in< sc_logic > out_iter_r_V_V_full_n;
    sc_out< sc_logic > out_iter_r_V_V_write;
    sc_out< sc_lv<32> > out_iter_c_V_V_din;
    sc_in< sc_logic > out_iter_c_V_V_full_n;
    sc_out< sc_logic > out_iter_c_V_V_write;
    sc_out< sc_lv<32> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;


    // Module declarations
    softmax_QuantAct_1_c(sc_module_name name);
    SC_HAS_PROCESS(softmax_QuantAct_1_c);

    ~softmax_QuantAct_1_c();

    sc_trace_file* mVcdFile;

    kernel_4_mul_32ns_64s_95_2_1<1,2,32,64,95>* kernel_4_mul_32ns_64s_95_2_1_U775;
    kernel_4_mul_32ns_64s_95_2_1<1,2,32,64,95>* kernel_4_mul_32ns_64s_95_2_1_U776;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > in_iter_r_V_V_blk_n;
    sc_signal< sc_logic > in_iter_c_V_V_blk_n;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln1835_reg_333;
    sc_signal< sc_logic > out_iter_r_V_V_blk_n;
    sc_signal< sc_logic > out_iter_c_V_V_blk_n;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > icmp_ln1835_reg_333_pp0_iter3_reg;
    sc_signal< sc_lv<64> > indvar_flatten_reg_185;
    sc_signal< sc_lv<32> > tmp_V_49_reg_318;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > tmp_V_reg_323;
    sc_signal< sc_lv<64> > bound_fu_202_p2;
    sc_signal< sc_lv<64> > bound_reg_328;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln1835_fu_208_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln1835_reg_333_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln1835_reg_333_pp0_iter2_reg;
    sc_signal< sc_lv<64> > add_ln1835_fu_213_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > trunc_ln647_fu_219_p1;
    sc_signal< sc_lv<64> > trunc_ln647_reg_342;
    sc_signal< sc_lv<64> > p_Result_27_1_reg_347;
    sc_signal< sc_lv<1> > tmp_reg_362;
    sc_signal< sc_lv<16> > trunc_ln5_reg_367;
    sc_signal< sc_lv<1> > tmp_15_reg_373;
    sc_signal< sc_lv<16> > trunc_ln798_1_reg_378;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > bound_fu_202_p0;
    sc_signal< sc_lv<32> > bound_fu_202_p1;
    sc_signal< sc_lv<32> > grp_fu_236_p0;
    sc_signal< sc_lv<32> > grp_fu_245_p0;
    sc_signal< sc_lv<95> > grp_fu_236_p2;
    sc_signal< sc_lv<95> > grp_fu_245_p2;
    sc_signal< sc_lv<16> > add_ln68_fu_287_p2;
    sc_signal< sc_lv<16> > add_ln68_2_fu_298_p2;
    sc_signal< sc_lv<16> > select_ln791_1_fu_303_p3;
    sc_signal< sc_lv<16> > select_ln791_fu_292_p3;
    sc_signal< sc_logic > grp_fu_236_ce;
    sc_signal< sc_logic > grp_fu_245_ce;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<64> > bound_fu_202_p00;
    sc_signal< sc_lv<64> > bound_fu_202_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state8;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<95> ap_const_lv95_6048F5EC;
    static const sc_lv<32> ap_const_lv32_41;
    static const sc_lv<32> ap_const_lv32_42;
    static const sc_lv<32> ap_const_lv32_51;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1835_fu_213_p2();
    void thread_add_ln68_2_fu_298_p2();
    void thread_add_ln68_fu_287_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_block_state6_pp0_stage0_iter3();
    void thread_ap_block_state7_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_bound_fu_202_p0();
    void thread_bound_fu_202_p00();
    void thread_bound_fu_202_p1();
    void thread_bound_fu_202_p10();
    void thread_bound_fu_202_p2();
    void thread_grp_fu_236_ce();
    void thread_grp_fu_236_p0();
    void thread_grp_fu_245_ce();
    void thread_grp_fu_245_p0();
    void thread_icmp_ln1835_fu_208_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_in_iter_c_V_V_blk_n();
    void thread_in_iter_c_V_V_read();
    void thread_in_iter_r_V_V_blk_n();
    void thread_in_iter_r_V_V_read();
    void thread_internal_ap_ready();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_out_iter_c_V_V_blk_n();
    void thread_out_iter_c_V_V_din();
    void thread_out_iter_c_V_V_write();
    void thread_out_iter_r_V_V_blk_n();
    void thread_out_iter_r_V_V_din();
    void thread_out_iter_r_V_V_write();
    void thread_real_start();
    void thread_select_ln791_1_fu_303_p3();
    void thread_select_ln791_fu_292_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_trunc_ln647_fu_219_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
