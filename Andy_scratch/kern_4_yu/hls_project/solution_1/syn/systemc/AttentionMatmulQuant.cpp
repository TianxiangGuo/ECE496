// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AttentionMatmulQuant.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AttentionMatmulQuant::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AttentionMatmulQuant::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> AttentionMatmulQuant::ap_ST_fsm_state1 = "1";
const sc_lv<4> AttentionMatmulQuant::ap_ST_fsm_state2 = "10";
const sc_lv<4> AttentionMatmulQuant::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> AttentionMatmulQuant::ap_ST_fsm_state5 = "1000";
const bool AttentionMatmulQuant::ap_const_boolean_1 = true;
const sc_lv<32> AttentionMatmulQuant::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AttentionMatmulQuant::ap_const_lv32_2 = "10";
const bool AttentionMatmulQuant::ap_const_boolean_0 = false;
const sc_lv<1> AttentionMatmulQuant::ap_const_lv1_1 = "1";
const sc_lv<32> AttentionMatmulQuant::ap_const_lv32_1 = "1";
const sc_lv<1> AttentionMatmulQuant::ap_const_lv1_0 = "0";
const sc_lv<512> AttentionMatmulQuant::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> AttentionMatmulQuant::ap_const_lv32_4 = "100";
const sc_lv<32> AttentionMatmulQuant::ap_const_lv32_1F = "11111";
const sc_lv<28> AttentionMatmulQuant::ap_const_lv28_0 = "0000000000000000000000000000";
const sc_lv<4> AttentionMatmulQuant::ap_const_lv4_0 = "0000";
const sc_lv<32> AttentionMatmulQuant::ap_const_lv32_10 = "10000";
const sc_lv<32> AttentionMatmulQuant::ap_const_lv32_3F = "111111";
const sc_lv<32> AttentionMatmulQuant::ap_const_lv32_3 = "11";

AttentionMatmulQuant::AttentionMatmulQuant(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Nc_2_fu_302_p1);
    sensitive << ( in_V_data_V1_dout );

    SC_METHOD(thread_Nc_fu_347_p3);
    sensitive << ( tmp_1_fu_337_p4 );

    SC_METHOD(thread_add_ln827_fu_332_p2);
    sensitive << ( Nc_2_reg_479 );

    SC_METHOD(thread_and_ln824_fu_367_p2);
    sensitive << ( icmp_ln824_reg_493 );
    sensitive << ( xor_ln821_fu_362_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( io_acc_block_signal_op60 );
    sensitive << ( io_acc_block_signal_op62 );
    sensitive << ( io_acc_block_signal_op68 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( io_acc_block_signal_op60 );
    sensitive << ( io_acc_block_signal_op62 );
    sensitive << ( io_acc_block_signal_op68 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( io_acc_block_signal_op60 );
    sensitive << ( io_acc_block_signal_op62 );
    sensitive << ( io_acc_block_signal_op68 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( io_acc_block_signal_op10 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( io_acc_block_signal_op60 );
    sensitive << ( io_acc_block_signal_op62 );
    sensitive << ( io_acc_block_signal_op68 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln836_fu_398_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_i_fu_403_p2);
    sensitive << ( i_0_reg_246 );

    SC_METHOD(thread_icmp_ln821_fu_320_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op10 );
    sensitive << ( tmp_16_fu_310_p4 );

    SC_METHOD(thread_icmp_ln824_fu_326_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( io_acc_block_signal_op10 );
    sensitive << ( trunc_ln825_fu_306_p1 );

    SC_METHOD(thread_icmp_ln836_fu_398_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_0_reg_246 );
    sensitive << ( select_ln824_reg_498 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln841_fu_409_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_0_reg_246 );
    sensitive << ( Nc_2_reg_479 );
    sensitive << ( icmp_ln836_fu_398_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in_V_data_V1_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V1_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );

    SC_METHOD(thread_in_V_data_V1_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( io_acc_block_signal_op10 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_dest_V3_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_dest_V3_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );

    SC_METHOD(thread_in_V_dest_V3_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( io_acc_block_signal_op10 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_id_V2_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_id_V2_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );

    SC_METHOD(thread_in_V_id_V2_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( io_acc_block_signal_op10 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_last_V5_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_last_V5_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );

    SC_METHOD(thread_in_V_last_V5_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( io_acc_block_signal_op10 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_user_V4_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_user_V4_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );

    SC_METHOD(thread_in_V_user_V4_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( io_acc_block_signal_op10 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_io_acc_block_signal_op10);
    sensitive << ( in_V_data_V1_empty_n );
    sensitive << ( in_V_id_V2_empty_n );
    sensitive << ( in_V_dest_V3_empty_n );
    sensitive << ( in_V_user_V4_empty_n );
    sensitive << ( in_V_last_V5_empty_n );

    SC_METHOD(thread_io_acc_block_signal_op44);
    sensitive << ( out_V_data_V_full_n );
    sensitive << ( out_V_id_V_full_n );
    sensitive << ( out_V_dest_V_full_n );
    sensitive << ( out_V_user_V_full_n );
    sensitive << ( out_V_last_V_full_n );

    SC_METHOD(thread_io_acc_block_signal_op60);
    sensitive << ( out_V_data_V_full_n );
    sensitive << ( out_V_id_V_full_n );
    sensitive << ( out_V_dest_V_full_n );
    sensitive << ( out_V_user_V_full_n );
    sensitive << ( out_V_last_V_full_n );

    SC_METHOD(thread_io_acc_block_signal_op62);
    sensitive << ( in_V_data_V1_empty_n );
    sensitive << ( in_V_id_V2_empty_n );
    sensitive << ( in_V_dest_V3_empty_n );
    sensitive << ( in_V_user_V4_empty_n );
    sensitive << ( in_V_last_V5_empty_n );

    SC_METHOD(thread_io_acc_block_signal_op68);
    sensitive << ( out_V_data_V_full_n );
    sensitive << ( out_V_id_V_full_n );
    sensitive << ( out_V_dest_V_full_n );
    sensitive << ( out_V_user_V_full_n );
    sensitive << ( out_V_last_V_full_n );

    SC_METHOD(thread_out_V_data_V_blk_n);
    sensitive << ( out_V_data_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_data_V_din);
    sensitive << ( in_V_data_V1_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( p_Result_s_fu_386_p5 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_data_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_dest_V_blk_n);
    sensitive << ( out_V_dest_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_dest_V_din);
    sensitive << ( in_V_dest_V3_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_dest_V_2_reg_464 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( tmp_dest_V_fu_200 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_dest_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_id_V_blk_n);
    sensitive << ( out_V_id_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_id_V_din);
    sensitive << ( in_V_id_V2_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_id_V_2_reg_459 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( tmp_id_V_fu_196 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_id_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_last_V_blk_n);
    sensitive << ( out_V_last_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_last_V_din);
    sensitive << ( in_V_last_V5_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_last_V_2_reg_474 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( tmp_last_V_fu_208 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_last_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_user_V_blk_n);
    sensitive << ( out_V_user_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_user_V_din);
    sensitive << ( in_V_user_V4_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_user_V_4_reg_469 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( tmp_user_V_fu_204 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_user_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln841_reg_512 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_Result_s_fu_386_p5);
    sensitive << ( tmp_data_V_9_reg_454 );
    sensitive << ( tmp_fu_379_p3 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_select_ln821_fu_355_p3);
    sensitive << ( icmp_ln821_reg_487 );
    sensitive << ( Nc_fu_347_p3 );

    SC_METHOD(thread_select_ln824_fu_372_p3);
    sensitive << ( Nc_2_reg_479 );
    sensitive << ( and_ln824_fu_367_p2 );
    sensitive << ( select_ln821_fu_355_p3 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_16_fu_310_p4);
    sensitive << ( in_V_data_V1_dout );

    SC_METHOD(thread_tmp_1_fu_337_p4);
    sensitive << ( add_ln827_fu_332_p2 );

    SC_METHOD(thread_tmp_fu_379_p3);
    sensitive << ( Nc_2_reg_479 );
    sensitive << ( select_ln824_fu_372_p3 );

    SC_METHOD(thread_trunc_ln825_fu_306_p1);
    sensitive << ( in_V_data_V1_dout );

    SC_METHOD(thread_xor_ln821_fu_362_p2);
    sensitive << ( icmp_ln821_reg_487 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( io_acc_block_signal_op10 );
    sensitive << ( io_acc_block_signal_op44 );
    sensitive << ( icmp_ln836_fu_398_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AttentionMatmulQuant_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, in_V_data_V1_dout, "(port)in_V_data_V1_dout");
    sc_trace(mVcdFile, in_V_data_V1_empty_n, "(port)in_V_data_V1_empty_n");
    sc_trace(mVcdFile, in_V_data_V1_read, "(port)in_V_data_V1_read");
    sc_trace(mVcdFile, in_V_id_V2_dout, "(port)in_V_id_V2_dout");
    sc_trace(mVcdFile, in_V_id_V2_empty_n, "(port)in_V_id_V2_empty_n");
    sc_trace(mVcdFile, in_V_id_V2_read, "(port)in_V_id_V2_read");
    sc_trace(mVcdFile, in_V_dest_V3_dout, "(port)in_V_dest_V3_dout");
    sc_trace(mVcdFile, in_V_dest_V3_empty_n, "(port)in_V_dest_V3_empty_n");
    sc_trace(mVcdFile, in_V_dest_V3_read, "(port)in_V_dest_V3_read");
    sc_trace(mVcdFile, in_V_user_V4_dout, "(port)in_V_user_V4_dout");
    sc_trace(mVcdFile, in_V_user_V4_empty_n, "(port)in_V_user_V4_empty_n");
    sc_trace(mVcdFile, in_V_user_V4_read, "(port)in_V_user_V4_read");
    sc_trace(mVcdFile, in_V_last_V5_dout, "(port)in_V_last_V5_dout");
    sc_trace(mVcdFile, in_V_last_V5_empty_n, "(port)in_V_last_V5_empty_n");
    sc_trace(mVcdFile, in_V_last_V5_read, "(port)in_V_last_V5_read");
    sc_trace(mVcdFile, out_V_data_V_din, "(port)out_V_data_V_din");
    sc_trace(mVcdFile, out_V_data_V_full_n, "(port)out_V_data_V_full_n");
    sc_trace(mVcdFile, out_V_data_V_write, "(port)out_V_data_V_write");
    sc_trace(mVcdFile, out_V_id_V_din, "(port)out_V_id_V_din");
    sc_trace(mVcdFile, out_V_id_V_full_n, "(port)out_V_id_V_full_n");
    sc_trace(mVcdFile, out_V_id_V_write, "(port)out_V_id_V_write");
    sc_trace(mVcdFile, out_V_dest_V_din, "(port)out_V_dest_V_din");
    sc_trace(mVcdFile, out_V_dest_V_full_n, "(port)out_V_dest_V_full_n");
    sc_trace(mVcdFile, out_V_dest_V_write, "(port)out_V_dest_V_write");
    sc_trace(mVcdFile, out_V_user_V_din, "(port)out_V_user_V_din");
    sc_trace(mVcdFile, out_V_user_V_full_n, "(port)out_V_user_V_full_n");
    sc_trace(mVcdFile, out_V_user_V_write, "(port)out_V_user_V_write");
    sc_trace(mVcdFile, out_V_last_V_din, "(port)out_V_last_V_din");
    sc_trace(mVcdFile, out_V_last_V_full_n, "(port)out_V_last_V_full_n");
    sc_trace(mVcdFile, out_V_last_V_write, "(port)out_V_last_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, in_V_data_V1_blk_n, "in_V_data_V1_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln841_reg_512, "icmp_ln841_reg_512");
    sc_trace(mVcdFile, in_V_id_V2_blk_n, "in_V_id_V2_blk_n");
    sc_trace(mVcdFile, in_V_dest_V3_blk_n, "in_V_dest_V3_blk_n");
    sc_trace(mVcdFile, in_V_user_V4_blk_n, "in_V_user_V4_blk_n");
    sc_trace(mVcdFile, in_V_last_V5_blk_n, "in_V_last_V5_blk_n");
    sc_trace(mVcdFile, out_V_data_V_blk_n, "out_V_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, out_V_id_V_blk_n, "out_V_id_V_blk_n");
    sc_trace(mVcdFile, out_V_dest_V_blk_n, "out_V_dest_V_blk_n");
    sc_trace(mVcdFile, out_V_user_V_blk_n, "out_V_user_V_blk_n");
    sc_trace(mVcdFile, out_V_last_V_blk_n, "out_V_last_V_blk_n");
    sc_trace(mVcdFile, i_0_reg_246, "i_0_reg_246");
    sc_trace(mVcdFile, tmp_data_V_9_reg_454, "tmp_data_V_9_reg_454");
    sc_trace(mVcdFile, io_acc_block_signal_op10, "io_acc_block_signal_op10");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_id_V_2_reg_459, "tmp_id_V_2_reg_459");
    sc_trace(mVcdFile, tmp_dest_V_2_reg_464, "tmp_dest_V_2_reg_464");
    sc_trace(mVcdFile, tmp_user_V_4_reg_469, "tmp_user_V_4_reg_469");
    sc_trace(mVcdFile, tmp_last_V_2_reg_474, "tmp_last_V_2_reg_474");
    sc_trace(mVcdFile, Nc_2_fu_302_p1, "Nc_2_fu_302_p1");
    sc_trace(mVcdFile, Nc_2_reg_479, "Nc_2_reg_479");
    sc_trace(mVcdFile, icmp_ln821_fu_320_p2, "icmp_ln821_fu_320_p2");
    sc_trace(mVcdFile, icmp_ln821_reg_487, "icmp_ln821_reg_487");
    sc_trace(mVcdFile, icmp_ln824_fu_326_p2, "icmp_ln824_fu_326_p2");
    sc_trace(mVcdFile, icmp_ln824_reg_493, "icmp_ln824_reg_493");
    sc_trace(mVcdFile, select_ln824_fu_372_p3, "select_ln824_fu_372_p3");
    sc_trace(mVcdFile, select_ln824_reg_498, "select_ln824_reg_498");
    sc_trace(mVcdFile, io_acc_block_signal_op44, "io_acc_block_signal_op44");
    sc_trace(mVcdFile, icmp_ln836_fu_398_p2, "icmp_ln836_fu_398_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, io_acc_block_signal_op60, "io_acc_block_signal_op60");
    sc_trace(mVcdFile, io_acc_block_signal_op62, "io_acc_block_signal_op62");
    sc_trace(mVcdFile, io_acc_block_signal_op68, "io_acc_block_signal_op68");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_403_p2, "i_fu_403_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, icmp_ln841_fu_409_p2, "icmp_ln841_fu_409_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, tmp_id_V_fu_196, "tmp_id_V_fu_196");
    sc_trace(mVcdFile, tmp_dest_V_fu_200, "tmp_dest_V_fu_200");
    sc_trace(mVcdFile, tmp_user_V_fu_204, "tmp_user_V_fu_204");
    sc_trace(mVcdFile, tmp_last_V_fu_208, "tmp_last_V_fu_208");
    sc_trace(mVcdFile, p_Result_s_fu_386_p5, "p_Result_s_fu_386_p5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_16_fu_310_p4, "tmp_16_fu_310_p4");
    sc_trace(mVcdFile, trunc_ln825_fu_306_p1, "trunc_ln825_fu_306_p1");
    sc_trace(mVcdFile, add_ln827_fu_332_p2, "add_ln827_fu_332_p2");
    sc_trace(mVcdFile, tmp_1_fu_337_p4, "tmp_1_fu_337_p4");
    sc_trace(mVcdFile, Nc_fu_347_p3, "Nc_fu_347_p3");
    sc_trace(mVcdFile, xor_ln821_fu_362_p2, "xor_ln821_fu_362_p2");
    sc_trace(mVcdFile, and_ln824_fu_367_p2, "and_ln824_fu_367_p2");
    sc_trace(mVcdFile, select_ln821_fu_355_p3, "select_ln821_fu_355_p3");
    sc_trace(mVcdFile, tmp_fu_379_p3, "tmp_fu_379_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

AttentionMatmulQuant::~AttentionMatmulQuant() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AttentionMatmulQuant::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln836_fu_398_p2.read()))) {
        i_0_reg_246 = i_fu_403_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
        i_0_reg_246 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read())))) {
        Nc_2_reg_479 = Nc_2_fu_302_p1.read();
        icmp_ln821_reg_487 = icmp_ln821_fu_320_p2.read();
        icmp_ln824_reg_493 = icmp_ln824_fu_326_p2.read();
        tmp_data_V_9_reg_454 = in_V_data_V1_dout.read();
        tmp_dest_V_2_reg_464 = in_V_dest_V3_dout.read();
        tmp_id_V_2_reg_459 = in_V_id_V2_dout.read();
        tmp_last_V_2_reg_474 = in_V_last_V5_dout.read();
        tmp_user_V_4_reg_469 = in_V_user_V4_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln836_fu_398_p2.read()))) {
        icmp_ln841_reg_512 = icmp_ln841_fu_409_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
        select_ln824_reg_498 = select_ln824_fu_372_p3.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        tmp_dest_V_fu_200 = in_V_dest_V3_dout.read();
        tmp_id_V_fu_196 = in_V_id_V2_dout.read();
        tmp_last_V_fu_208 = in_V_last_V5_dout.read();
        tmp_user_V_fu_204 = in_V_user_V4_dout.read();
    }
}

void AttentionMatmulQuant::thread_Nc_2_fu_302_p1() {
    Nc_2_fu_302_p1 = in_V_data_V1_dout.read().range(32-1, 0);
}

void AttentionMatmulQuant::thread_Nc_fu_347_p3() {
    Nc_fu_347_p3 = esl_concat<28,4>(tmp_1_fu_337_p4.read(), ap_const_lv4_0);
}

void AttentionMatmulQuant::thread_add_ln827_fu_332_p2() {
    add_ln827_fu_332_p2 = (!ap_const_lv32_10.is_01() || !Nc_2_reg_479.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_10) + sc_biguint<32>(Nc_2_reg_479.read()));
}

void AttentionMatmulQuant::thread_and_ln824_fu_367_p2() {
    and_ln824_fu_367_p2 = (icmp_ln824_reg_493.read() & xor_ln821_fu_362_p2.read());
}

void AttentionMatmulQuant::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void AttentionMatmulQuant::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AttentionMatmulQuant::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AttentionMatmulQuant::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void AttentionMatmulQuant::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AttentionMatmulQuant::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op60.read())) || 
  (esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op62.read())) || 
  (esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op68.read()))));
}

void AttentionMatmulQuant::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op60.read())) || 
  (esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op62.read())) || 
  (esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op68.read()))));
}

void AttentionMatmulQuant::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op60.read())) || 
  (esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op62.read())) || 
  (esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op68.read()))));
}

void AttentionMatmulQuant::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()));
}

void AttentionMatmulQuant::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AttentionMatmulQuant::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op60.read())) || (esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op62.read())) || (esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op68.read())));
}

void AttentionMatmulQuant::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln836_fu_398_p2.read())) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AttentionMatmulQuant::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AttentionMatmulQuant::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void AttentionMatmulQuant::thread_i_fu_403_p2() {
    i_fu_403_p2 = (!i_0_reg_246.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_reg_246.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AttentionMatmulQuant::thread_icmp_ln821_fu_320_p2() {
    icmp_ln821_fu_320_p2 = (!tmp_16_fu_310_p4.read().is_01() || !ap_const_lv28_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_16_fu_310_p4.read() == ap_const_lv28_0);
}

void AttentionMatmulQuant::thread_icmp_ln824_fu_326_p2() {
    icmp_ln824_fu_326_p2 = (!trunc_ln825_fu_306_p1.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln825_fu_306_p1.read() == ap_const_lv4_0);
}

void AttentionMatmulQuant::thread_icmp_ln836_fu_398_p2() {
    icmp_ln836_fu_398_p2 = (!i_0_reg_246.read().is_01() || !select_ln824_reg_498.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_246.read() == select_ln824_reg_498.read());
}

void AttentionMatmulQuant::thread_icmp_ln841_fu_409_p2() {
    icmp_ln841_fu_409_p2 = (!i_0_reg_246.read().is_01() || !Nc_2_reg_479.read().is_01())? sc_lv<1>(): (sc_biguint<32>(i_0_reg_246.read()) < sc_biguint<32>(Nc_2_reg_479.read()));
}

void AttentionMatmulQuant::thread_in_V_data_V1_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)))) {
        in_V_data_V1_blk_n = in_V_data_V1_empty_n.read();
    } else {
        in_V_data_V1_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_in_V_data_V1_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_data_V1_read = ap_const_logic_1;
    } else {
        in_V_data_V1_read = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_in_V_dest_V3_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)))) {
        in_V_dest_V3_blk_n = in_V_dest_V3_empty_n.read();
    } else {
        in_V_dest_V3_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_in_V_dest_V3_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_dest_V3_read = ap_const_logic_1;
    } else {
        in_V_dest_V3_read = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_in_V_id_V2_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)))) {
        in_V_id_V2_blk_n = in_V_id_V2_empty_n.read();
    } else {
        in_V_id_V2_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_in_V_id_V2_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_id_V2_read = ap_const_logic_1;
    } else {
        in_V_id_V2_read = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_in_V_last_V5_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)))) {
        in_V_last_V5_blk_n = in_V_last_V5_empty_n.read();
    } else {
        in_V_last_V5_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_in_V_last_V5_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_last_V5_read = ap_const_logic_1;
    } else {
        in_V_last_V5_read = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_in_V_user_V4_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)))) {
        in_V_user_V4_blk_n = in_V_user_V4_empty_n.read();
    } else {
        in_V_user_V4_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_in_V_user_V4_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_user_V4_read = ap_const_logic_1;
    } else {
        in_V_user_V4_read = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_io_acc_block_signal_op10() {
    io_acc_block_signal_op10 = (in_V_data_V1_empty_n.read() & in_V_id_V2_empty_n.read() & in_V_dest_V3_empty_n.read() & in_V_user_V4_empty_n.read() & in_V_last_V5_empty_n.read());
}

void AttentionMatmulQuant::thread_io_acc_block_signal_op44() {
    io_acc_block_signal_op44 = (out_V_data_V_full_n.read() & out_V_id_V_full_n.read() & out_V_dest_V_full_n.read() & out_V_user_V_full_n.read() & out_V_last_V_full_n.read());
}

void AttentionMatmulQuant::thread_io_acc_block_signal_op60() {
    io_acc_block_signal_op60 = (out_V_data_V_full_n.read() & out_V_id_V_full_n.read() & out_V_dest_V_full_n.read() & out_V_user_V_full_n.read() & out_V_last_V_full_n.read());
}

void AttentionMatmulQuant::thread_io_acc_block_signal_op62() {
    io_acc_block_signal_op62 = (in_V_data_V1_empty_n.read() & in_V_id_V2_empty_n.read() & in_V_dest_V3_empty_n.read() & in_V_user_V4_empty_n.read() & in_V_last_V5_empty_n.read());
}

void AttentionMatmulQuant::thread_io_acc_block_signal_op68() {
    io_acc_block_signal_op68 = (out_V_data_V_full_n.read() & out_V_id_V_full_n.read() & out_V_dest_V_full_n.read() & out_V_user_V_full_n.read() & out_V_last_V_full_n.read());
}

void AttentionMatmulQuant::thread_out_V_data_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0)))) {
        out_V_data_V_blk_n = out_V_data_V_full_n.read();
    } else {
        out_V_data_V_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_out_V_data_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_data_V_din = in_V_data_V1_dout.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_data_V_din = ap_const_lv512_lc_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
        out_V_data_V_din = p_Result_s_fu_386_p5.read();
    } else {
        out_V_data_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void AttentionMatmulQuant::thread_out_V_data_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_data_V_write = ap_const_logic_1;
    } else {
        out_V_data_V_write = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_out_V_dest_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0)))) {
        out_V_dest_V_blk_n = out_V_dest_V_full_n.read();
    } else {
        out_V_dest_V_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_out_V_dest_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_dest_V_din = in_V_dest_V3_dout.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_dest_V_din = tmp_dest_V_fu_200.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
        out_V_dest_V_din = tmp_dest_V_2_reg_464.read();
    } else {
        out_V_dest_V_din =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AttentionMatmulQuant::thread_out_V_dest_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_dest_V_write = ap_const_logic_1;
    } else {
        out_V_dest_V_write = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_out_V_id_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0)))) {
        out_V_id_V_blk_n = out_V_id_V_full_n.read();
    } else {
        out_V_id_V_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_out_V_id_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_id_V_din = in_V_id_V2_dout.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_id_V_din = tmp_id_V_fu_196.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
        out_V_id_V_din = tmp_id_V_2_reg_459.read();
    } else {
        out_V_id_V_din =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AttentionMatmulQuant::thread_out_V_id_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_id_V_write = ap_const_logic_1;
    } else {
        out_V_id_V_write = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_out_V_last_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0)))) {
        out_V_last_V_blk_n = out_V_last_V_full_n.read();
    } else {
        out_V_last_V_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_out_V_last_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_last_V_din = in_V_last_V5_dout.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_last_V_din = tmp_last_V_fu_208.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
        out_V_last_V_din = tmp_last_V_2_reg_474.read();
    } else {
        out_V_last_V_din =  (sc_lv<1>) ("X");
    }
}

void AttentionMatmulQuant::thread_out_V_last_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_last_V_write = ap_const_logic_1;
    } else {
        out_V_last_V_write = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_out_V_user_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0)))) {
        out_V_user_V_blk_n = out_V_user_V_full_n.read();
    } else {
        out_V_user_V_blk_n = ap_const_logic_1;
    }
}

void AttentionMatmulQuant::thread_out_V_user_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_user_V_din = in_V_user_V4_dout.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_user_V_din = tmp_user_V_fu_204.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
        out_V_user_V_din = tmp_user_V_4_reg_469.read();
    } else {
        out_V_user_V_din =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void AttentionMatmulQuant::thread_out_V_user_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln841_reg_512.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_user_V_write = ap_const_logic_1;
    } else {
        out_V_user_V_write = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_p_Result_s_fu_386_p5() {
    p_Result_s_fu_386_p5 = esl_partset<512,512,64,32,32>(tmp_data_V_9_reg_454.read(), tmp_fu_379_p3.read(), ap_const_lv32_0, ap_const_lv32_3F);
}

void AttentionMatmulQuant::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void AttentionMatmulQuant::thread_select_ln821_fu_355_p3() {
    select_ln821_fu_355_p3 = (!icmp_ln821_reg_487.read()[0].is_01())? sc_lv<32>(): ((icmp_ln821_reg_487.read()[0].to_bool())? ap_const_lv32_10: Nc_fu_347_p3.read());
}

void AttentionMatmulQuant::thread_select_ln824_fu_372_p3() {
    select_ln824_fu_372_p3 = (!and_ln824_fu_367_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln824_fu_367_p2.read()[0].to_bool())? Nc_2_reg_479.read(): select_ln821_fu_355_p3.read());
}

void AttentionMatmulQuant::thread_start_out() {
    start_out = real_start.read();
}

void AttentionMatmulQuant::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void AttentionMatmulQuant::thread_tmp_16_fu_310_p4() {
    tmp_16_fu_310_p4 = in_V_data_V1_dout.read().range(31, 4);
}

void AttentionMatmulQuant::thread_tmp_1_fu_337_p4() {
    tmp_1_fu_337_p4 = add_ln827_fu_332_p2.read().range(31, 4);
}

void AttentionMatmulQuant::thread_tmp_fu_379_p3() {
    tmp_fu_379_p3 = esl_concat<32,32>(Nc_2_reg_479.read(), select_ln824_fu_372_p3.read());
}

void AttentionMatmulQuant::thread_trunc_ln825_fu_306_p1() {
    trunc_ln825_fu_306_p1 = in_V_data_V1_dout.read().range(4-1, 0);
}

void AttentionMatmulQuant::thread_xor_ln821_fu_362_p2() {
    xor_ln821_fu_362_p2 = (icmp_ln821_reg_487.read() ^ ap_const_lv1_1);
}

void AttentionMatmulQuant::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(io_acc_block_signal_op44.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln836_fu_398_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln836_fu_398_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

