-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_QuantAct_1_c is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_iter_r_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_iter_r_V_V_empty_n : IN STD_LOGIC;
    in_iter_r_V_V_read : OUT STD_LOGIC;
    in_iter_c_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_iter_c_V_V_empty_n : IN STD_LOGIC;
    in_iter_c_V_V_read : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_iter_r_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_iter_r_V_V_full_n : IN STD_LOGIC;
    out_iter_r_V_V_write : OUT STD_LOGIC;
    out_iter_c_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_iter_c_V_V_full_n : IN STD_LOGIC;
    out_iter_c_V_V_write : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of softmax_QuantAct_1_c is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv95_6048F5EC : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001100000010010001111010111101100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_iter_r_V_V_blk_n : STD_LOGIC;
    signal in_iter_c_V_V_blk_n : STD_LOGIC;
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1835_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_iter_r_V_V_blk_n : STD_LOGIC;
    signal out_iter_c_V_V_blk_n : STD_LOGIC;
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln1835_reg_333_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_185 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_49_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_V_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_202_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_328 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1835_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1835_reg_333_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1835_reg_333_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1835_fu_213_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln647_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln647_reg_342 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_27_1_reg_347 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_reg_367 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln798_1_reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal add_ln68_fu_287_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln68_2_fu_298_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln791_1_fu_303_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln791_fu_292_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_236_ce : STD_LOGIC;
    signal grp_fu_245_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_202_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_202_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component kernel_4_mul_32ns_64s_95_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (94 downto 0) );
    end component;



begin
    kernel_4_mul_32ns_64s_95_2_1_U775 : component kernel_4_mul_32ns_64s_95_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 95)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_236_p0,
        din1 => trunc_ln647_reg_342,
        ce => grp_fu_236_ce,
        dout => grp_fu_236_p2);

    kernel_4_mul_32ns_64s_95_2_1_U776 : component kernel_4_mul_32ns_64s_95_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 95)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_245_p0,
        din1 => p_Result_27_1_reg_347,
        ce => grp_fu_245_ce,
        dout => grp_fu_245_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1835_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_185 <= add_ln1835_fu_213_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_185 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_328 <= bound_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1835_reg_333 <= icmp_ln1835_fu_208_p2;
                icmp_ln1835_reg_333_pp0_iter1_reg <= icmp_ln1835_reg_333;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln1835_reg_333_pp0_iter2_reg <= icmp_ln1835_reg_333_pp0_iter1_reg;
                icmp_ln1835_reg_333_pp0_iter3_reg <= icmp_ln1835_reg_333_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1835_reg_333 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_27_1_reg_347 <= in_V_V_dout(127 downto 64);
                trunc_ln647_reg_342 <= trunc_ln647_fu_219_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1835_reg_333_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_15_reg_373 <= grp_fu_245_p2(65 downto 65);
                tmp_reg_362 <= grp_fu_236_p2(65 downto 65);
                trunc_ln5_reg_367 <= grp_fu_236_p2(81 downto 66);
                trunc_ln798_1_reg_378 <= grp_fu_245_p2(81 downto 66);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_V_49_reg_318 <= in_iter_c_V_V_dout;
                tmp_V_reg_323 <= in_iter_r_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln1835_fu_208_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1835_fu_208_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1835_fu_208_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1835_fu_213_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_185) + unsigned(ap_const_lv64_1));
    add_ln68_2_fu_298_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(trunc_ln798_1_reg_378));
    add_ln68_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(trunc_ln5_reg_367));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln1835_reg_333, ap_enable_reg_pp0_iter4, icmp_ln1835_reg_333_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1835_reg_333_pp0_iter3_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln1835_reg_333 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln1835_reg_333, ap_enable_reg_pp0_iter4, icmp_ln1835_reg_333_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1835_reg_333_pp0_iter3_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln1835_reg_333 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln1835_reg_333, ap_enable_reg_pp0_iter4, icmp_ln1835_reg_333_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1835_reg_333_pp0_iter3_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln1835_reg_333 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
                ap_block_state1 <= ((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, icmp_ln1835_reg_333)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln1835_reg_333 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter4_assign_proc : process(out_V_V_full_n, icmp_ln1835_reg_333_pp0_iter3_reg)
    begin
                ap_block_state7_pp0_stage0_iter4 <= ((icmp_ln1835_reg_333_pp0_iter3_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln1835_fu_208_p2)
    begin
        if ((icmp_ln1835_fu_208_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_202_p0 <= bound_fu_202_p00(32 - 1 downto 0);
    bound_fu_202_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_49_reg_318),64));
    bound_fu_202_p1 <= bound_fu_202_p10(32 - 1 downto 0);
    bound_fu_202_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_323),64));
    bound_fu_202_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_202_p0) * unsigned(bound_fu_202_p1), 64));

    grp_fu_236_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_236_ce <= ap_const_logic_1;
        else 
            grp_fu_236_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_236_p0 <= ap_const_lv95_6048F5EC(32 - 1 downto 0);

    grp_fu_245_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_245_ce <= ap_const_logic_1;
        else 
            grp_fu_245_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_245_p0 <= ap_const_lv95_6048F5EC(32 - 1 downto 0);
    icmp_ln1835_fu_208_p2 <= "1" when (indvar_flatten_reg_185 = bound_reg_328) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1835_reg_333)
    begin
        if (((icmp_ln1835_reg_333 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1835_reg_333, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1835_reg_333 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_iter_c_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_c_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_iter_c_V_V_blk_n <= in_iter_c_V_V_empty_n;
        else 
            in_iter_c_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_iter_c_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
        if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_iter_c_V_V_read <= ap_const_logic_1;
        else 
            in_iter_c_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_iter_r_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_iter_r_V_V_blk_n <= in_iter_r_V_V_empty_n;
        else 
            in_iter_r_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_iter_r_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
        if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_iter_r_V_V_read <= ap_const_logic_1;
        else 
            in_iter_r_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln1835_reg_333_pp0_iter3_reg)
    begin
        if (((icmp_ln1835_reg_333_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (select_ln791_1_fu_303_p3 & select_ln791_fu_292_p3);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln1835_reg_333_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1835_reg_333_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_iter_c_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_iter_c_V_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_iter_c_V_V_blk_n <= out_iter_c_V_V_full_n;
        else 
            out_iter_c_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_iter_c_V_V_din <= in_iter_c_V_V_dout;

    out_iter_c_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
        if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_iter_c_V_V_write <= ap_const_logic_1;
        else 
            out_iter_c_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_iter_r_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_iter_r_V_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_iter_r_V_V_blk_n <= out_iter_r_V_V_full_n;
        else 
            out_iter_r_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_iter_r_V_V_din <= in_iter_r_V_V_dout;

    out_iter_r_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_iter_r_V_V_empty_n, in_iter_c_V_V_empty_n, out_iter_r_V_V_full_n, out_iter_c_V_V_full_n)
    begin
        if ((not(((out_iter_c_V_V_full_n = ap_const_logic_0) or (out_iter_r_V_V_full_n = ap_const_logic_0) or (in_iter_c_V_V_empty_n = ap_const_logic_0) or (in_iter_r_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_iter_r_V_V_write <= ap_const_logic_1;
        else 
            out_iter_r_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln791_1_fu_303_p3 <= 
        add_ln68_2_fu_298_p2 when (tmp_15_reg_373(0) = '1') else 
        trunc_ln798_1_reg_378;
    select_ln791_fu_292_p3 <= 
        add_ln68_fu_287_p2 when (tmp_reg_362(0) = '1') else 
        trunc_ln5_reg_367;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln647_fu_219_p1 <= in_V_V_dout(64 - 1 downto 0);
end behav;
