// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AttentionMatmulQuant (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_data_V1_dout,
        in_V_data_V1_empty_n,
        in_V_data_V1_read,
        in_V_id_V2_dout,
        in_V_id_V2_empty_n,
        in_V_id_V2_read,
        in_V_dest_V3_dout,
        in_V_dest_V3_empty_n,
        in_V_dest_V3_read,
        in_V_user_V4_dout,
        in_V_user_V4_empty_n,
        in_V_user_V4_read,
        in_V_last_V5_dout,
        in_V_last_V5_empty_n,
        in_V_last_V5_read,
        out_V_data_V_din,
        out_V_data_V_full_n,
        out_V_data_V_write,
        out_V_id_V_din,
        out_V_id_V_full_n,
        out_V_id_V_write,
        out_V_dest_V_din,
        out_V_dest_V_full_n,
        out_V_dest_V_write,
        out_V_user_V_din,
        out_V_user_V_full_n,
        out_V_user_V_write,
        out_V_last_V_din,
        out_V_last_V_full_n,
        out_V_last_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [511:0] in_V_data_V1_dout;
input   in_V_data_V1_empty_n;
output   in_V_data_V1_read;
input  [7:0] in_V_id_V2_dout;
input   in_V_id_V2_empty_n;
output   in_V_id_V2_read;
input  [7:0] in_V_dest_V3_dout;
input   in_V_dest_V3_empty_n;
output   in_V_dest_V3_read;
input  [15:0] in_V_user_V4_dout;
input   in_V_user_V4_empty_n;
output   in_V_user_V4_read;
input  [0:0] in_V_last_V5_dout;
input   in_V_last_V5_empty_n;
output   in_V_last_V5_read;
output  [511:0] out_V_data_V_din;
input   out_V_data_V_full_n;
output   out_V_data_V_write;
output  [7:0] out_V_id_V_din;
input   out_V_id_V_full_n;
output   out_V_id_V_write;
output  [7:0] out_V_dest_V_din;
input   out_V_dest_V_full_n;
output   out_V_dest_V_write;
output  [15:0] out_V_user_V_din;
input   out_V_user_V_full_n;
output   out_V_user_V_write;
output  [0:0] out_V_last_V_din;
input   out_V_last_V_full_n;
output   out_V_last_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[511:0] out_V_data_V_din;
reg[7:0] out_V_id_V_din;
reg[7:0] out_V_dest_V_din;
reg[15:0] out_V_user_V_din;
reg[0:0] out_V_last_V_din;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_V_data_V1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_7_reg_514;
reg    in_V_id_V2_blk_n;
reg    in_V_dest_V3_blk_n;
reg    in_V_user_V4_blk_n;
reg    in_V_last_V5_blk_n;
reg    out_V_data_V_blk_n;
wire    ap_CS_fsm_state2;
reg    out_V_id_V_blk_n;
reg    out_V_dest_V_blk_n;
reg    out_V_user_V_blk_n;
reg    out_V_last_V_blk_n;
reg   [31:0] i_reg_248;
reg   [511:0] tmp_data_V_25_reg_456;
wire    in_V_id_V20_status;
reg    ap_block_state1;
reg   [7:0] tmp_id_V_3_reg_461;
reg   [7:0] tmp_dest_V_3_reg_466;
reg   [15:0] tmp_user_V_3_reg_471;
reg   [0:0] tmp_last_V_3_reg_476;
wire   [31:0] Nc_2_fu_304_p1;
reg   [31:0] Nc_2_reg_481;
wire   [0:0] icmp_fu_322_p2;
reg   [0:0] icmp_reg_489;
wire   [0:0] tmp_3_fu_328_p2;
reg   [0:0] tmp_3_reg_495;
wire   [31:0] val_assign_fu_374_p3;
reg   [31:0] val_assign_reg_500;
wire    out_V_id_V1_status;
wire   [0:0] exitcond_fu_400_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_1_fu_405_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_7_fu_411_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    in_V_id_V20_update;
reg    out_V_id_V1_update;
wire   [511:0] p_Result_s_fu_388_p5;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] tmp_last_V_fu_198;
reg   [15:0] tmp_user_V_fu_202;
reg   [7:0] tmp_dest_V_fu_206;
reg   [7:0] tmp_id_V_fu_210;
wire   [27:0] tmp_22_fu_312_p4;
wire   [3:0] tmp_21_fu_308_p1;
wire   [31:0] tmp_4_fu_334_p2;
wire   [27:0] tmp_6_fu_339_p4;
wire   [31:0] Nc_fu_349_p3;
wire   [0:0] sel_tmp1_fu_364_p2;
wire   [0:0] sel_tmp2_fu_369_p2;
wire   [31:0] sel_tmp_fu_357_p3;
wire   [63:0] tmp_fu_381_p3;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_400_p2 == 1'd0))) begin
        i_reg_248 <= i_1_fu_405_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        i_reg_248 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_id_V20_status == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Nc_2_reg_481 <= Nc_2_fu_304_p1;
        icmp_reg_489 <= icmp_fu_322_p2;
        tmp_3_reg_495 <= tmp_3_fu_328_p2;
        tmp_data_V_25_reg_456 <= in_V_data_V1_dout;
        tmp_dest_V_3_reg_466 <= in_V_dest_V3_dout;
        tmp_id_V_3_reg_461 <= in_V_id_V2_dout;
        tmp_last_V_3_reg_476 <= in_V_last_V5_dout;
        tmp_user_V_3_reg_471 <= in_V_user_V4_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_400_p2 == 1'd0))) begin
        tmp_7_reg_514 <= tmp_7_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_7_reg_514 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((in_V_id_V20_status == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_dest_V_fu_206 <= in_V_dest_V3_dout;
        tmp_id_V_fu_210 <= in_V_id_V2_dout;
        tmp_last_V_fu_198 <= in_V_last_V5_dout;
        tmp_user_V_fu_202 <= in_V_user_V4_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        val_assign_reg_500 <= val_assign_fu_374_p3;
    end
end

always @ (*) begin
    if ((exitcond_fu_400_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_data_V1_blk_n = in_V_data_V1_empty_n;
    end else begin
        in_V_data_V1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_dest_V3_blk_n = in_V_dest_V3_empty_n;
    end else begin
        in_V_dest_V3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_7_reg_514 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((in_V_id_V20_status == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_id_V20_update = 1'b1;
    end else begin
        in_V_id_V20_update = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_id_V2_blk_n = in_V_id_V2_empty_n;
    end else begin
        in_V_id_V2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_last_V5_blk_n = in_V_last_V5_empty_n;
    end else begin
        in_V_last_V5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_user_V4_blk_n = in_V_user_V4_empty_n;
    end else begin
        in_V_user_V4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_data_V_blk_n = out_V_data_V_full_n;
    end else begin
        out_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_data_V_din = in_V_data_V1_dout;
    end else if (((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_data_V_din = 512'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        out_V_data_V_din = p_Result_s_fu_388_p5;
    end else begin
        out_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_dest_V_blk_n = out_V_dest_V_full_n;
    end else begin
        out_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_dest_V_din = in_V_dest_V3_dout;
    end else if (((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_dest_V_din = tmp_dest_V_fu_206;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        out_V_dest_V_din = tmp_dest_V_3_reg_466;
    end else begin
        out_V_dest_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_7_reg_514 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_7_reg_514 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1)))) begin
        out_V_id_V1_update = 1'b1;
    end else begin
        out_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_id_V_blk_n = out_V_id_V_full_n;
    end else begin
        out_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_id_V_din = in_V_id_V2_dout;
    end else if (((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_id_V_din = tmp_id_V_fu_210;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        out_V_id_V_din = tmp_id_V_3_reg_461;
    end else begin
        out_V_id_V_din = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_last_V_blk_n = out_V_last_V_full_n;
    end else begin
        out_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_last_V_din = in_V_last_V5_dout;
    end else if (((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_last_V_din = tmp_last_V_fu_198;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        out_V_last_V_din = tmp_last_V_3_reg_476;
    end else begin
        out_V_last_V_din = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_user_V_blk_n = out_V_user_V_full_n;
    end else begin
        out_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_7_reg_514 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_user_V_din = in_V_user_V4_dout;
    end else if (((tmp_7_reg_514 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_user_V_din = tmp_user_V_fu_202;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        out_V_user_V_din = tmp_user_V_3_reg_471;
    end else begin
        out_V_user_V_din = 'bx;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_V_id_V20_status == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_fu_400_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_fu_400_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Nc_2_fu_304_p1 = in_V_data_V1_dout[31:0];

assign Nc_fu_349_p3 = {{tmp_6_fu_339_p4}, {4'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_7_reg_514 == 1'd0) & (out_V_id_V1_status == 1'b0)) | ((tmp_7_reg_514 == 1'd1) & (out_V_id_V1_status == 1'b0)) | ((tmp_7_reg_514 == 1'd1) & (in_V_id_V20_status == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_7_reg_514 == 1'd0) & (out_V_id_V1_status == 1'b0)) | ((tmp_7_reg_514 == 1'd1) & (out_V_id_V1_status == 1'b0)) | ((tmp_7_reg_514 == 1'd1) & (in_V_id_V20_status == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_7_reg_514 == 1'd0) & (out_V_id_V1_status == 1'b0)) | ((tmp_7_reg_514 == 1'd1) & (out_V_id_V1_status == 1'b0)) | ((tmp_7_reg_514 == 1'd1) & (in_V_id_V20_status == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((in_V_id_V20_status == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((tmp_7_reg_514 == 1'd0) & (out_V_id_V1_status == 1'b0)) | ((tmp_7_reg_514 == 1'd1) & (out_V_id_V1_status == 1'b0)) | ((tmp_7_reg_514 == 1'd1) & (in_V_id_V20_status == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_fu_400_p2 = ((i_reg_248 == val_assign_reg_500) ? 1'b1 : 1'b0);

assign i_1_fu_405_p2 = (i_reg_248 + 32'd1);

assign icmp_fu_322_p2 = ((tmp_22_fu_312_p4 == 28'd0) ? 1'b1 : 1'b0);

assign in_V_data_V1_read = in_V_id_V20_update;

assign in_V_dest_V3_read = in_V_id_V20_update;

assign in_V_id_V20_status = (in_V_user_V4_empty_n & in_V_last_V5_empty_n & in_V_id_V2_empty_n & in_V_dest_V3_empty_n & in_V_data_V1_empty_n);

assign in_V_id_V2_read = in_V_id_V20_update;

assign in_V_last_V5_read = in_V_id_V20_update;

assign in_V_user_V4_read = in_V_id_V20_update;

assign out_V_data_V_write = out_V_id_V1_update;

assign out_V_dest_V_write = out_V_id_V1_update;

assign out_V_id_V1_status = (out_V_user_V_full_n & out_V_last_V_full_n & out_V_id_V_full_n & out_V_dest_V_full_n & out_V_data_V_full_n);

assign out_V_id_V_write = out_V_id_V1_update;

assign out_V_last_V_write = out_V_id_V1_update;

assign out_V_user_V_write = out_V_id_V1_update;

assign p_Result_s_fu_388_p5 = {{tmp_data_V_25_reg_456[511:64]}, {tmp_fu_381_p3}};

assign sel_tmp1_fu_364_p2 = (icmp_reg_489 ^ 1'd1);

assign sel_tmp2_fu_369_p2 = (tmp_3_reg_495 & sel_tmp1_fu_364_p2);

assign sel_tmp_fu_357_p3 = ((icmp_reg_489[0:0] === 1'b1) ? 32'd16 : Nc_fu_349_p3);

assign start_out = real_start;

assign tmp_21_fu_308_p1 = in_V_data_V1_dout[3:0];

assign tmp_22_fu_312_p4 = {{in_V_data_V1_dout[31:4]}};

assign tmp_3_fu_328_p2 = ((tmp_21_fu_308_p1 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_334_p2 = (32'd16 + Nc_2_reg_481);

assign tmp_6_fu_339_p4 = {{tmp_4_fu_334_p2[31:4]}};

assign tmp_7_fu_411_p2 = ((i_reg_248 < Nc_2_reg_481) ? 1'b1 : 1'b0);

assign tmp_fu_381_p3 = {{Nc_2_reg_481}, {val_assign_fu_374_p3}};

assign val_assign_fu_374_p3 = ((sel_tmp2_fu_369_p2[0:0] === 1'b1) ? Nc_2_reg_481 : sel_tmp_fu_357_p3);

endmodule //AttentionMatmulQuant
