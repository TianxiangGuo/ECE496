// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AttentionMatmulArbit (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TID,
        in_r_TDEST,
        in_r_TUSER,
        in_r_TLAST,
        out_0_V_data_V_din,
        out_0_V_data_V_full_n,
        out_0_V_data_V_write,
        out_1_V_data_V_din,
        out_1_V_data_V_full_n,
        out_1_V_data_V_write,
        out_0_V_id_V_din,
        out_0_V_id_V_full_n,
        out_0_V_id_V_write,
        out_1_V_id_V_din,
        out_1_V_id_V_full_n,
        out_1_V_id_V_write,
        out_0_V_dest_V_din,
        out_0_V_dest_V_full_n,
        out_0_V_dest_V_write,
        out_1_V_dest_V_din,
        out_1_V_dest_V_full_n,
        out_1_V_dest_V_write,
        out_0_V_user_V_din,
        out_0_V_user_V_full_n,
        out_0_V_user_V_write,
        out_1_V_user_V_din,
        out_1_V_user_V_full_n,
        out_1_V_user_V_write,
        out_0_V_last_V_din,
        out_0_V_last_V_full_n,
        out_0_V_last_V_write,
        out_1_V_last_V_din,
        out_1_V_last_V_full_n,
        out_1_V_last_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [511:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [7:0] in_r_TID;
input  [7:0] in_r_TDEST;
input  [15:0] in_r_TUSER;
input  [0:0] in_r_TLAST;
output  [511:0] out_0_V_data_V_din;
input   out_0_V_data_V_full_n;
output   out_0_V_data_V_write;
output  [511:0] out_1_V_data_V_din;
input   out_1_V_data_V_full_n;
output   out_1_V_data_V_write;
output  [7:0] out_0_V_id_V_din;
input   out_0_V_id_V_full_n;
output   out_0_V_id_V_write;
output  [7:0] out_1_V_id_V_din;
input   out_1_V_id_V_full_n;
output   out_1_V_id_V_write;
output  [7:0] out_0_V_dest_V_din;
input   out_0_V_dest_V_full_n;
output   out_0_V_dest_V_write;
output  [7:0] out_1_V_dest_V_din;
input   out_1_V_dest_V_full_n;
output   out_1_V_dest_V_write;
output  [15:0] out_0_V_user_V_din;
input   out_0_V_user_V_full_n;
output   out_0_V_user_V_write;
output  [15:0] out_1_V_user_V_din;
input   out_1_V_user_V_full_n;
output   out_1_V_user_V_write;
output  [0:0] out_0_V_last_V_din;
input   out_0_V_last_V_full_n;
output   out_0_V_last_V_write;
output  [0:0] out_1_V_last_V_din;
input   out_1_V_last_V_full_n;
output   out_1_V_last_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[511:0] out_0_V_data_V_din;
reg[511:0] out_1_V_data_V_din;
reg[7:0] out_0_V_id_V_din;
reg[7:0] out_1_V_id_V_din;
reg[7:0] out_0_V_dest_V_din;
reg[7:0] out_1_V_dest_V_din;
reg[15:0] out_0_V_user_V_din;
reg[15:0] out_1_V_user_V_din;
reg[0:0] out_0_V_last_V_din;
reg[0:0] out_1_V_last_V_din;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [511:0] in_V_data_V_0_data_out;
wire    in_V_data_V_0_vld_in;
wire    in_V_data_V_0_vld_out;
wire    in_V_data_V_0_ack_in;
reg    in_V_data_V_0_ack_out;
reg   [511:0] in_V_data_V_0_payload_A;
reg   [511:0] in_V_data_V_0_payload_B;
reg    in_V_data_V_0_sel_rd;
reg    in_V_data_V_0_sel_wr;
wire    in_V_data_V_0_sel;
wire    in_V_data_V_0_load_A;
wire    in_V_data_V_0_load_B;
reg   [1:0] in_V_data_V_0_state;
wire    in_V_data_V_0_state_cmp_full;
reg   [7:0] in_V_id_V_0_data_out;
wire    in_V_id_V_0_vld_in;
wire    in_V_id_V_0_vld_out;
wire    in_V_id_V_0_ack_in;
reg    in_V_id_V_0_ack_out;
reg   [7:0] in_V_id_V_0_payload_A;
reg   [7:0] in_V_id_V_0_payload_B;
reg    in_V_id_V_0_sel_rd;
reg    in_V_id_V_0_sel_wr;
wire    in_V_id_V_0_sel;
wire    in_V_id_V_0_load_A;
wire    in_V_id_V_0_load_B;
reg   [1:0] in_V_id_V_0_state;
wire    in_V_id_V_0_state_cmp_full;
reg   [7:0] in_V_dest_V_0_data_out;
wire    in_V_dest_V_0_vld_in;
wire    in_V_dest_V_0_vld_out;
wire    in_V_dest_V_0_ack_in;
reg    in_V_dest_V_0_ack_out;
reg   [7:0] in_V_dest_V_0_payload_A;
reg   [7:0] in_V_dest_V_0_payload_B;
reg    in_V_dest_V_0_sel_rd;
reg    in_V_dest_V_0_sel_wr;
wire    in_V_dest_V_0_sel;
wire    in_V_dest_V_0_load_A;
wire    in_V_dest_V_0_load_B;
reg   [1:0] in_V_dest_V_0_state;
wire    in_V_dest_V_0_state_cmp_full;
reg   [15:0] in_V_user_V_0_data_out;
wire    in_V_user_V_0_vld_in;
wire    in_V_user_V_0_vld_out;
wire    in_V_user_V_0_ack_in;
reg    in_V_user_V_0_ack_out;
reg   [15:0] in_V_user_V_0_payload_A;
reg   [15:0] in_V_user_V_0_payload_B;
reg    in_V_user_V_0_sel_rd;
reg    in_V_user_V_0_sel_wr;
wire    in_V_user_V_0_sel;
wire    in_V_user_V_0_load_A;
wire    in_V_user_V_0_load_B;
reg   [1:0] in_V_user_V_0_state;
wire    in_V_user_V_0_state_cmp_full;
reg   [0:0] in_V_last_V_0_data_out;
wire    in_V_last_V_0_vld_in;
wire    in_V_last_V_0_vld_out;
wire    in_V_last_V_0_ack_in;
reg    in_V_last_V_0_ack_out;
reg   [0:0] in_V_last_V_0_payload_A;
reg   [0:0] in_V_last_V_0_payload_B;
reg    in_V_last_V_0_sel_rd;
reg    in_V_last_V_0_sel_wr;
wire    in_V_last_V_0_sel;
wire    in_V_last_V_0_load_A;
wire    in_V_last_V_0_load_B;
reg   [1:0] in_V_last_V_0_state;
wire    in_V_last_V_0_state_cmp_full;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_300_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond_fu_324_p2;
reg    out_0_V_data_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_849_reg_349;
wire   [0:0] tmp_849_fu_316_p3;
reg    out_1_V_data_V_blk_n;
reg    out_0_V_id_V_blk_n;
reg    out_1_V_id_V_blk_n;
reg    out_0_V_dest_V_blk_n;
reg    out_1_V_dest_V_blk_n;
reg    out_0_V_user_V_blk_n;
reg    out_1_V_user_V_blk_n;
reg    out_0_V_last_V_blk_n;
reg    out_1_V_last_V_blk_n;
reg   [31:0] i_reg_259;
wire    out_0_V_id_V1_status;
reg    ap_predicate_op32_write_state2;
wire    out_1_V_id_V1_status;
reg    ap_predicate_op34_write_state2;
reg    ap_block_state2;
wire   [1:0] iter_1_fu_306_p2;
reg   [1:0] iter_1_reg_339;
wire   [31:0] tmp_848_fu_312_p1;
reg   [31:0] tmp_848_reg_344;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_2_fu_329_p2;
reg   [511:0] tmp_data_V_14_reg_362;
reg   [7:0] tmp_id_V_5_reg_368;
reg   [7:0] tmp_dest_V_5_reg_374;
reg   [15:0] tmp_user_V_5_reg_380;
reg   [0:0] tmp_last_V_5_reg_386;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [1:0] iter_reg_248;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
reg    out_0_V_id_V1_update;
reg    ap_block_pp0_stage0_01001;
reg    out_1_V_id_V1_update;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 in_V_data_V_0_sel_rd = 1'b0;
#0 in_V_data_V_0_sel_wr = 1'b0;
#0 in_V_data_V_0_state = 2'd0;
#0 in_V_id_V_0_sel_rd = 1'b0;
#0 in_V_id_V_0_sel_wr = 1'b0;
#0 in_V_id_V_0_state = 2'd0;
#0 in_V_dest_V_0_sel_rd = 1'b0;
#0 in_V_dest_V_0_sel_wr = 1'b0;
#0 in_V_dest_V_0_state = 2'd0;
#0 in_V_user_V_0_sel_rd = 1'b0;
#0 in_V_user_V_0_sel_wr = 1'b0;
#0 in_V_user_V_0_state = 2'd0;
#0 in_V_last_V_0_sel_rd = 1'b0;
#0 in_V_last_V_0_sel_wr = 1'b0;
#0 in_V_last_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_out == 1'b1) & (in_V_data_V_0_vld_out == 1'b1))) begin
            in_V_data_V_0_sel_rd <= ~in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_in == 1'b1) & (in_V_data_V_0_vld_in == 1'b1))) begin
            in_V_data_V_0_sel_wr <= ~in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd2;
        end else if ((((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd1;
        end else if (((~((in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)) & ~((in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)) & (in_V_data_V_0_state == 2'd3)) | ((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b1)) | ((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd3;
        end else begin
            in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_dest_V_0_ack_out == 1'b1) & (in_V_dest_V_0_vld_out == 1'b1))) begin
            in_V_dest_V_0_sel_rd <= ~in_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_dest_V_0_ack_in == 1'b1) & (in_V_dest_V_0_vld_in == 1'b1))) begin
            in_V_dest_V_0_sel_wr <= ~in_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_dest_V_0_state == 2'd2) & (in_V_dest_V_0_vld_in == 1'b0)) | ((in_V_dest_V_0_state == 2'd3) & (in_V_dest_V_0_vld_in == 1'b0) & (in_V_dest_V_0_ack_out == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd2;
        end else if ((((in_V_dest_V_0_state == 2'd1) & (in_V_dest_V_0_ack_out == 1'b0)) | ((in_V_dest_V_0_state == 2'd3) & (in_V_dest_V_0_ack_out == 1'b0) & (in_V_dest_V_0_vld_in == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd1;
        end else if (((~((in_V_dest_V_0_vld_in == 1'b0) & (in_V_dest_V_0_ack_out == 1'b1)) & ~((in_V_dest_V_0_ack_out == 1'b0) & (in_V_dest_V_0_vld_in == 1'b1)) & (in_V_dest_V_0_state == 2'd3)) | ((in_V_dest_V_0_state == 2'd1) & (in_V_dest_V_0_ack_out == 1'b1)) | ((in_V_dest_V_0_state == 2'd2) & (in_V_dest_V_0_vld_in == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd3;
        end else begin
            in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_id_V_0_ack_out == 1'b1) & (in_V_id_V_0_vld_out == 1'b1))) begin
            in_V_id_V_0_sel_rd <= ~in_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_id_V_0_ack_in == 1'b1) & (in_V_id_V_0_vld_in == 1'b1))) begin
            in_V_id_V_0_sel_wr <= ~in_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_id_V_0_state == 2'd2) & (in_V_id_V_0_vld_in == 1'b0)) | ((in_V_id_V_0_state == 2'd3) & (in_V_id_V_0_vld_in == 1'b0) & (in_V_id_V_0_ack_out == 1'b1)))) begin
            in_V_id_V_0_state <= 2'd2;
        end else if ((((in_V_id_V_0_state == 2'd1) & (in_V_id_V_0_ack_out == 1'b0)) | ((in_V_id_V_0_state == 2'd3) & (in_V_id_V_0_ack_out == 1'b0) & (in_V_id_V_0_vld_in == 1'b1)))) begin
            in_V_id_V_0_state <= 2'd1;
        end else if (((~((in_V_id_V_0_vld_in == 1'b0) & (in_V_id_V_0_ack_out == 1'b1)) & ~((in_V_id_V_0_ack_out == 1'b0) & (in_V_id_V_0_vld_in == 1'b1)) & (in_V_id_V_0_state == 2'd3)) | ((in_V_id_V_0_state == 2'd1) & (in_V_id_V_0_ack_out == 1'b1)) | ((in_V_id_V_0_state == 2'd2) & (in_V_id_V_0_vld_in == 1'b1)))) begin
            in_V_id_V_0_state <= 2'd3;
        end else begin
            in_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_last_V_0_ack_out == 1'b1) & (in_V_last_V_0_vld_out == 1'b1))) begin
            in_V_last_V_0_sel_rd <= ~in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_last_V_0_ack_in == 1'b1) & (in_V_last_V_0_vld_in == 1'b1))) begin
            in_V_last_V_0_sel_wr <= ~in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_last_V_0_state == 2'd2) & (in_V_last_V_0_vld_in == 1'b0)) | ((in_V_last_V_0_state == 2'd3) & (in_V_last_V_0_vld_in == 1'b0) & (in_V_last_V_0_ack_out == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd2;
        end else if ((((in_V_last_V_0_state == 2'd1) & (in_V_last_V_0_ack_out == 1'b0)) | ((in_V_last_V_0_state == 2'd3) & (in_V_last_V_0_ack_out == 1'b0) & (in_V_last_V_0_vld_in == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd1;
        end else if (((~((in_V_last_V_0_vld_in == 1'b0) & (in_V_last_V_0_ack_out == 1'b1)) & ~((in_V_last_V_0_ack_out == 1'b0) & (in_V_last_V_0_vld_in == 1'b1)) & (in_V_last_V_0_state == 2'd3)) | ((in_V_last_V_0_state == 2'd1) & (in_V_last_V_0_ack_out == 1'b1)) | ((in_V_last_V_0_state == 2'd2) & (in_V_last_V_0_vld_in == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd3;
        end else begin
            in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_user_V_0_ack_out == 1'b1) & (in_V_user_V_0_vld_out == 1'b1))) begin
            in_V_user_V_0_sel_rd <= ~in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_user_V_0_ack_in == 1'b1) & (in_V_user_V_0_vld_in == 1'b1))) begin
            in_V_user_V_0_sel_wr <= ~in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_user_V_0_state == 2'd2) & (in_V_user_V_0_vld_in == 1'b0)) | ((in_V_user_V_0_state == 2'd3) & (in_V_user_V_0_vld_in == 1'b0) & (in_V_user_V_0_ack_out == 1'b1)))) begin
            in_V_user_V_0_state <= 2'd2;
        end else if ((((in_V_user_V_0_state == 2'd1) & (in_V_user_V_0_ack_out == 1'b0)) | ((in_V_user_V_0_state == 2'd3) & (in_V_user_V_0_ack_out == 1'b0) & (in_V_user_V_0_vld_in == 1'b1)))) begin
            in_V_user_V_0_state <= 2'd1;
        end else if (((~((in_V_user_V_0_vld_in == 1'b0) & (in_V_user_V_0_ack_out == 1'b1)) & ~((in_V_user_V_0_ack_out == 1'b0) & (in_V_user_V_0_vld_in == 1'b1)) & (in_V_user_V_0_state == 2'd3)) | ((in_V_user_V_0_state == 2'd1) & (in_V_user_V_0_ack_out == 1'b1)) | ((in_V_user_V_0_state == 2'd2) & (in_V_user_V_0_vld_in == 1'b1)))) begin
            in_V_user_V_0_state <= 2'd3;
        end else begin
            in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_259 <= i_2_fu_329_p2;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_259 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        iter_reg_248 <= iter_1_reg_339;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        iter_reg_248 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_A == 1'b1)) begin
        in_V_data_V_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_B == 1'b1)) begin
        in_V_data_V_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_dest_V_0_load_A == 1'b1)) begin
        in_V_dest_V_0_payload_A <= in_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_dest_V_0_load_B == 1'b1)) begin
        in_V_dest_V_0_payload_B <= in_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_id_V_0_load_A == 1'b1)) begin
        in_V_id_V_0_payload_A <= in_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_id_V_0_load_B == 1'b1)) begin
        in_V_id_V_0_payload_B <= in_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_last_V_0_load_A == 1'b1)) begin
        in_V_last_V_0_payload_A <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_last_V_0_load_B == 1'b1)) begin
        in_V_last_V_0_payload_B <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_user_V_0_load_A == 1'b1)) begin
        in_V_user_V_0_payload_A <= in_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_user_V_0_load_B == 1'b1)) begin
        in_V_user_V_0_payload_B <= in_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        iter_1_reg_339 <= iter_1_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_848_reg_344 <= tmp_848_fu_312_p1;
        tmp_849_reg_349 <= in_V_data_V_0_data_out[32'd32];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_14_reg_362 <= in_V_data_V_0_data_out;
        tmp_dest_V_5_reg_374 <= in_V_dest_V_0_data_out;
        tmp_id_V_5_reg_368 <= in_V_id_V_0_data_out;
        tmp_last_V_5_reg_386 <= in_V_last_V_0_data_out;
        tmp_user_V_5_reg_380 <= in_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if ((exitcond_fu_324_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_data_V_0_ack_out = 1'b1;
    end else begin
        in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_data_V_0_sel == 1'b1)) begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_B;
    end else begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((exitcond_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_dest_V_0_sel == 1'b1)) begin
        in_V_dest_V_0_data_out = in_V_dest_V_0_payload_B;
    end else begin
        in_V_dest_V_0_data_out = in_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((exitcond_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_id_V_0_ack_out = 1'b1;
    end else begin
        in_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_id_V_0_sel == 1'b1)) begin
        in_V_id_V_0_data_out = in_V_id_V_0_payload_B;
    end else begin
        in_V_id_V_0_data_out = in_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((exitcond_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_last_V_0_ack_out = 1'b1;
    end else begin
        in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_last_V_0_sel == 1'b1)) begin
        in_V_last_V_0_data_out = in_V_last_V_0_payload_B;
    end else begin
        in_V_last_V_0_data_out = in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((exitcond_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_user_V_0_ack_out = 1'b1;
    end else begin
        in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_user_V_0_sel == 1'b1)) begin
        in_V_user_V_0_data_out = in_V_user_V_0_payload_B;
    end else begin
        in_V_user_V_0_data_out = in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((exitcond_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_r_TDATA_blk_n = in_V_data_V_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd0) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_0_V_data_V_blk_n = out_0_V_data_V_full_n;
    end else begin
        out_0_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_0_V_data_V_din = tmp_data_V_14_reg_362;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op32_write_state2 == 1'b1))) begin
        out_0_V_data_V_din = in_V_data_V_0_data_out;
    end else begin
        out_0_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd0) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_0_V_dest_V_blk_n = out_0_V_dest_V_full_n;
    end else begin
        out_0_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_0_V_dest_V_din = tmp_dest_V_5_reg_374;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op32_write_state2 == 1'b1))) begin
        out_0_V_dest_V_din = in_V_dest_V_0_data_out;
    end else begin
        out_0_V_dest_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op32_write_state2 == 1'b1)))) begin
        out_0_V_id_V1_update = 1'b1;
    end else begin
        out_0_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd0) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_0_V_id_V_blk_n = out_0_V_id_V_full_n;
    end else begin
        out_0_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_0_V_id_V_din = tmp_id_V_5_reg_368;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op32_write_state2 == 1'b1))) begin
        out_0_V_id_V_din = in_V_id_V_0_data_out;
    end else begin
        out_0_V_id_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd0) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_0_V_last_V_blk_n = out_0_V_last_V_full_n;
    end else begin
        out_0_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_0_V_last_V_din = tmp_last_V_5_reg_386;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op32_write_state2 == 1'b1))) begin
        out_0_V_last_V_din = in_V_last_V_0_data_out;
    end else begin
        out_0_V_last_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd0) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_0_V_user_V_blk_n = out_0_V_user_V_full_n;
    end else begin
        out_0_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_0_V_user_V_din = tmp_user_V_5_reg_380;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op32_write_state2 == 1'b1))) begin
        out_0_V_user_V_din = in_V_user_V_0_data_out;
    end else begin
        out_0_V_user_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd1) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_1_V_data_V_blk_n = out_1_V_data_V_full_n;
    end else begin
        out_1_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_1_V_data_V_din = tmp_data_V_14_reg_362;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op34_write_state2 == 1'b1))) begin
        out_1_V_data_V_din = in_V_data_V_0_data_out;
    end else begin
        out_1_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd1) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_1_V_dest_V_blk_n = out_1_V_dest_V_full_n;
    end else begin
        out_1_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_1_V_dest_V_din = tmp_dest_V_5_reg_374;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op34_write_state2 == 1'b1))) begin
        out_1_V_dest_V_din = in_V_dest_V_0_data_out;
    end else begin
        out_1_V_dest_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op34_write_state2 == 1'b1)))) begin
        out_1_V_id_V1_update = 1'b1;
    end else begin
        out_1_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd1) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_1_V_id_V_blk_n = out_1_V_id_V_full_n;
    end else begin
        out_1_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_1_V_id_V_din = tmp_id_V_5_reg_368;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op34_write_state2 == 1'b1))) begin
        out_1_V_id_V_din = in_V_id_V_0_data_out;
    end else begin
        out_1_V_id_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd1) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_1_V_last_V_blk_n = out_1_V_last_V_full_n;
    end else begin
        out_1_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_1_V_last_V_din = tmp_last_V_5_reg_386;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op34_write_state2 == 1'b1))) begin
        out_1_V_last_V_din = in_V_last_V_0_data_out;
    end else begin
        out_1_V_last_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_849_fu_316_p3 == 1'd1) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_1_V_user_V_blk_n = out_1_V_user_V_full_n;
    end else begin
        out_1_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_849_reg_349 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_1_V_user_V_din = tmp_user_V_5_reg_380;
    end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op34_write_state2 == 1'b1))) begin
        out_1_V_user_V_din = in_V_user_V_0_data_out;
    end else begin
        out_1_V_user_V_din = 'bx;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0))) & (exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_fu_324_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_fu_324_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_849_reg_349 == 1'd1) & (out_1_V_id_V1_status == 1'b0)) | ((tmp_849_reg_349 == 1'd0) & (out_0_V_id_V1_status == 1'b0)))) | ((exitcond_fu_324_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_849_reg_349 == 1'd1) & (out_1_V_id_V1_status == 1'b0)) | ((tmp_849_reg_349 == 1'd0) & (out_0_V_id_V1_status == 1'b0)))) | ((exitcond_fu_324_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_849_reg_349 == 1'd1) & (out_1_V_id_V1_status == 1'b0)) | ((tmp_849_reg_349 == 1'd0) & (out_0_V_id_V1_status == 1'b0)))) | ((exitcond_fu_324_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((out_1_V_id_V1_status == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((out_0_V_id_V1_status == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((exitcond1_fu_300_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((exitcond_fu_324_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((tmp_849_reg_349 == 1'd1) & (out_1_V_id_V1_status == 1'b0)) | ((tmp_849_reg_349 == 1'd0) & (out_0_V_id_V1_status == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op32_write_state2 = ((tmp_849_fu_316_p3 == 1'd0) & (exitcond1_fu_300_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op34_write_state2 = ((tmp_849_fu_316_p3 == 1'd1) & (exitcond1_fu_300_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign exitcond1_fu_300_p2 = ((iter_reg_248 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_324_p2 = ((i_reg_259 == tmp_848_reg_344) ? 1'b1 : 1'b0);

assign i_2_fu_329_p2 = (i_reg_259 + 32'd1);

assign in_V_data_V_0_ack_in = in_V_data_V_0_state[1'd1];

assign in_V_data_V_0_load_A = (in_V_data_V_0_state_cmp_full & ~in_V_data_V_0_sel_wr);

assign in_V_data_V_0_load_B = (in_V_data_V_0_state_cmp_full & in_V_data_V_0_sel_wr);

assign in_V_data_V_0_sel = in_V_data_V_0_sel_rd;

assign in_V_data_V_0_state_cmp_full = ((in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_data_V_0_vld_in = in_r_TVALID;

assign in_V_data_V_0_vld_out = in_V_data_V_0_state[1'd0];

assign in_V_dest_V_0_ack_in = in_V_dest_V_0_state[1'd1];

assign in_V_dest_V_0_load_A = (in_V_dest_V_0_state_cmp_full & ~in_V_dest_V_0_sel_wr);

assign in_V_dest_V_0_load_B = (in_V_dest_V_0_state_cmp_full & in_V_dest_V_0_sel_wr);

assign in_V_dest_V_0_sel = in_V_dest_V_0_sel_rd;

assign in_V_dest_V_0_state_cmp_full = ((in_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_dest_V_0_vld_in = in_r_TVALID;

assign in_V_dest_V_0_vld_out = in_V_dest_V_0_state[1'd0];

assign in_V_id_V_0_ack_in = in_V_id_V_0_state[1'd1];

assign in_V_id_V_0_load_A = (in_V_id_V_0_state_cmp_full & ~in_V_id_V_0_sel_wr);

assign in_V_id_V_0_load_B = (in_V_id_V_0_state_cmp_full & in_V_id_V_0_sel_wr);

assign in_V_id_V_0_sel = in_V_id_V_0_sel_rd;

assign in_V_id_V_0_state_cmp_full = ((in_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_id_V_0_vld_in = in_r_TVALID;

assign in_V_id_V_0_vld_out = in_V_id_V_0_state[1'd0];

assign in_V_last_V_0_ack_in = in_V_last_V_0_state[1'd1];

assign in_V_last_V_0_load_A = (in_V_last_V_0_state_cmp_full & ~in_V_last_V_0_sel_wr);

assign in_V_last_V_0_load_B = (in_V_last_V_0_state_cmp_full & in_V_last_V_0_sel_wr);

assign in_V_last_V_0_sel = in_V_last_V_0_sel_rd;

assign in_V_last_V_0_state_cmp_full = ((in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_last_V_0_vld_in = in_r_TVALID;

assign in_V_last_V_0_vld_out = in_V_last_V_0_state[1'd0];

assign in_V_user_V_0_ack_in = in_V_user_V_0_state[1'd1];

assign in_V_user_V_0_load_A = (in_V_user_V_0_state_cmp_full & ~in_V_user_V_0_sel_wr);

assign in_V_user_V_0_load_B = (in_V_user_V_0_state_cmp_full & in_V_user_V_0_sel_wr);

assign in_V_user_V_0_sel = in_V_user_V_0_sel_rd;

assign in_V_user_V_0_state_cmp_full = ((in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_user_V_0_vld_in = in_r_TVALID;

assign in_V_user_V_0_vld_out = in_V_user_V_0_state[1'd0];

assign in_r_TREADY = in_V_last_V_0_state[1'd1];

assign iter_1_fu_306_p2 = (iter_reg_248 + 2'd1);

assign out_0_V_data_V_write = out_0_V_id_V1_update;

assign out_0_V_dest_V_write = out_0_V_id_V1_update;

assign out_0_V_id_V1_status = (out_0_V_user_V_full_n & out_0_V_last_V_full_n & out_0_V_id_V_full_n & out_0_V_dest_V_full_n & out_0_V_data_V_full_n);

assign out_0_V_id_V_write = out_0_V_id_V1_update;

assign out_0_V_last_V_write = out_0_V_id_V1_update;

assign out_0_V_user_V_write = out_0_V_id_V1_update;

assign out_1_V_data_V_write = out_1_V_id_V1_update;

assign out_1_V_dest_V_write = out_1_V_id_V1_update;

assign out_1_V_id_V1_status = (out_1_V_user_V_full_n & out_1_V_last_V_full_n & out_1_V_id_V_full_n & out_1_V_dest_V_full_n & out_1_V_data_V_full_n);

assign out_1_V_id_V_write = out_1_V_id_V1_update;

assign out_1_V_last_V_write = out_1_V_id_V1_update;

assign out_1_V_user_V_write = out_1_V_id_V1_update;

assign start_out = real_start;

assign tmp_848_fu_312_p1 = in_V_data_V_0_data_out[31:0];

assign tmp_849_fu_316_p3 = in_V_data_V_0_data_out[32'd32];

endmodule //AttentionMatmulArbit
