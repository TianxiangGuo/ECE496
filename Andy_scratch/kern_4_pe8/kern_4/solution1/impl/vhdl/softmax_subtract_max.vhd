-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_subtract_max is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_sub_max_c_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_sub_max_c_V_V_empty_n : IN STD_LOGIC;
    in_sub_max_c_V_V_read : OUT STD_LOGIC;
    in_sub_max_r_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_sub_max_r_V_V_empty_n : IN STD_LOGIC;
    in_sub_max_r_V_V_read : OUT STD_LOGIC;
    in_proc_1_iter_r_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_proc_1_iter_r_V_V_full_n : IN STD_LOGIC;
    in_proc_1_iter_r_V_V_write : OUT STD_LOGIC;
    in_proc_1_iter_c_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_proc_1_iter_c_V_V_full_n : IN STD_LOGIC;
    in_proc_1_iter_c_V_V_write : OUT STD_LOGIC;
    max_input_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    max_input_V_V_empty_n : IN STD_LOGIC;
    max_input_V_V_read : OUT STD_LOGIC;
    in_sub_max_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_sub_max_V_V_empty_n : IN STD_LOGIC;
    in_sub_max_V_V_read : OUT STD_LOGIC;
    in_proc_1_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_proc_1_V_V_full_n : IN STD_LOGIC;
    in_proc_1_V_V_write : OUT STD_LOGIC );
end;


architecture behav of softmax_subtract_max is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_sub_max_c_V_V_blk_n : STD_LOGIC;
    signal in_sub_max_r_V_V_blk_n : STD_LOGIC;
    signal in_proc_1_iter_r_V_V_blk_n : STD_LOGIC;
    signal in_proc_1_iter_c_V_V_blk_n : STD_LOGIC;
    signal max_input_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_i_28_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_sub_max_V_V_blk_n : STD_LOGIC;
    signal exitcond_flatten_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_proc_1_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_300_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_181 : STD_LOGIC_VECTOR (63 downto 0);
    signal iter_i_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_71_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_V_70_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_209_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_295 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_flatten_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_220_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_i_28_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iter_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_73_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_V_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_209_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i2_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iter_i_mid2_fu_231_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_i_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_i_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_209_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_209_p10 : STD_LOGIC_VECTOR (63 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_181 <= indvar_flatten_next_fu_220_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_181 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    iter_i_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                iter_i_reg_192 <= iter_fu_245_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                iter_i_reg_192 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_295 <= bound_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_300 <= exitcond_flatten_fu_215_p2;
                exitcond_flatten_reg_300_pp0_iter1_reg <= exitcond_flatten_reg_300;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_proc_1_iter_c_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_full_n = ap_const_logic_0) or (in_sub_max_r_V_V_empty_n = ap_const_logic_0) or (in_sub_max_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_V_70_reg_290 <= in_sub_max_r_V_V_dout;
                tmp_V_71_reg_284 <= in_sub_max_c_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_300 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_73_reg_318 <= in_sub_max_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_28_reg_309 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_fu_130 <= max_input_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_28_reg_309 <= tmp_i_28_fu_239_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_sub_max_c_V_V_empty_n, in_sub_max_r_V_V_empty_n, in_proc_1_iter_r_V_V_full_n, in_proc_1_iter_c_V_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond_flatten_fu_215_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in_proc_1_iter_c_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_full_n = ap_const_logic_0) or (in_sub_max_r_V_V_empty_n = ap_const_logic_0) or (in_sub_max_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_215_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond_flatten_fu_215_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(max_input_V_V_empty_n, in_sub_max_V_V_empty_n, in_proc_1_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_i_28_reg_309, exitcond_flatten_reg_300, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_300_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_300 = ap_const_lv1_0) and (in_sub_max_V_V_empty_n = ap_const_logic_0)) or ((tmp_i_28_reg_309 = ap_const_lv1_1) and (max_input_V_V_empty_n = ap_const_logic_0)))) or ((exitcond_flatten_reg_300_pp0_iter1_reg = ap_const_lv1_0) and (in_proc_1_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(max_input_V_V_empty_n, in_sub_max_V_V_empty_n, in_proc_1_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_i_28_reg_309, exitcond_flatten_reg_300, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_300_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_300 = ap_const_lv1_0) and (in_sub_max_V_V_empty_n = ap_const_logic_0)) or ((tmp_i_28_reg_309 = ap_const_lv1_1) and (max_input_V_V_empty_n = ap_const_logic_0)))) or ((exitcond_flatten_reg_300_pp0_iter1_reg = ap_const_lv1_0) and (in_proc_1_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(max_input_V_V_empty_n, in_sub_max_V_V_empty_n, in_proc_1_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_i_28_reg_309, exitcond_flatten_reg_300, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_300_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_300 = ap_const_lv1_0) and (in_sub_max_V_V_empty_n = ap_const_logic_0)) or ((tmp_i_28_reg_309 = ap_const_lv1_1) and (max_input_V_V_empty_n = ap_const_logic_0)))) or ((exitcond_flatten_reg_300_pp0_iter1_reg = ap_const_lv1_0) and (in_proc_1_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, in_sub_max_c_V_V_empty_n, in_sub_max_r_V_V_empty_n, in_proc_1_iter_r_V_V_full_n, in_proc_1_iter_c_V_V_full_n)
    begin
                ap_block_state1 <= ((in_proc_1_iter_c_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_full_n = ap_const_logic_0) or (in_sub_max_r_V_V_empty_n = ap_const_logic_0) or (in_sub_max_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(max_input_V_V_empty_n, in_sub_max_V_V_empty_n, tmp_i_28_reg_309, exitcond_flatten_reg_300)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_flatten_reg_300 = ap_const_lv1_0) and (in_sub_max_V_V_empty_n = ap_const_logic_0)) or ((tmp_i_28_reg_309 = ap_const_lv1_1) and (max_input_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(in_proc_1_V_V_full_n, exitcond_flatten_reg_300_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((exitcond_flatten_reg_300_pp0_iter1_reg = ap_const_lv1_0) and (in_proc_1_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_flatten_fu_215_p2)
    begin
        if ((exitcond_flatten_fu_215_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_209_p0 <= bound_fu_209_p00(32 - 1 downto 0);
    bound_fu_209_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_71_reg_284),64));
    bound_fu_209_p1 <= bound_fu_209_p10(32 - 1 downto 0);
    bound_fu_209_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_70_reg_290),64));
    bound_fu_209_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_209_p0) * unsigned(bound_fu_209_p1), 64));
    exitcond_flatten_fu_215_p2 <= "1" when (indvar_flatten_reg_181 = bound_reg_295) else "0";
    exitcond_i2_fu_226_p2 <= "1" when (iter_i_reg_192 = tmp_V_71_reg_284) else "0";

    in_proc_1_V_V_blk_n_assign_proc : process(in_proc_1_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_300_pp0_iter1_reg)
    begin
        if (((exitcond_flatten_reg_300_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            in_proc_1_V_V_blk_n <= in_proc_1_V_V_full_n;
        else 
            in_proc_1_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_proc_1_V_V_din <= 
        ap_const_lv32_80000000 when (tmp_13_i_fu_259_p2(0) = '1') else 
        tmp_14_i_fu_264_p2;

    in_proc_1_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_flatten_reg_300_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_300_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_proc_1_V_V_write <= ap_const_logic_1;
        else 
            in_proc_1_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    in_proc_1_iter_c_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_proc_1_iter_c_V_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_proc_1_iter_c_V_V_blk_n <= in_proc_1_iter_c_V_V_full_n;
        else 
            in_proc_1_iter_c_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_proc_1_iter_c_V_V_din <= in_sub_max_c_V_V_dout;

    in_proc_1_iter_c_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_sub_max_c_V_V_empty_n, in_sub_max_r_V_V_empty_n, in_proc_1_iter_r_V_V_full_n, in_proc_1_iter_c_V_V_full_n)
    begin
        if ((not(((in_proc_1_iter_c_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_full_n = ap_const_logic_0) or (in_sub_max_r_V_V_empty_n = ap_const_logic_0) or (in_sub_max_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_proc_1_iter_c_V_V_write <= ap_const_logic_1;
        else 
            in_proc_1_iter_c_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    in_proc_1_iter_r_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_proc_1_iter_r_V_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_proc_1_iter_r_V_V_blk_n <= in_proc_1_iter_r_V_V_full_n;
        else 
            in_proc_1_iter_r_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_proc_1_iter_r_V_V_din <= in_sub_max_r_V_V_dout;

    in_proc_1_iter_r_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_sub_max_c_V_V_empty_n, in_sub_max_r_V_V_empty_n, in_proc_1_iter_r_V_V_full_n, in_proc_1_iter_c_V_V_full_n)
    begin
        if ((not(((in_proc_1_iter_c_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_full_n = ap_const_logic_0) or (in_sub_max_r_V_V_empty_n = ap_const_logic_0) or (in_sub_max_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_proc_1_iter_r_V_V_write <= ap_const_logic_1;
        else 
            in_proc_1_iter_r_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    in_sub_max_V_V_blk_n_assign_proc : process(in_sub_max_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_300)
    begin
        if (((exitcond_flatten_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_sub_max_V_V_blk_n <= in_sub_max_V_V_empty_n;
        else 
            in_sub_max_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_sub_max_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_300, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_300 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_sub_max_V_V_read <= ap_const_logic_1;
        else 
            in_sub_max_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_sub_max_c_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_sub_max_c_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_sub_max_c_V_V_blk_n <= in_sub_max_c_V_V_empty_n;
        else 
            in_sub_max_c_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_sub_max_c_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_sub_max_c_V_V_empty_n, in_sub_max_r_V_V_empty_n, in_proc_1_iter_r_V_V_full_n, in_proc_1_iter_c_V_V_full_n)
    begin
        if ((not(((in_proc_1_iter_c_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_full_n = ap_const_logic_0) or (in_sub_max_r_V_V_empty_n = ap_const_logic_0) or (in_sub_max_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_sub_max_c_V_V_read <= ap_const_logic_1;
        else 
            in_sub_max_c_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_sub_max_r_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_sub_max_r_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_sub_max_r_V_V_blk_n <= in_sub_max_r_V_V_empty_n;
        else 
            in_sub_max_r_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_sub_max_r_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_sub_max_c_V_V_empty_n, in_sub_max_r_V_V_empty_n, in_proc_1_iter_r_V_V_full_n, in_proc_1_iter_c_V_V_full_n)
    begin
        if ((not(((in_proc_1_iter_c_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_full_n = ap_const_logic_0) or (in_sub_max_r_V_V_empty_n = ap_const_logic_0) or (in_sub_max_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_sub_max_r_V_V_read <= ap_const_logic_1;
        else 
            in_sub_max_r_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_220_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_181) + unsigned(ap_const_lv64_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    iter_fu_245_p2 <= std_logic_vector(unsigned(iter_i_mid2_fu_231_p3) + unsigned(ap_const_lv32_1));
    iter_i_mid2_fu_231_p3 <= 
        ap_const_lv32_0 when (exitcond_i2_fu_226_p2(0) = '1') else 
        iter_i_reg_192;

    max_input_V_V_blk_n_assign_proc : process(max_input_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_i_28_reg_309)
    begin
        if (((tmp_i_28_reg_309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            max_input_V_V_blk_n <= max_input_V_V_empty_n;
        else 
            max_input_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    max_input_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_28_reg_309, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_28_reg_309 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_input_V_V_read <= ap_const_logic_1;
        else 
            max_input_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_13_i_fu_259_p2 <= "1" when (tmp_V_73_reg_318 = ap_const_lv32_80000000) else "0";
    tmp_14_i_fu_264_p2 <= std_logic_vector(unsigned(tmp_V_73_reg_318) - unsigned(tmp_V_fu_130));
    tmp_i_28_fu_239_p2 <= "1" when (iter_i_mid2_fu_231_p3 = ap_const_lv32_0) else "0";
end behav;
