-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AttentionMatmulSoftm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_data_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    in_V_data_V_empty_n : IN STD_LOGIC;
    in_V_data_V_read : OUT STD_LOGIC;
    in_V_id_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_id_V_empty_n : IN STD_LOGIC;
    in_V_id_V_read : OUT STD_LOGIC;
    in_V_dest_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_dest_V_empty_n : IN STD_LOGIC;
    in_V_dest_V_read : OUT STD_LOGIC;
    in_V_user_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_user_V_empty_n : IN STD_LOGIC;
    in_V_user_V_read : OUT STD_LOGIC;
    in_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    in_V_last_V_empty_n : IN STD_LOGIC;
    in_V_last_V_read : OUT STD_LOGIC;
    out_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    out_V_data_V_full_n : IN STD_LOGIC;
    out_V_data_V_write : OUT STD_LOGIC;
    out_V_id_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_id_V_full_n : IN STD_LOGIC;
    out_V_id_V_write : OUT STD_LOGIC;
    out_V_dest_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_dest_V_full_n : IN STD_LOGIC;
    out_V_dest_V_write : OUT STD_LOGIC;
    out_V_user_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_user_V_full_n : IN STD_LOGIC;
    out_V_user_V_write : OUT STD_LOGIC;
    out_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_V_last_V_full_n : IN STD_LOGIC;
    out_V_last_V_write : OUT STD_LOGIC );
end;


architecture behav of AttentionMatmulSoftm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv16_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001001";
    constant ap_const_lv16_A : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001010";
    constant ap_const_lv16_B : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001011";
    constant ap_const_lv16_C : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001100";
    constant ap_const_lv16_D : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001101";
    constant ap_const_lv16_E : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    constant ap_const_lv16_F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_1000 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_id_V_blk_n : STD_LOGIC;
    signal in_V_dest_V_blk_n : STD_LOGIC;
    signal in_V_user_V_blk_n : STD_LOGIC;
    signal in_V_last_V_blk_n : STD_LOGIC;
    signal out_V_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_1000_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_id_V_blk_n : STD_LOGIC;
    signal out_V_dest_V_blk_n : STD_LOGIC;
    signal out_V_user_V_blk_n : STD_LOGIC;
    signal out_V_last_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_321 : STD_LOGIC_VECTOR (27 downto 0);
    signal i_op_assign_1_reg_332 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_56_cast1_fu_530_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_56_cast1_reg_970 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_V_id_V0_status : STD_LOGIC;
    signal out_V_id_V1_status : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_fu_540_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_975 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_964_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_reg_995 : STD_LOGIC_VECTOR (27 downto 0);
    signal exitcond_flatten_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_1000_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1000_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_557_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_op_assign_1_mid2_fu_568_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_op_assign_1_mid2_reg_1009 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_576_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_id_V_1_reg_1024 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_id_V_1_reg_1024_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_id_V_1_reg_1024_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_dest_V_1_reg_1029 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_dest_V_1_reg_1029_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_dest_V_1_reg_1029_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_1_reg_1034 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_user_V_1_reg_1034_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_user_V_1_reg_1034_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_last_V_1_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_reg_1039_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_reg_1039_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_5_fu_594_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_113_1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_1_reg_1053 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_2_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_2_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_3_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_3_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_4_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_4_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_5_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_5_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_6_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_6_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_7_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_7_reg_1077 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_7_reg_1077_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_8_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_8_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_8_reg_1081_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_9_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_9_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_9_reg_1085_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_s_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_s_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_s_reg_1089_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_10_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_10_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_10_reg_1093_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_11_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_11_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_11_reg_1097_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_12_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_12_reg_1101 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_12_reg_1101_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_12_reg_1101_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_13_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_13_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_13_reg_1105_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_13_reg_1105_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_14_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_14_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_14_reg_1109_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_14_reg_1109_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_12_fu_836_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_18_fu_913_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_tmp_data_V_8_reg_343 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_V_8_reg_343 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_8_reg_343 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_8_1_reg_352 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_6_fu_771_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_8_2_reg_362 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_7_fu_784_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_8_3_reg_372 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_9_fu_797_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_8_4_reg_382 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_10_fu_810_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_5_phi_fu_395_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_8_5_reg_392 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_11_fu_823_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_data_V_8_6_reg_403 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_V_8_6_reg_403 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_8_6_reg_403 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_V_8_6_reg_403 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_V_8_7_reg_413 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_13_fu_848_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_V_8_8_reg_423 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_14_fu_861_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_V_8_9_reg_433 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_15_fu_874_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_V_8_s_reg_443 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_16_fu_887_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_10_phi_fu_456_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_V_8_10_reg_453 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_17_fu_900_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_data_V_8_11_reg_464 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_V_8_11_reg_464 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_8_11_reg_464 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_V_8_11_reg_464 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter4_tmp_data_V_8_11_reg_464 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter4_tmp_data_V_8_12_reg_474 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_19_fu_925_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_8_13_phi_fu_487_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter4_tmp_data_V_8_13_reg_484 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_20_fu_938_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_tmp_data_V_22_phi_fu_497_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter4_tmp_data_V_22_reg_494 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_21_fu_951_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal in_V_id_V0_update : STD_LOGIC;
    signal out_V_id_V1_update : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal exitcond3_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_582_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_s_fu_606_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_1_fu_617_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_2_fu_628_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_3_fu_639_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_4_fu_650_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_5_fu_661_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_6_fu_672_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_7_fu_683_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_8_fu_694_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_9_fu_705_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_10_fu_716_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_11_fu_727_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_12_fu_738_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_13_fu_749_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_14_fu_760_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_964_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal bound_fu_964_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_964_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_fu_964_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_condition_112 : BOOLEAN;
    signal ap_condition_891 : BOOLEAN;
    signal ap_condition_895 : BOOLEAN;
    signal ap_condition_202 : BOOLEAN;

    component kernel_4_mul_mul_12ns_16ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    kernel_4_mul_mul_12ns_16ns_28_1_1_U1882 : component kernel_4_mul_mul_12ns_16ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => bound_fu_964_p0,
        din1 => bound_fu_964_p1,
        dout => bound_fu_964_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_tmp_data_V_8_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_202)) then
                if (((tmp_5_fu_589_p2 = ap_const_lv1_0) and (exitcond_flatten_reg_1000 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_tmp_data_V_8_reg_343 <= tmp_data_V_5_fu_594_p5;
                elsif (((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (tmp_5_fu_589_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter2_tmp_data_V_8_reg_343 <= in_V_data_V_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_tmp_data_V_8_reg_343 <= ap_phi_reg_pp0_iter1_tmp_data_V_8_reg_343;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_tmp_data_V_8_6_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((tmp_113_6_reg_1073 = ap_const_lv1_0) and (exitcond_flatten_reg_1000_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_tmp_data_V_8_6_reg_403 <= tmp_data_V_12_fu_836_p5;
                elsif (((exitcond_flatten_reg_1000_pp0_iter1_reg = ap_const_lv1_0) and (tmp_113_6_reg_1073 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter3_tmp_data_V_8_6_reg_403 <= ap_phi_mux_tmp_data_V_8_5_phi_fu_395_p4;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_tmp_data_V_8_6_reg_403 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_6_reg_403;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_tmp_data_V_8_11_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((tmp_113_11_reg_1097_pp0_iter2_reg = ap_const_lv1_0) and (exitcond_flatten_reg_1000_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter4_tmp_data_V_8_11_reg_464 <= tmp_data_V_18_fu_913_p5;
                elsif (((exitcond_flatten_reg_1000_pp0_iter2_reg = ap_const_lv1_0) and (tmp_113_11_reg_1097_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter4_tmp_data_V_8_11_reg_464 <= ap_phi_mux_tmp_data_V_8_10_phi_fu_456_p4;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_tmp_data_V_8_11_reg_464 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_11_reg_464;
                end if;
            end if; 
        end if;
    end process;

    i_op_assign_1_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_op_assign_1_reg_332 <= j_fu_576_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_op_assign_1_reg_332 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_321 <= indvar_flatten_next_fu_557_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_321 <= ap_const_lv28_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_tmp_data_V_8_11_reg_464 <= ap_phi_reg_pp0_iter0_tmp_data_V_8_11_reg_464;
                ap_phi_reg_pp0_iter1_tmp_data_V_8_6_reg_403 <= ap_phi_reg_pp0_iter0_tmp_data_V_8_6_reg_403;
                ap_phi_reg_pp0_iter1_tmp_data_V_8_reg_343 <= ap_phi_reg_pp0_iter0_tmp_data_V_8_reg_343;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_tmp_data_V_8_11_reg_464 <= ap_phi_reg_pp0_iter1_tmp_data_V_8_11_reg_464;
                ap_phi_reg_pp0_iter2_tmp_data_V_8_6_reg_403 <= ap_phi_reg_pp0_iter1_tmp_data_V_8_6_reg_403;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_tmp_data_V_8_11_reg_464 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_11_reg_464;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_995 <= bound_fu_964_p2;
                tmp_56_cast1_reg_970 <= in_V_data_V_dout(47 downto 36);
                tmp_reg_975 <= tmp_fu_540_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_1000 <= exitcond_flatten_fu_552_p2;
                exitcond_flatten_reg_1000_pp0_iter1_reg <= exitcond_flatten_reg_1000;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_1000_pp0_iter2_reg <= exitcond_flatten_reg_1000_pp0_iter1_reg;
                exitcond_flatten_reg_1000_pp0_iter3_reg <= exitcond_flatten_reg_1000_pp0_iter2_reg;
                tmp_113_10_reg_1093_pp0_iter2_reg <= tmp_113_10_reg_1093;
                tmp_113_11_reg_1097_pp0_iter2_reg <= tmp_113_11_reg_1097;
                tmp_113_12_reg_1101_pp0_iter2_reg <= tmp_113_12_reg_1101;
                tmp_113_12_reg_1101_pp0_iter3_reg <= tmp_113_12_reg_1101_pp0_iter2_reg;
                tmp_113_13_reg_1105_pp0_iter2_reg <= tmp_113_13_reg_1105;
                tmp_113_13_reg_1105_pp0_iter3_reg <= tmp_113_13_reg_1105_pp0_iter2_reg;
                tmp_113_14_reg_1109_pp0_iter2_reg <= tmp_113_14_reg_1109;
                tmp_113_14_reg_1109_pp0_iter3_reg <= tmp_113_14_reg_1109_pp0_iter2_reg;
                tmp_113_7_reg_1077_pp0_iter2_reg <= tmp_113_7_reg_1077;
                tmp_113_8_reg_1081_pp0_iter2_reg <= tmp_113_8_reg_1081;
                tmp_113_9_reg_1085_pp0_iter2_reg <= tmp_113_9_reg_1085;
                tmp_113_s_reg_1089_pp0_iter2_reg <= tmp_113_s_reg_1089;
                tmp_dest_V_1_reg_1029_pp0_iter2_reg <= tmp_dest_V_1_reg_1029;
                tmp_dest_V_1_reg_1029_pp0_iter3_reg <= tmp_dest_V_1_reg_1029_pp0_iter2_reg;
                tmp_id_V_1_reg_1024_pp0_iter2_reg <= tmp_id_V_1_reg_1024;
                tmp_id_V_1_reg_1024_pp0_iter3_reg <= tmp_id_V_1_reg_1024_pp0_iter2_reg;
                tmp_last_V_1_reg_1039_pp0_iter2_reg <= tmp_last_V_1_reg_1039;
                tmp_last_V_1_reg_1039_pp0_iter3_reg <= tmp_last_V_1_reg_1039_pp0_iter2_reg;
                tmp_user_V_1_reg_1034_pp0_iter2_reg <= tmp_user_V_1_reg_1034;
                tmp_user_V_1_reg_1034_pp0_iter3_reg <= tmp_user_V_1_reg_1034_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_op_assign_1_mid2_reg_1009 <= i_op_assign_1_mid2_fu_568_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_113_10_reg_1093 <= tmp_113_10_fu_722_p2;
                tmp_113_11_reg_1097 <= tmp_113_11_fu_733_p2;
                tmp_113_12_reg_1101 <= tmp_113_12_fu_744_p2;
                tmp_113_13_reg_1105 <= tmp_113_13_fu_755_p2;
                tmp_113_14_reg_1109 <= tmp_113_14_fu_766_p2;
                tmp_113_1_reg_1053 <= tmp_113_1_fu_612_p2;
                tmp_113_2_reg_1057 <= tmp_113_2_fu_623_p2;
                tmp_113_3_reg_1061 <= tmp_113_3_fu_634_p2;
                tmp_113_4_reg_1065 <= tmp_113_4_fu_645_p2;
                tmp_113_5_reg_1069 <= tmp_113_5_fu_656_p2;
                tmp_113_6_reg_1073 <= tmp_113_6_fu_667_p2;
                tmp_113_7_reg_1077 <= tmp_113_7_fu_678_p2;
                tmp_113_8_reg_1081 <= tmp_113_8_fu_689_p2;
                tmp_113_9_reg_1085 <= tmp_113_9_fu_700_p2;
                tmp_113_s_reg_1089 <= tmp_113_s_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_dest_V_1_reg_1029 <= in_V_dest_V_dout;
                tmp_id_V_1_reg_1024 <= in_V_id_V_dout;
                tmp_last_V_1_reg_1039 <= in_V_last_V_dout;
                tmp_user_V_1_reg_1034 <= in_V_user_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, in_V_id_V0_status, out_V_id_V1_status, exitcond_flatten_fu_552_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_552_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_552_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_1000, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg, in_V_id_V0_status, out_V_id_V1_status)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (in_V_id_V0_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (out_V_id_V1_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_1000, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg, in_V_id_V0_status, out_V_id_V1_status)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (in_V_id_V0_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (out_V_id_V1_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_1000, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg, in_V_id_V0_status, out_V_id_V1_status)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (in_V_id_V0_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (out_V_id_V1_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, in_V_id_V0_status, out_V_id_V1_status)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(exitcond_flatten_reg_1000, in_V_id_V0_status)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (in_V_id_V0_status = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(exitcond_flatten_reg_1000_pp0_iter3_reg, out_V_id_V1_status)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (out_V_id_V1_status = ap_const_logic_0));
    end process;


    ap_condition_112_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg)
    begin
                ap_condition_112 <= ((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_202_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_202 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_891_assign_proc : process(ap_block_pp0_stage0, exitcond_flatten_reg_1000_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
                ap_condition_891 <= ((exitcond_flatten_reg_1000_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_condition_895_assign_proc : process(ap_block_pp0_stage0, exitcond_flatten_reg_1000_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
                ap_condition_895 <= ((exitcond_flatten_reg_1000_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_552_p2)
    begin
        if ((exitcond_flatten_fu_552_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_22_phi_fu_497_p4_assign_proc : process(tmp_113_14_reg_1109_pp0_iter3_reg, ap_phi_mux_tmp_data_V_8_13_phi_fu_487_p4, ap_phi_reg_pp0_iter4_tmp_data_V_22_reg_494, tmp_data_V_21_fu_951_p5, ap_condition_112)
    begin
        if ((ap_const_boolean_1 = ap_condition_112)) then
            if ((tmp_113_14_reg_1109_pp0_iter3_reg = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_22_phi_fu_497_p4 <= tmp_data_V_21_fu_951_p5;
            elsif ((tmp_113_14_reg_1109_pp0_iter3_reg = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_22_phi_fu_497_p4 <= ap_phi_mux_tmp_data_V_8_13_phi_fu_487_p4;
            else 
                ap_phi_mux_tmp_data_V_22_phi_fu_497_p4 <= ap_phi_reg_pp0_iter4_tmp_data_V_22_reg_494;
            end if;
        else 
            ap_phi_mux_tmp_data_V_22_phi_fu_497_p4 <= ap_phi_reg_pp0_iter4_tmp_data_V_22_reg_494;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_10_phi_fu_456_p4_assign_proc : process(tmp_113_10_reg_1093_pp0_iter2_reg, ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4, ap_phi_reg_pp0_iter3_tmp_data_V_8_10_reg_453, tmp_data_V_17_fu_900_p5, ap_condition_891)
    begin
        if ((ap_const_boolean_1 = ap_condition_891)) then
            if ((tmp_113_10_reg_1093_pp0_iter2_reg = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_10_phi_fu_456_p4 <= tmp_data_V_17_fu_900_p5;
            elsif ((tmp_113_10_reg_1093_pp0_iter2_reg = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_10_phi_fu_456_p4 <= ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4;
            else 
                ap_phi_mux_tmp_data_V_8_10_phi_fu_456_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_10_reg_453;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_10_phi_fu_456_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_10_reg_453;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4_assign_proc : process(tmp_113_12_reg_1101_pp0_iter3_reg, ap_phi_reg_pp0_iter4_tmp_data_V_8_11_reg_464, ap_phi_reg_pp0_iter4_tmp_data_V_8_12_reg_474, tmp_data_V_19_fu_925_p5, ap_condition_112)
    begin
        if ((ap_const_boolean_1 = ap_condition_112)) then
            if ((tmp_113_12_reg_1101_pp0_iter3_reg = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4 <= tmp_data_V_19_fu_925_p5;
            elsif ((tmp_113_12_reg_1101_pp0_iter3_reg = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4 <= ap_phi_reg_pp0_iter4_tmp_data_V_8_11_reg_464;
            else 
                ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4 <= ap_phi_reg_pp0_iter4_tmp_data_V_8_12_reg_474;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4 <= ap_phi_reg_pp0_iter4_tmp_data_V_8_12_reg_474;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_13_phi_fu_487_p4_assign_proc : process(tmp_113_13_reg_1105_pp0_iter3_reg, ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4, ap_phi_reg_pp0_iter4_tmp_data_V_8_13_reg_484, tmp_data_V_20_fu_938_p5, ap_condition_112)
    begin
        if ((ap_const_boolean_1 = ap_condition_112)) then
            if ((tmp_113_13_reg_1105_pp0_iter3_reg = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_13_phi_fu_487_p4 <= tmp_data_V_20_fu_938_p5;
            elsif ((tmp_113_13_reg_1105_pp0_iter3_reg = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_13_phi_fu_487_p4 <= ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4;
            else 
                ap_phi_mux_tmp_data_V_8_13_phi_fu_487_p4 <= ap_phi_reg_pp0_iter4_tmp_data_V_8_13_reg_484;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_13_phi_fu_487_p4 <= ap_phi_reg_pp0_iter4_tmp_data_V_8_13_reg_484;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4_assign_proc : process(tmp_113_1_reg_1053, ap_phi_reg_pp0_iter2_tmp_data_V_8_reg_343, ap_phi_reg_pp0_iter2_tmp_data_V_8_1_reg_352, tmp_data_V_6_fu_771_p5, ap_condition_895)
    begin
        if ((ap_const_boolean_1 = ap_condition_895)) then
            if ((tmp_113_1_reg_1053 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4 <= tmp_data_V_6_fu_771_p5;
            elsif ((tmp_113_1_reg_1053 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_reg_343;
            else 
                ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_1_reg_352;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_1_reg_352;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4_assign_proc : process(tmp_113_2_reg_1057, ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4, ap_phi_reg_pp0_iter2_tmp_data_V_8_2_reg_362, tmp_data_V_7_fu_784_p5, ap_condition_895)
    begin
        if ((ap_const_boolean_1 = ap_condition_895)) then
            if ((tmp_113_2_reg_1057 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4 <= tmp_data_V_7_fu_784_p5;
            elsif ((tmp_113_2_reg_1057 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4 <= ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4;
            else 
                ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_2_reg_362;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_2_reg_362;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4_assign_proc : process(tmp_113_3_reg_1061, ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4, ap_phi_reg_pp0_iter2_tmp_data_V_8_3_reg_372, tmp_data_V_9_fu_797_p5, ap_condition_895)
    begin
        if ((ap_const_boolean_1 = ap_condition_895)) then
            if ((tmp_113_3_reg_1061 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4 <= tmp_data_V_9_fu_797_p5;
            elsif ((tmp_113_3_reg_1061 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4 <= ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4;
            else 
                ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_3_reg_372;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_3_reg_372;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4_assign_proc : process(tmp_113_4_reg_1065, ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4, ap_phi_reg_pp0_iter2_tmp_data_V_8_4_reg_382, tmp_data_V_10_fu_810_p5, ap_condition_895)
    begin
        if ((ap_const_boolean_1 = ap_condition_895)) then
            if ((tmp_113_4_reg_1065 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4 <= tmp_data_V_10_fu_810_p5;
            elsif ((tmp_113_4_reg_1065 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4 <= ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4;
            else 
                ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_4_reg_382;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_4_reg_382;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_5_phi_fu_395_p4_assign_proc : process(tmp_113_5_reg_1069, ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4, ap_phi_reg_pp0_iter2_tmp_data_V_8_5_reg_392, tmp_data_V_11_fu_823_p5, ap_condition_895)
    begin
        if ((ap_const_boolean_1 = ap_condition_895)) then
            if ((tmp_113_5_reg_1069 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_5_phi_fu_395_p4 <= tmp_data_V_11_fu_823_p5;
            elsif ((tmp_113_5_reg_1069 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_5_phi_fu_395_p4 <= ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4;
            else 
                ap_phi_mux_tmp_data_V_8_5_phi_fu_395_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_5_reg_392;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_5_phi_fu_395_p4 <= ap_phi_reg_pp0_iter2_tmp_data_V_8_5_reg_392;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4_assign_proc : process(tmp_113_7_reg_1077_pp0_iter2_reg, ap_phi_reg_pp0_iter3_tmp_data_V_8_6_reg_403, ap_phi_reg_pp0_iter3_tmp_data_V_8_7_reg_413, tmp_data_V_13_fu_848_p5, ap_condition_891)
    begin
        if ((ap_const_boolean_1 = ap_condition_891)) then
            if ((tmp_113_7_reg_1077_pp0_iter2_reg = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4 <= tmp_data_V_13_fu_848_p5;
            elsif ((tmp_113_7_reg_1077_pp0_iter2_reg = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_6_reg_403;
            else 
                ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_7_reg_413;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_7_reg_413;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4_assign_proc : process(tmp_113_8_reg_1081_pp0_iter2_reg, ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4, ap_phi_reg_pp0_iter3_tmp_data_V_8_8_reg_423, tmp_data_V_14_fu_861_p5, ap_condition_891)
    begin
        if ((ap_const_boolean_1 = ap_condition_891)) then
            if ((tmp_113_8_reg_1081_pp0_iter2_reg = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4 <= tmp_data_V_14_fu_861_p5;
            elsif ((tmp_113_8_reg_1081_pp0_iter2_reg = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4 <= ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4;
            else 
                ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_8_reg_423;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_8_reg_423;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4_assign_proc : process(tmp_113_9_reg_1085_pp0_iter2_reg, ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4, ap_phi_reg_pp0_iter3_tmp_data_V_8_9_reg_433, tmp_data_V_15_fu_874_p5, ap_condition_891)
    begin
        if ((ap_const_boolean_1 = ap_condition_891)) then
            if ((tmp_113_9_reg_1085_pp0_iter2_reg = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4 <= tmp_data_V_15_fu_874_p5;
            elsif ((tmp_113_9_reg_1085_pp0_iter2_reg = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4 <= ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4;
            else 
                ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_9_reg_433;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_9_reg_433;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4_assign_proc : process(tmp_113_s_reg_1089_pp0_iter2_reg, ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4, ap_phi_reg_pp0_iter3_tmp_data_V_8_s_reg_443, tmp_data_V_16_fu_887_p5, ap_condition_891)
    begin
        if ((ap_const_boolean_1 = ap_condition_891)) then
            if ((tmp_113_s_reg_1089_pp0_iter2_reg = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4 <= tmp_data_V_16_fu_887_p5;
            elsif ((tmp_113_s_reg_1089_pp0_iter2_reg = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4 <= ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4;
            else 
                ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_s_reg_443;
            end if;
        else 
            ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4 <= ap_phi_reg_pp0_iter3_tmp_data_V_8_s_reg_443;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_data_V_8_11_reg_464 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_data_V_8_6_reg_403 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_data_V_8_reg_343 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter2_tmp_data_V_8_1_reg_352 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter2_tmp_data_V_8_2_reg_362 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter2_tmp_data_V_8_3_reg_372 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter2_tmp_data_V_8_4_reg_382 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter2_tmp_data_V_8_5_reg_392 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter3_tmp_data_V_8_10_reg_453 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter3_tmp_data_V_8_7_reg_413 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter3_tmp_data_V_8_8_reg_423 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter3_tmp_data_V_8_9_reg_433 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter3_tmp_data_V_8_s_reg_443 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter4_tmp_data_V_22_reg_494 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter4_tmp_data_V_8_12_reg_474 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter4_tmp_data_V_8_13_reg_484 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;
    bound_fu_964_p0 <= bound_fu_964_p00(12 - 1 downto 0);
    bound_fu_964_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_cast1_fu_530_p4),28));
    bound_fu_964_p1 <= bound_fu_964_p10(16 - 1 downto 0);
    bound_fu_964_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_540_p1),28));
    exitcond3_fu_563_p2 <= "1" when (i_op_assign_1_reg_332 = tmp_56_cast1_reg_970) else "0";
    exitcond_flatten_fu_552_p2 <= "1" when (indvar_flatten_reg_321 = bound_reg_995) else "0";
    i_op_assign_1_mid2_fu_568_p3 <= 
        ap_const_lv12_0 when (exitcond3_fu_563_p2(0) = '1') else 
        i_op_assign_1_reg_332;
    i_op_assign_2_10_fu_716_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_B);
    i_op_assign_2_11_fu_727_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_C);
    i_op_assign_2_12_fu_738_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_D);
    i_op_assign_2_13_fu_749_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_E);
    i_op_assign_2_14_fu_760_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_F);
    i_op_assign_2_1_fu_617_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_2);
    i_op_assign_2_2_fu_628_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_3);
    i_op_assign_2_3_fu_639_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_4);
    i_op_assign_2_4_fu_650_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_5);
    i_op_assign_2_5_fu_661_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_6);
    i_op_assign_2_6_fu_672_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_7);
    i_op_assign_2_7_fu_683_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_8);
    i_op_assign_2_8_fu_694_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_9);
    i_op_assign_2_9_fu_705_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_A);
    i_op_assign_2_s_fu_606_p2 <= (tmp_4_fu_582_p3 or ap_const_lv16_1);

    in_V_data_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_1000)
    begin
        if ((((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_data_V_blk_n <= in_V_data_V_empty_n;
        else 
            in_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_data_V_read <= in_V_id_V0_update;

    in_V_dest_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_dest_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_1000)
    begin
        if ((((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_dest_V_blk_n <= in_V_dest_V_empty_n;
        else 
            in_V_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_dest_V_read <= in_V_id_V0_update;
    in_V_id_V0_status <= (in_V_user_V_empty_n and in_V_last_V_empty_n and in_V_id_V_empty_n and in_V_dest_V_empty_n and in_V_data_V_empty_n);

    in_V_id_V0_update_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_1000, in_V_id_V0_status, out_V_id_V1_status, ap_block_pp0_stage0_11001)
    begin
        if ((((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_id_V0_update <= ap_const_logic_1;
        else 
            in_V_id_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    in_V_id_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_id_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_1000)
    begin
        if ((((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_id_V_blk_n <= in_V_id_V_empty_n;
        else 
            in_V_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_id_V_read <= in_V_id_V0_update;

    in_V_last_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_last_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_1000)
    begin
        if ((((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_last_V_blk_n <= in_V_last_V_empty_n;
        else 
            in_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_last_V_read <= in_V_id_V0_update;

    in_V_user_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_user_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_1000)
    begin
        if ((((exitcond_flatten_reg_1000 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_user_V_blk_n <= in_V_user_V_empty_n;
        else 
            in_V_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_user_V_read <= in_V_id_V0_update;
    indvar_flatten_next_fu_557_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_321) + unsigned(ap_const_lv28_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_576_p2 <= std_logic_vector(unsigned(i_op_assign_1_mid2_fu_568_p3) + unsigned(ap_const_lv12_1));

    out_V_data_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg)
    begin
        if ((((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_data_V_blk_n <= out_V_data_V_full_n;
        else 
            out_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_data_V_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_data_V_dout, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg, in_V_id_V0_status, out_V_id_V1_status, ap_phi_mux_tmp_data_V_22_phi_fu_497_p4, ap_block_pp0_stage0_01001)
    begin
        if (((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_V_data_V_din <= ap_phi_mux_tmp_data_V_22_phi_fu_497_p4;
        elsif ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_data_V_din <= in_V_data_V_dout;
        else 
            out_V_data_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    out_V_data_V_write <= out_V_id_V1_update;

    out_V_dest_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_V_dest_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg)
    begin
        if ((((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_dest_V_blk_n <= out_V_dest_V_full_n;
        else 
            out_V_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_dest_V_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_dest_V_dout, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg, in_V_id_V0_status, out_V_id_V1_status, tmp_dest_V_1_reg_1029_pp0_iter3_reg, ap_block_pp0_stage0_01001)
    begin
        if (((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_V_dest_V_din <= tmp_dest_V_1_reg_1029_pp0_iter3_reg;
        elsif ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_dest_V_din <= in_V_dest_V_dout;
        else 
            out_V_dest_V_din <= "XXXXXXXX";
        end if; 
    end process;

    out_V_dest_V_write <= out_V_id_V1_update;
    out_V_id_V1_status <= (out_V_user_V_full_n and out_V_last_V_full_n and out_V_id_V_full_n and out_V_dest_V_full_n and out_V_data_V_full_n);

    out_V_id_V1_update_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg, in_V_id_V0_status, out_V_id_V1_status, ap_block_pp0_stage0_11001)
    begin
        if (((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            out_V_id_V1_update <= ap_const_logic_1;
        else 
            out_V_id_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    out_V_id_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_V_id_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg)
    begin
        if ((((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_id_V_blk_n <= out_V_id_V_full_n;
        else 
            out_V_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_id_V_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_id_V_dout, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg, in_V_id_V0_status, out_V_id_V1_status, tmp_id_V_1_reg_1024_pp0_iter3_reg, ap_block_pp0_stage0_01001)
    begin
        if (((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_V_id_V_din <= tmp_id_V_1_reg_1024_pp0_iter3_reg;
        elsif ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_id_V_din <= in_V_id_V_dout;
        else 
            out_V_id_V_din <= "XXXXXXXX";
        end if; 
    end process;

    out_V_id_V_write <= out_V_id_V1_update;

    out_V_last_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_V_last_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg)
    begin
        if ((((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_last_V_blk_n <= out_V_last_V_full_n;
        else 
            out_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_last_V_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_last_V_dout, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg, in_V_id_V0_status, out_V_id_V1_status, tmp_last_V_1_reg_1039_pp0_iter3_reg, ap_block_pp0_stage0_01001)
    begin
        if (((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_V_last_V_din <= tmp_last_V_1_reg_1039_pp0_iter3_reg;
        elsif ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_last_V_din <= in_V_last_V_dout;
        else 
            out_V_last_V_din <= "X";
        end if; 
    end process;

    out_V_last_V_write <= out_V_id_V1_update;

    out_V_user_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_V_user_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg)
    begin
        if ((((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_user_V_blk_n <= out_V_user_V_full_n;
        else 
            out_V_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_user_V_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_user_V_dout, ap_enable_reg_pp0_iter4, exitcond_flatten_reg_1000_pp0_iter3_reg, in_V_id_V0_status, out_V_id_V1_status, tmp_user_V_1_reg_1034_pp0_iter3_reg, ap_block_pp0_stage0_01001)
    begin
        if (((exitcond_flatten_reg_1000_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_V_user_V_din <= tmp_user_V_1_reg_1034_pp0_iter3_reg;
        elsif ((not(((real_start = ap_const_logic_0) or (out_V_id_V1_status = ap_const_logic_0) or (in_V_id_V0_status = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_user_V_din <= in_V_user_V_dout;
        else 
            out_V_user_V_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    out_V_user_V_write <= out_V_id_V1_update;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_113_10_fu_722_p2 <= "1" when (unsigned(i_op_assign_2_10_fu_716_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_11_fu_733_p2 <= "1" when (unsigned(i_op_assign_2_11_fu_727_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_12_fu_744_p2 <= "1" when (unsigned(i_op_assign_2_12_fu_738_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_13_fu_755_p2 <= "1" when (unsigned(i_op_assign_2_13_fu_749_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_14_fu_766_p2 <= "1" when (unsigned(i_op_assign_2_14_fu_760_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_1_fu_612_p2 <= "1" when (unsigned(i_op_assign_2_s_fu_606_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_2_fu_623_p2 <= "1" when (unsigned(i_op_assign_2_1_fu_617_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_3_fu_634_p2 <= "1" when (unsigned(i_op_assign_2_2_fu_628_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_4_fu_645_p2 <= "1" when (unsigned(i_op_assign_2_3_fu_639_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_5_fu_656_p2 <= "1" when (unsigned(i_op_assign_2_4_fu_650_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_6_fu_667_p2 <= "1" when (unsigned(i_op_assign_2_5_fu_661_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_7_fu_678_p2 <= "1" when (unsigned(i_op_assign_2_6_fu_672_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_8_fu_689_p2 <= "1" when (unsigned(i_op_assign_2_7_fu_683_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_9_fu_700_p2 <= "1" when (unsigned(i_op_assign_2_8_fu_694_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_113_s_fu_711_p2 <= "1" when (unsigned(i_op_assign_2_9_fu_705_p2) < unsigned(tmp_reg_975)) else "0";
    tmp_4_fu_582_p3 <= (i_op_assign_1_mid2_reg_1009 & ap_const_lv4_0);
    tmp_56_cast1_fu_530_p4 <= in_V_data_V_dout(47 downto 36);
    tmp_5_fu_589_p2 <= "1" when (unsigned(tmp_4_fu_582_p3) < unsigned(tmp_reg_975)) else "0";
    tmp_data_V_10_fu_810_p5 <= (ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4(511 downto 160) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_3_phi_fu_375_p4(127 downto 0));
    tmp_data_V_11_fu_823_p5 <= (ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4(511 downto 192) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_4_phi_fu_385_p4(159 downto 0));
    tmp_data_V_12_fu_836_p5 <= (ap_phi_mux_tmp_data_V_8_5_phi_fu_395_p4(511 downto 224) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_5_phi_fu_395_p4(191 downto 0));
    tmp_data_V_13_fu_848_p5 <= (ap_phi_reg_pp0_iter3_tmp_data_V_8_6_reg_403(511 downto 256) & ap_const_lv32_80000000 & ap_phi_reg_pp0_iter3_tmp_data_V_8_6_reg_403(223 downto 0));
    tmp_data_V_14_fu_861_p5 <= (ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4(511 downto 288) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_7_phi_fu_416_p4(255 downto 0));
    tmp_data_V_15_fu_874_p5 <= (ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4(511 downto 320) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_8_phi_fu_426_p4(287 downto 0));
    tmp_data_V_16_fu_887_p5 <= (ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4(511 downto 352) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_9_phi_fu_436_p4(319 downto 0));
    tmp_data_V_17_fu_900_p5 <= (ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4(511 downto 384) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_s_phi_fu_446_p4(351 downto 0));
    tmp_data_V_18_fu_913_p5 <= (ap_phi_mux_tmp_data_V_8_10_phi_fu_456_p4(511 downto 416) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_10_phi_fu_456_p4(383 downto 0));
    tmp_data_V_19_fu_925_p5 <= (ap_phi_reg_pp0_iter4_tmp_data_V_8_11_reg_464(511 downto 448) & ap_const_lv32_80000000 & ap_phi_reg_pp0_iter4_tmp_data_V_8_11_reg_464(415 downto 0));
    tmp_data_V_20_fu_938_p5 <= (ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4(511 downto 480) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_12_phi_fu_477_p4(447 downto 0));
    tmp_data_V_21_fu_951_p5 <= (ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_13_phi_fu_487_p4(479 downto 0));
    tmp_data_V_5_fu_594_p5 <= (in_V_data_V_dout(511 downto 32) & ap_const_lv32_80000000);
    tmp_data_V_6_fu_771_p5 <= (ap_phi_reg_pp0_iter2_tmp_data_V_8_reg_343(511 downto 64) & ap_const_lv32_80000000 & ap_phi_reg_pp0_iter2_tmp_data_V_8_reg_343(31 downto 0));
    tmp_data_V_7_fu_784_p5 <= (ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4(511 downto 96) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_1_phi_fu_355_p4(63 downto 0));
    tmp_data_V_9_fu_797_p5 <= (ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4(511 downto 128) & ap_const_lv32_80000000 & ap_phi_mux_tmp_data_V_8_2_phi_fu_365_p4(95 downto 0));
    tmp_fu_540_p1 <= in_V_data_V_dout(16 - 1 downto 0);
end behav;
