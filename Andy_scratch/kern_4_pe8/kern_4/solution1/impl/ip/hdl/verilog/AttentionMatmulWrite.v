// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AttentionMatmulWrite (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_n_r_V_V_dout,
        in_n_r_V_V_empty_n,
        in_n_r_V_V_read,
        in_n_c_V_V_dout,
        in_n_c_V_V_empty_n,
        in_n_c_V_V_read,
        in_0_0_V_V_dout,
        in_0_0_V_V_empty_n,
        in_0_0_V_V_read,
        in_0_1_V_V_dout,
        in_0_1_V_V_empty_n,
        in_0_1_V_V_read,
        in_1_0_V_V_dout,
        in_1_0_V_V_empty_n,
        in_1_0_V_V_read,
        in_1_1_V_V_dout,
        in_1_1_V_V_empty_n,
        in_1_1_V_V_read,
        in_2_0_V_V_dout,
        in_2_0_V_V_empty_n,
        in_2_0_V_V_read,
        in_2_1_V_V_dout,
        in_2_1_V_V_empty_n,
        in_2_1_V_V_read,
        in_3_0_V_V_dout,
        in_3_0_V_V_empty_n,
        in_3_0_V_V_read,
        in_3_1_V_V_dout,
        in_3_1_V_V_empty_n,
        in_3_1_V_V_read,
        out_V_data_V_din,
        out_V_data_V_full_n,
        out_V_data_V_write,
        out_V_id_V_din,
        out_V_id_V_full_n,
        out_V_id_V_write,
        out_V_dest_V_din,
        out_V_dest_V_full_n,
        out_V_dest_V_write,
        out_V_user_V_din,
        out_V_user_V_full_n,
        out_V_user_V_write,
        out_V_last_V_din,
        out_V_last_V_full_n,
        out_V_last_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_n_r_V_V_dout;
input   in_n_r_V_V_empty_n;
output   in_n_r_V_V_read;
input  [31:0] in_n_c_V_V_dout;
input   in_n_c_V_V_empty_n;
output   in_n_c_V_V_read;
input  [31:0] in_0_0_V_V_dout;
input   in_0_0_V_V_empty_n;
output   in_0_0_V_V_read;
input  [31:0] in_0_1_V_V_dout;
input   in_0_1_V_V_empty_n;
output   in_0_1_V_V_read;
input  [31:0] in_1_0_V_V_dout;
input   in_1_0_V_V_empty_n;
output   in_1_0_V_V_read;
input  [31:0] in_1_1_V_V_dout;
input   in_1_1_V_V_empty_n;
output   in_1_1_V_V_read;
input  [31:0] in_2_0_V_V_dout;
input   in_2_0_V_V_empty_n;
output   in_2_0_V_V_read;
input  [31:0] in_2_1_V_V_dout;
input   in_2_1_V_V_empty_n;
output   in_2_1_V_V_read;
input  [31:0] in_3_0_V_V_dout;
input   in_3_0_V_V_empty_n;
output   in_3_0_V_V_read;
input  [31:0] in_3_1_V_V_dout;
input   in_3_1_V_V_empty_n;
output   in_3_1_V_V_read;
output  [511:0] out_V_data_V_din;
input   out_V_data_V_full_n;
output   out_V_data_V_write;
output  [7:0] out_V_id_V_din;
input   out_V_id_V_full_n;
output   out_V_id_V_write;
output  [7:0] out_V_dest_V_din;
input   out_V_dest_V_full_n;
output   out_V_dest_V_write;
output  [15:0] out_V_user_V_din;
input   out_V_user_V_full_n;
output   out_V_user_V_write;
output  [0:0] out_V_last_V_din;
input   out_V_last_V_full_n;
output   out_V_last_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_n_r_V_V_read;
reg in_n_c_V_V_read;
reg in_0_0_V_V_read;
reg in_0_1_V_V_read;
reg in_1_0_V_V_read;
reg in_1_1_V_V_read;
reg in_2_0_V_V_read;
reg in_2_1_V_V_read;
reg in_3_0_V_V_read;
reg in_3_1_V_V_read;
reg[511:0] out_V_data_V_din;
reg[15:0] out_V_user_V_din;
reg[0:0] out_V_last_V_din;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_n_r_V_V_blk_n;
reg    in_n_c_V_V_blk_n;
reg    in_0_0_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    in_0_1_V_V_blk_n;
reg    in_1_0_V_V_blk_n;
reg    in_1_1_V_V_blk_n;
reg    in_2_0_V_V_blk_n;
reg    in_2_1_V_V_blk_n;
reg    in_3_0_V_V_blk_n;
reg    in_3_1_V_V_blk_n;
reg    out_V_data_V_blk_n;
wire    ap_CS_fsm_state2;
reg   [0:0] index_reg_1067;
reg    out_V_id_V_blk_n;
reg    out_V_dest_V_blk_n;
reg    out_V_user_V_blk_n;
reg    out_V_last_V_blk_n;
reg   [28:0] i_op_assign_reg_440;
reg   [31:0] tmp_V_reg_1027;
reg    ap_block_state1;
reg   [31:0] tmp_V_114_reg_1032;
reg   [15:0] tmp_reg_1037;
reg   [28:0] tmp_4_reg_1042;
wire   [15:0] temp_user_V_fu_494_p2;
reg   [15:0] temp_user_V_reg_1048;
wire    out_V_id_V1_status;
wire   [29:0] ret_V_1_fu_503_p2;
reg   [29:0] ret_V_1_reg_1053;
wire   [0:0] exitcond_fu_509_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [28:0] i_fu_514_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] index_fu_520_p1;
wire   [0:0] temp_last_V_fu_528_p2;
reg   [0:0] temp_last_V_reg_1072;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    out_V_id_V1_update;
wire   [511:0] p_Result_s_fu_485_p4;
wire   [511:0] tmp_data_V_3_fu_886_p17;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] out_data_8_V_fu_294;
wire   [31:0] out_data_8_V_2_fu_602_p3;
reg   [31:0] out_data_9_V_fu_298;
wire   [31:0] out_data_9_V_2_fu_630_p3;
reg   [31:0] out_data_10_V_fu_302;
wire   [31:0] out_data_10_V_2_fu_658_p3;
reg   [31:0] out_data_11_V_fu_306;
wire   [31:0] out_data_11_V_2_fu_686_p3;
reg   [31:0] out_data_12_V_fu_310;
wire   [31:0] out_data_12_V_2_fu_714_p3;
reg   [31:0] out_data_13_V_fu_314;
wire   [31:0] out_data_13_V_2_fu_742_p3;
reg   [31:0] out_data_14_V_fu_318;
wire   [31:0] out_data_14_V_2_fu_770_p3;
reg   [31:0] out_data_15_V_fu_322;
wire   [31:0] out_data_15_V_2_fu_798_p3;
reg   [31:0] out_data_8_V_3_fu_326;
wire   [31:0] out_data_8_V_1_fu_594_p3;
reg   [31:0] out_data_9_V_3_fu_330;
wire   [31:0] out_data_9_V_1_fu_622_p3;
reg   [31:0] out_data_10_V_3_fu_334;
wire   [31:0] out_data_10_V_1_fu_650_p3;
reg   [31:0] out_data_11_V_3_fu_338;
wire   [31:0] out_data_11_V_1_fu_678_p3;
reg   [31:0] out_data_12_V_3_fu_342;
wire   [31:0] out_data_12_V_1_fu_706_p3;
reg   [31:0] out_data_13_V_3_fu_346;
wire   [31:0] out_data_13_V_1_fu_734_p3;
reg   [31:0] out_data_14_V_3_fu_350;
wire   [31:0] out_data_14_V_1_fu_762_p3;
reg   [31:0] out_data_15_V_3_fu_354;
wire   [31:0] out_data_15_V_1_fu_790_p3;
wire   [15:0] tmp_11_fu_451_p1;
wire   [15:0] tmp_12_fu_455_p1;
wire   [31:0] ret_V_fu_923_p2;
wire   [29:0] lhs_V_cast_fu_500_p1;
wire   [29:0] tmp_54_cast_fu_524_p1;
wire   [3:0] tmp_95_t_fu_581_p3;
wire   [0:0] cond_fu_588_p2;
wire   [3:0] tmp_102_0_15_t_fu_610_p2;
wire   [0:0] cond1_fu_616_p2;
wire   [3:0] tmp_101_1_06_t_fu_638_p2;
wire   [0:0] cond2_fu_644_p2;
wire   [3:0] tmp_102_1_18_t_fu_666_p2;
wire   [0:0] cond3_fu_672_p2;
wire   [3:0] tmp_101_2_09_t_fu_694_p2;
wire   [0:0] cond4_fu_700_p2;
wire   [3:0] tmp_102_2_111_t_fu_722_p2;
wire   [0:0] cond5_fu_728_p2;
wire   [3:0] tmp_101_3_012_t_fu_750_p2;
wire   [0:0] cond6_fu_756_p2;
wire   [3:0] tmp_102_3_114_t_fu_778_p2;
wire   [0:0] cond7_fu_784_p2;
wire   [15:0] ret_V_fu_923_p0;
wire   [15:0] ret_V_fu_923_p1;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] ret_V_fu_923_p00;
wire   [31:0] ret_V_fu_923_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

kernel_4_mul_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
kernel_4_mul_mul_16ns_16ns_32_1_1_U1865(
    .din0(ret_V_fu_923_p0),
    .din1(ret_V_fu_923_p1),
    .dout(ret_V_fu_923_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_509_p2 == 1'd0))) begin
        i_op_assign_reg_440 <= i_fu_514_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        i_op_assign_reg_440 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_509_p2 == 1'd0))) begin
        index_reg_1067 <= index_fu_520_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_data_10_V_3_fu_334 <= out_data_10_V_1_fu_650_p3;
        out_data_10_V_fu_302 <= out_data_10_V_2_fu_658_p3;
        out_data_11_V_3_fu_338 <= out_data_11_V_1_fu_678_p3;
        out_data_11_V_fu_306 <= out_data_11_V_2_fu_686_p3;
        out_data_12_V_3_fu_342 <= out_data_12_V_1_fu_706_p3;
        out_data_12_V_fu_310 <= out_data_12_V_2_fu_714_p3;
        out_data_13_V_3_fu_346 <= out_data_13_V_1_fu_734_p3;
        out_data_13_V_fu_314 <= out_data_13_V_2_fu_742_p3;
        out_data_14_V_3_fu_350 <= out_data_14_V_1_fu_762_p3;
        out_data_14_V_fu_318 <= out_data_14_V_2_fu_770_p3;
        out_data_15_V_3_fu_354 <= out_data_15_V_1_fu_790_p3;
        out_data_15_V_fu_322 <= out_data_15_V_2_fu_798_p3;
        out_data_8_V_3_fu_326 <= out_data_8_V_1_fu_594_p3;
        out_data_8_V_fu_294 <= out_data_8_V_2_fu_602_p3;
        out_data_9_V_3_fu_330 <= out_data_9_V_1_fu_622_p3;
        out_data_9_V_fu_298 <= out_data_9_V_2_fu_630_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        ret_V_1_reg_1053 <= ret_V_1_fu_503_p2;
        temp_user_V_reg_1048 <= temp_user_V_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_509_p2 == 1'd0) & (index_fu_520_p1 == 1'd1))) begin
        temp_last_V_reg_1072 <= temp_last_V_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_n_c_V_V_empty_n == 1'b0) | (in_n_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_4_reg_1042 <= {{ret_V_fu_923_p2[31:3]}};
        tmp_V_114_reg_1032 <= in_n_c_V_V_dout;
        tmp_V_reg_1027 <= in_n_r_V_V_dout;
        tmp_reg_1037 <= {{ret_V_fu_923_p2[19:4]}};
    end
end

always @ (*) begin
    if ((exitcond_fu_509_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_0_0_V_V_blk_n = in_0_0_V_V_empty_n;
    end else begin
        in_0_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_0_0_V_V_read = 1'b1;
    end else begin
        in_0_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_0_1_V_V_blk_n = in_0_1_V_V_empty_n;
    end else begin
        in_0_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_0_1_V_V_read = 1'b1;
    end else begin
        in_0_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_1_0_V_V_blk_n = in_1_0_V_V_empty_n;
    end else begin
        in_1_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_1_0_V_V_read = 1'b1;
    end else begin
        in_1_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_1_1_V_V_blk_n = in_1_1_V_V_empty_n;
    end else begin
        in_1_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_1_1_V_V_read = 1'b1;
    end else begin
        in_1_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_2_0_V_V_blk_n = in_2_0_V_V_empty_n;
    end else begin
        in_2_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_2_0_V_V_read = 1'b1;
    end else begin
        in_2_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_2_1_V_V_blk_n = in_2_1_V_V_empty_n;
    end else begin
        in_2_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_2_1_V_V_read = 1'b1;
    end else begin
        in_2_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_3_0_V_V_blk_n = in_3_0_V_V_empty_n;
    end else begin
        in_3_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_3_0_V_V_read = 1'b1;
    end else begin
        in_3_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_3_1_V_V_blk_n = in_3_1_V_V_empty_n;
    end else begin
        in_3_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_3_1_V_V_read = 1'b1;
    end else begin
        in_3_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_n_c_V_V_blk_n = in_n_c_V_V_empty_n;
    end else begin
        in_n_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_n_c_V_V_empty_n == 1'b0) | (in_n_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_n_c_V_V_read = 1'b1;
    end else begin
        in_n_c_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_n_r_V_V_blk_n = in_n_r_V_V_empty_n;
    end else begin
        in_n_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_n_c_V_V_empty_n == 1'b0) | (in_n_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_n_r_V_V_read = 1'b1;
    end else begin
        in_n_r_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (index_reg_1067 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_data_V_blk_n = out_V_data_V_full_n;
    end else begin
        out_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (index_reg_1067 == 1'd1))) begin
        out_V_data_V_din = tmp_data_V_3_fu_886_p17;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        out_V_data_V_din = p_Result_s_fu_485_p4;
    end else begin
        out_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (index_reg_1067 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_dest_V_blk_n = out_V_dest_V_full_n;
    end else begin
        out_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (index_reg_1067 == 1'd1)))) begin
        out_V_id_V1_update = 1'b1;
    end else begin
        out_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (index_reg_1067 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_id_V_blk_n = out_V_id_V_full_n;
    end else begin
        out_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (index_reg_1067 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_last_V_blk_n = out_V_last_V_full_n;
    end else begin
        out_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (index_reg_1067 == 1'd1))) begin
        out_V_last_V_din = temp_last_V_reg_1072;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        out_V_last_V_din = 1'd0;
    end else begin
        out_V_last_V_din = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (index_reg_1067 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_user_V_blk_n = out_V_user_V_full_n;
    end else begin
        out_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (index_reg_1067 == 1'd1))) begin
        out_V_user_V_din = temp_user_V_reg_1048;
    end else if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
        out_V_user_V_din = temp_user_V_fu_494_p2;
    end else begin
        out_V_user_V_din = 'bx;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_n_c_V_V_empty_n == 1'b0) | (in_n_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (out_V_id_V1_status == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_509_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_509_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in_3_1_V_V_empty_n == 1'b0) | (in_3_0_V_V_empty_n == 1'b0) | (in_2_1_V_V_empty_n == 1'b0) | (in_2_0_V_V_empty_n == 1'b0) | (in_1_1_V_V_empty_n == 1'b0) | (in_1_0_V_V_empty_n == 1'b0) | (in_0_1_V_V_empty_n == 1'b0) | (in_0_0_V_V_empty_n == 1'b0) | ((out_V_id_V1_status == 1'b0) & (index_reg_1067 == 1'd1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in_3_1_V_V_empty_n == 1'b0) | (in_3_0_V_V_empty_n == 1'b0) | (in_2_1_V_V_empty_n == 1'b0) | (in_2_0_V_V_empty_n == 1'b0) | (in_1_1_V_V_empty_n == 1'b0) | (in_1_0_V_V_empty_n == 1'b0) | (in_0_1_V_V_empty_n == 1'b0) | (in_0_0_V_V_empty_n == 1'b0) | ((out_V_id_V1_status == 1'b0) & (index_reg_1067 == 1'd1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in_3_1_V_V_empty_n == 1'b0) | (in_3_0_V_V_empty_n == 1'b0) | (in_2_1_V_V_empty_n == 1'b0) | (in_2_0_V_V_empty_n == 1'b0) | (in_1_1_V_V_empty_n == 1'b0) | (in_1_0_V_V_empty_n == 1'b0) | (in_0_1_V_V_empty_n == 1'b0) | (in_0_0_V_V_empty_n == 1'b0) | ((out_V_id_V1_status == 1'b0) & (index_reg_1067 == 1'd1))));
end

always @ (*) begin
    ap_block_state1 = ((in_n_c_V_V_empty_n == 1'b0) | (in_n_r_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((in_3_1_V_V_empty_n == 1'b0) | (in_3_0_V_V_empty_n == 1'b0) | (in_2_1_V_V_empty_n == 1'b0) | (in_2_0_V_V_empty_n == 1'b0) | (in_1_1_V_V_empty_n == 1'b0) | (in_1_0_V_V_empty_n == 1'b0) | (in_0_1_V_V_empty_n == 1'b0) | (in_0_0_V_V_empty_n == 1'b0) | ((out_V_id_V1_status == 1'b0) & (index_reg_1067 == 1'd1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cond1_fu_616_p2 = ((tmp_102_0_15_t_fu_610_p2 == 4'd1) ? 1'b1 : 1'b0);

assign cond2_fu_644_p2 = ((tmp_101_1_06_t_fu_638_p2 == 4'd2) ? 1'b1 : 1'b0);

assign cond3_fu_672_p2 = ((tmp_102_1_18_t_fu_666_p2 == 4'd3) ? 1'b1 : 1'b0);

assign cond4_fu_700_p2 = ((tmp_101_2_09_t_fu_694_p2 == 4'd4) ? 1'b1 : 1'b0);

assign cond5_fu_728_p2 = ((tmp_102_2_111_t_fu_722_p2 == 4'd5) ? 1'b1 : 1'b0);

assign cond6_fu_756_p2 = ((tmp_101_3_012_t_fu_750_p2 == 4'd6) ? 1'b1 : 1'b0);

assign cond7_fu_784_p2 = ((tmp_102_3_114_t_fu_778_p2 == 4'd7) ? 1'b1 : 1'b0);

assign cond_fu_588_p2 = ((tmp_95_t_fu_581_p3 == 4'd0) ? 1'b1 : 1'b0);

assign exitcond_fu_509_p2 = ((i_op_assign_reg_440 == tmp_4_reg_1042) ? 1'b1 : 1'b0);

assign i_fu_514_p2 = (i_op_assign_reg_440 + 29'd1);

assign index_fu_520_p1 = i_op_assign_reg_440[0:0];

assign lhs_V_cast_fu_500_p1 = tmp_4_reg_1042;

assign out_V_data_V_write = out_V_id_V1_update;

assign out_V_dest_V_din = 8'd16;

assign out_V_dest_V_write = out_V_id_V1_update;

assign out_V_id_V1_status = (out_V_user_V_full_n & out_V_last_V_full_n & out_V_id_V_full_n & out_V_dest_V_full_n & out_V_data_V_full_n);

assign out_V_id_V_din = 8'd4;

assign out_V_id_V_write = out_V_id_V1_update;

assign out_V_last_V_write = out_V_id_V1_update;

assign out_V_user_V_write = out_V_id_V1_update;

assign out_data_10_V_1_fu_650_p3 = ((cond2_fu_644_p2[0:0] === 1'b1) ? out_data_10_V_3_fu_334 : in_1_0_V_V_dout);

assign out_data_10_V_2_fu_658_p3 = ((cond2_fu_644_p2[0:0] === 1'b1) ? in_1_0_V_V_dout : out_data_10_V_fu_302);

assign out_data_11_V_1_fu_678_p3 = ((cond3_fu_672_p2[0:0] === 1'b1) ? out_data_11_V_3_fu_338 : in_1_1_V_V_dout);

assign out_data_11_V_2_fu_686_p3 = ((cond3_fu_672_p2[0:0] === 1'b1) ? in_1_1_V_V_dout : out_data_11_V_fu_306);

assign out_data_12_V_1_fu_706_p3 = ((cond4_fu_700_p2[0:0] === 1'b1) ? out_data_12_V_3_fu_342 : in_2_0_V_V_dout);

assign out_data_12_V_2_fu_714_p3 = ((cond4_fu_700_p2[0:0] === 1'b1) ? in_2_0_V_V_dout : out_data_12_V_fu_310);

assign out_data_13_V_1_fu_734_p3 = ((cond5_fu_728_p2[0:0] === 1'b1) ? out_data_13_V_3_fu_346 : in_2_1_V_V_dout);

assign out_data_13_V_2_fu_742_p3 = ((cond5_fu_728_p2[0:0] === 1'b1) ? in_2_1_V_V_dout : out_data_13_V_fu_314);

assign out_data_14_V_1_fu_762_p3 = ((cond6_fu_756_p2[0:0] === 1'b1) ? out_data_14_V_3_fu_350 : in_3_0_V_V_dout);

assign out_data_14_V_2_fu_770_p3 = ((cond6_fu_756_p2[0:0] === 1'b1) ? in_3_0_V_V_dout : out_data_14_V_fu_318);

assign out_data_15_V_1_fu_790_p3 = ((cond7_fu_784_p2[0:0] === 1'b1) ? out_data_15_V_3_fu_354 : in_3_1_V_V_dout);

assign out_data_15_V_2_fu_798_p3 = ((cond7_fu_784_p2[0:0] === 1'b1) ? in_3_1_V_V_dout : out_data_15_V_fu_322);

assign out_data_8_V_1_fu_594_p3 = ((cond_fu_588_p2[0:0] === 1'b1) ? out_data_8_V_3_fu_326 : in_0_0_V_V_dout);

assign out_data_8_V_2_fu_602_p3 = ((cond_fu_588_p2[0:0] === 1'b1) ? in_0_0_V_V_dout : out_data_8_V_fu_294);

assign out_data_9_V_1_fu_622_p3 = ((cond1_fu_616_p2[0:0] === 1'b1) ? out_data_9_V_3_fu_330 : in_0_1_V_V_dout);

assign out_data_9_V_2_fu_630_p3 = ((cond1_fu_616_p2[0:0] === 1'b1) ? in_0_1_V_V_dout : out_data_9_V_fu_298);

assign p_Result_s_fu_485_p4 = {{{{448'd0}, {tmp_V_114_reg_1032}}}, {tmp_V_reg_1027}};

assign ret_V_1_fu_503_p2 = ($signed(30'd1073741823) + $signed(lhs_V_cast_fu_500_p1));

assign ret_V_fu_923_p0 = ret_V_fu_923_p00;

assign ret_V_fu_923_p00 = tmp_11_fu_451_p1;

assign ret_V_fu_923_p1 = ret_V_fu_923_p10;

assign ret_V_fu_923_p10 = tmp_12_fu_455_p1;

assign start_out = real_start;

assign temp_last_V_fu_528_p2 = ((tmp_54_cast_fu_524_p1 == ret_V_1_reg_1053) ? 1'b1 : 1'b0);

assign temp_user_V_fu_494_p2 = (16'd1 + tmp_reg_1037);

assign tmp_101_1_06_t_fu_638_p2 = (tmp_95_t_fu_581_p3 | 4'd2);

assign tmp_101_2_09_t_fu_694_p2 = (tmp_95_t_fu_581_p3 | 4'd4);

assign tmp_101_3_012_t_fu_750_p2 = (tmp_95_t_fu_581_p3 | 4'd6);

assign tmp_102_0_15_t_fu_610_p2 = (tmp_95_t_fu_581_p3 | 4'd1);

assign tmp_102_1_18_t_fu_666_p2 = (tmp_95_t_fu_581_p3 | 4'd3);

assign tmp_102_2_111_t_fu_722_p2 = (tmp_95_t_fu_581_p3 | 4'd5);

assign tmp_102_3_114_t_fu_778_p2 = (tmp_95_t_fu_581_p3 | 4'd7);

assign tmp_11_fu_451_p1 = in_n_r_V_V_dout[15:0];

assign tmp_12_fu_455_p1 = in_n_c_V_V_dout[15:0];

assign tmp_54_cast_fu_524_p1 = i_op_assign_reg_440;

assign tmp_95_t_fu_581_p3 = {{index_reg_1067}, {3'd0}};

assign tmp_data_V_3_fu_886_p17 = {{{{{{{{{{{{{{{{out_data_15_V_1_fu_790_p3}, {out_data_14_V_1_fu_762_p3}}, {out_data_13_V_1_fu_734_p3}}, {out_data_12_V_1_fu_706_p3}}, {out_data_11_V_1_fu_678_p3}}, {out_data_10_V_1_fu_650_p3}}, {out_data_9_V_1_fu_622_p3}}, {out_data_8_V_1_fu_594_p3}}, {out_data_15_V_2_fu_798_p3}}, {out_data_14_V_2_fu_770_p3}}, {out_data_13_V_2_fu_742_p3}}, {out_data_12_V_2_fu_714_p3}}, {out_data_11_V_2_fu_686_p3}}, {out_data_10_V_2_fu_658_p3}}, {out_data_9_V_2_fu_630_p3}}, {out_data_8_V_2_fu_602_p3}};

endmodule //AttentionMatmulWrite
