-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_process_1178 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_proc_1_iter_c_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_proc_1_iter_c_V_V_empty_n : IN STD_LOGIC;
    in_proc_1_iter_c_V_V_read : OUT STD_LOGIC;
    in_proc_1_iter_r_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_proc_1_iter_r_V_V_empty_n : IN STD_LOGIC;
    in_proc_1_iter_r_V_V_read : OUT STD_LOGIC;
    in_quant_iter_r_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_quant_iter_r_V_V_full_n : IN STD_LOGIC;
    in_quant_iter_r_V_V_write : OUT STD_LOGIC;
    in_quant_iter_c_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_quant_iter_c_V_V_full_n : IN STD_LOGIC;
    in_quant_iter_c_V_V_write : OUT STD_LOGIC;
    in_proc_1_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_proc_1_V_V_empty_n : IN STD_LOGIC;
    in_proc_1_V_V_read : OUT STD_LOGIC;
    in_quant_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    in_quant_V_V_full_n : IN STD_LOGIC;
    in_quant_V_V_write : OUT STD_LOGIC );
end;


architecture behav of softmax_process_1178 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_FFFFC694 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111100011010010100";
    constant ap_const_lv65_10B7E6EC3 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100001011011111100110111011000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_1EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101010";
    constant ap_const_lv33_778 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000011101111000";
    constant ap_const_lv64_1544FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000101010100010011111111";
    constant ap_const_lv24_1E : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000011110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_proc_1_iter_c_V_V_blk_n : STD_LOGIC;
    signal in_proc_1_iter_r_V_V_blk_n : STD_LOGIC;
    signal in_quant_iter_r_V_V_blk_n : STD_LOGIC;
    signal in_quant_iter_c_V_V_blk_n : STD_LOGIC;
    signal in_proc_1_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_403 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_quant_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_403_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_193 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_96_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_V_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_210_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_flatten_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_403_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_403_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_403_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_403_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_403_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_403_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_221_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_97_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0126_tmp_V_22_load_s_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0126_tmp_V_22_load_s_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0126_tmp_V_22_load_s_reg_422_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_243_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_427 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_5_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_i_fu_302_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_i_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_309_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_reg_444 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_reg_444_pp0_iter4_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_reg_444_pp0_iter5_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_reg_444_pp0_iter6_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_i_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_reg_449_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_i_fu_326_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_25_i_reg_455 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_28_i_fu_338_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_i_reg_460 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_98_fu_376_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_V_98_reg_465 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_210_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul_fu_257_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_6_fu_262_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_276_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_289_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_i_fu_313_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_10_i_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_i_fu_323_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_28_i_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_i_fu_338_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_32_i_fu_349_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_30_i_fu_344_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_i_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_i_fu_358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_368_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_364_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_210_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_210_p10 : STD_LOGIC_VECTOR (63 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_193 <= indvar_flatten_next_fu_221_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_193 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_398 <= bound_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_403 <= exitcond_flatten_fu_216_p2;
                exitcond_flatten_reg_403_pp0_iter1_reg <= exitcond_flatten_reg_403;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_403_pp0_iter2_reg <= exitcond_flatten_reg_403_pp0_iter1_reg;
                exitcond_flatten_reg_403_pp0_iter3_reg <= exitcond_flatten_reg_403_pp0_iter2_reg;
                exitcond_flatten_reg_403_pp0_iter4_reg <= exitcond_flatten_reg_403_pp0_iter3_reg;
                exitcond_flatten_reg_403_pp0_iter5_reg <= exitcond_flatten_reg_403_pp0_iter4_reg;
                exitcond_flatten_reg_403_pp0_iter6_reg <= exitcond_flatten_reg_403_pp0_iter5_reg;
                exitcond_flatten_reg_403_pp0_iter7_reg <= exitcond_flatten_reg_403_pp0_iter6_reg;
                p_0126_tmp_V_22_load_s_reg_422_pp0_iter3_reg <= p_0126_tmp_V_22_load_s_reg_422;
                tmp_23_i_reg_449_pp0_iter5_reg <= tmp_23_i_reg_449;
                tmp_8_reg_444_pp0_iter4_reg <= tmp_8_reg_444;
                tmp_8_reg_444_pp0_iter5_reg <= tmp_8_reg_444_pp0_iter4_reg;
                tmp_8_reg_444_pp0_iter6_reg <= tmp_8_reg_444_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_403_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_reg_427 <= mul_fu_243_p2;
                p_0126_tmp_V_22_load_s_reg_422 <= p_0126_tmp_V_22_load_s_fu_233_p3;
                tmp_5_reg_433 <= p_0126_tmp_V_22_load_s_fu_233_p3(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_403_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_22_i_reg_439 <= tmp_22_i_fu_302_p3;
                tmp_8_reg_444 <= tmp_8_fu_309_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_403_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_23_i_reg_449 <= tmp_23_i_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_403_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_25_i_reg_455 <= tmp_25_i_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_403_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_28_i_reg_460 <= tmp_28_i_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_quant_iter_c_V_V_full_n = ap_const_logic_0) or (in_quant_iter_r_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_empty_n = ap_const_logic_0) or (in_proc_1_iter_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_V_96_reg_388 <= in_proc_1_iter_c_V_V_dout;
                tmp_V_reg_393 <= in_proc_1_iter_r_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_97_reg_412 <= in_proc_1_V_V_dout;
                tmp_i_reg_417 <= tmp_i_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_403_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_98_reg_465 <= tmp_V_98_fu_376_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_proc_1_iter_c_V_V_empty_n, in_proc_1_iter_r_V_V_empty_n, in_quant_iter_r_V_V_full_n, in_quant_iter_c_V_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, exitcond_flatten_fu_216_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in_quant_iter_c_V_V_full_n = ap_const_logic_0) or (in_quant_iter_r_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_empty_n = ap_const_logic_0) or (in_proc_1_iter_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_216_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_216_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_proc_1_V_V_empty_n, in_quant_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_403, ap_enable_reg_pp0_iter8, exitcond_flatten_reg_403_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_flatten_reg_403_pp0_iter7_reg = ap_const_lv1_0) and (in_quant_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((exitcond_flatten_reg_403 = ap_const_lv1_0) and (in_proc_1_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_proc_1_V_V_empty_n, in_quant_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_403, ap_enable_reg_pp0_iter8, exitcond_flatten_reg_403_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_flatten_reg_403_pp0_iter7_reg = ap_const_lv1_0) and (in_quant_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((exitcond_flatten_reg_403 = ap_const_lv1_0) and (in_proc_1_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_proc_1_V_V_empty_n, in_quant_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_403, ap_enable_reg_pp0_iter8, exitcond_flatten_reg_403_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_flatten_reg_403_pp0_iter7_reg = ap_const_lv1_0) and (in_quant_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((exitcond_flatten_reg_403 = ap_const_lv1_0) and (in_proc_1_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, in_proc_1_iter_c_V_V_empty_n, in_proc_1_iter_r_V_V_empty_n, in_quant_iter_r_V_V_full_n, in_quant_iter_c_V_V_full_n)
    begin
                ap_block_state1 <= ((in_quant_iter_c_V_V_full_n = ap_const_logic_0) or (in_quant_iter_r_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_empty_n = ap_const_logic_0) or (in_proc_1_iter_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter8_assign_proc : process(in_quant_V_V_full_n, exitcond_flatten_reg_403_pp0_iter7_reg)
    begin
                ap_block_state11_pp0_stage0_iter8 <= ((exitcond_flatten_reg_403_pp0_iter7_reg = ap_const_lv1_0) and (in_quant_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(in_proc_1_V_V_empty_n, exitcond_flatten_reg_403)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((exitcond_flatten_reg_403 = ap_const_lv1_0) and (in_proc_1_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_flatten_fu_216_p2)
    begin
        if ((exitcond_flatten_fu_216_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_210_p0 <= bound_fu_210_p00(32 - 1 downto 0);
    bound_fu_210_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_96_reg_388),64));
    bound_fu_210_p1 <= bound_fu_210_p10(32 - 1 downto 0);
    bound_fu_210_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_393),64));
    bound_fu_210_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_210_p0) * unsigned(bound_fu_210_p1), 64));
    exitcond_flatten_fu_216_p2 <= "1" when (indvar_flatten_reg_193 = bound_reg_398) else "0";

    in_proc_1_V_V_blk_n_assign_proc : process(in_proc_1_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_403)
    begin
        if (((exitcond_flatten_reg_403 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_proc_1_V_V_blk_n <= in_proc_1_V_V_empty_n;
        else 
            in_proc_1_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_proc_1_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_403, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_403 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_proc_1_V_V_read <= ap_const_logic_1;
        else 
            in_proc_1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_proc_1_iter_c_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_proc_1_iter_c_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_proc_1_iter_c_V_V_blk_n <= in_proc_1_iter_c_V_V_empty_n;
        else 
            in_proc_1_iter_c_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_proc_1_iter_c_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_proc_1_iter_c_V_V_empty_n, in_proc_1_iter_r_V_V_empty_n, in_quant_iter_r_V_V_full_n, in_quant_iter_c_V_V_full_n)
    begin
        if ((not(((in_quant_iter_c_V_V_full_n = ap_const_logic_0) or (in_quant_iter_r_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_empty_n = ap_const_logic_0) or (in_proc_1_iter_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_proc_1_iter_c_V_V_read <= ap_const_logic_1;
        else 
            in_proc_1_iter_c_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_proc_1_iter_r_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_proc_1_iter_r_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_proc_1_iter_r_V_V_blk_n <= in_proc_1_iter_r_V_V_empty_n;
        else 
            in_proc_1_iter_r_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_proc_1_iter_r_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_proc_1_iter_c_V_V_empty_n, in_proc_1_iter_r_V_V_empty_n, in_quant_iter_r_V_V_full_n, in_quant_iter_c_V_V_full_n)
    begin
        if ((not(((in_quant_iter_c_V_V_full_n = ap_const_logic_0) or (in_quant_iter_r_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_empty_n = ap_const_logic_0) or (in_proc_1_iter_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_proc_1_iter_r_V_V_read <= ap_const_logic_1;
        else 
            in_proc_1_iter_r_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_quant_V_V_blk_n_assign_proc : process(in_quant_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, exitcond_flatten_reg_403_pp0_iter7_reg)
    begin
        if (((exitcond_flatten_reg_403_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            in_quant_V_V_blk_n <= in_quant_V_V_full_n;
        else 
            in_quant_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_quant_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_98_reg_465),64));

    in_quant_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter8, exitcond_flatten_reg_403_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_403_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_quant_V_V_write <= ap_const_logic_1;
        else 
            in_quant_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    in_quant_iter_c_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_quant_iter_c_V_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_quant_iter_c_V_V_blk_n <= in_quant_iter_c_V_V_full_n;
        else 
            in_quant_iter_c_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_quant_iter_c_V_V_din <= in_proc_1_iter_c_V_V_dout;

    in_quant_iter_c_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_proc_1_iter_c_V_V_empty_n, in_proc_1_iter_r_V_V_empty_n, in_quant_iter_r_V_V_full_n, in_quant_iter_c_V_V_full_n)
    begin
        if ((not(((in_quant_iter_c_V_V_full_n = ap_const_logic_0) or (in_quant_iter_r_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_empty_n = ap_const_logic_0) or (in_proc_1_iter_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_quant_iter_c_V_V_write <= ap_const_logic_1;
        else 
            in_quant_iter_c_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    in_quant_iter_r_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_quant_iter_r_V_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_quant_iter_r_V_V_blk_n <= in_quant_iter_r_V_V_full_n;
        else 
            in_quant_iter_r_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_quant_iter_r_V_V_din <= in_proc_1_iter_r_V_V_dout;

    in_quant_iter_r_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_proc_1_iter_c_V_V_empty_n, in_proc_1_iter_r_V_V_empty_n, in_quant_iter_r_V_V_full_n, in_quant_iter_c_V_V_full_n)
    begin
        if ((not(((in_quant_iter_c_V_V_full_n = ap_const_logic_0) or (in_quant_iter_r_V_V_full_n = ap_const_logic_0) or (in_proc_1_iter_r_V_V_empty_n = ap_const_logic_0) or (in_proc_1_iter_c_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_quant_iter_r_V_V_write <= ap_const_logic_1;
        else 
            in_quant_iter_r_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_221_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_193) + unsigned(ap_const_lv64_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_243_p1 <= p_0126_tmp_V_22_load_s_fu_233_p3;
    mul_fu_243_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_10B7E6EC3) * signed(mul_fu_243_p1))), 65));
    neg_mul_fu_257_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_427));
    neg_ti_fu_296_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_3_fu_289_p3));
    p_0126_tmp_V_22_load_s_fu_233_p3 <= 
        ap_const_lv32_FFFFC694 when (tmp_i_reg_417(0) = '1') else 
        tmp_V_97_reg_412;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_368_p3 <= tmp_38_i_fu_358_p2(63 downto 63);
    tmp_10_i_fu_313_p1 <= tmp_22_i_reg_439(26 - 1 downto 0);
    tmp_10_i_fu_313_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_1EA) * signed(tmp_10_i_fu_313_p1))), 32));
    tmp_22_i_fu_302_p3 <= 
        tmp_fu_272_p1 when (tmp_5_reg_433(0) = '1') else 
        neg_ti_fu_296_p2;
    tmp_23_i_fu_318_p2 <= std_logic_vector(signed(p_0126_tmp_V_22_load_s_reg_422_pp0_iter3_reg) + signed(tmp_10_i_fu_313_p2));
        tmp_24_i_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_i_reg_449),33));

    tmp_25_i_fu_326_p2 <= std_logic_vector(unsigned(ap_const_lv33_778) + unsigned(tmp_24_i_fu_323_p1));
    tmp_28_i_fu_338_p0 <= tmp_23_i_reg_449_pp0_iter5_reg;
    tmp_28_i_fu_338_p1 <= tmp_25_i_reg_455;
    tmp_28_i_fu_338_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_28_i_fu_338_p0) * signed(tmp_28_i_fu_338_p1))), 64));
        tmp_2_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_276_p4),32));

    tmp_30_i_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv64_1544FF) + unsigned(tmp_28_i_reg_460));
    tmp_32_i_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv24_1E) - unsigned(tmp_8_reg_444_pp0_iter6_reg));
    tmp_37_cast_i_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_i_fu_349_p2),64));
    tmp_38_i_fu_358_p2 <= std_logic_vector(shift_left(unsigned(tmp_30_i_fu_344_p2),to_integer(unsigned('0' & tmp_37_cast_i_fu_354_p1(31-1 downto 0)))));
    tmp_3_fu_289_p3 <= 
        tmp_fu_272_p1 when (tmp_5_reg_433(0) = '1') else 
        tmp_2_fu_285_p1;
    tmp_6_fu_262_p4 <= neg_mul_fu_257_p2(64 downto 41);
    tmp_7_fu_276_p4 <= mul_reg_427(64 downto 41);
    tmp_8_fu_309_p1 <= tmp_22_i_fu_302_p3(24 - 1 downto 0);
    tmp_9_fu_364_p1 <= tmp_38_i_fu_358_p2(63 - 1 downto 0);
    tmp_V_98_fu_376_p3 <= 
        ap_const_lv63_0 when (tmp_10_fu_368_p3(0) = '1') else 
        tmp_9_fu_364_p1;
        tmp_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_262_p4),32));

    tmp_i_fu_227_p2 <= "1" when (signed(in_proc_1_V_V_dout) < signed(ap_const_lv32_FFFFC694)) else "0";
end behav;
