// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "softmax_QuantAct_1_c.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic softmax_QuantAct_1_c::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic softmax_QuantAct_1_c::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> softmax_QuantAct_1_c::ap_ST_fsm_state1 = "1";
const sc_lv<4> softmax_QuantAct_1_c::ap_ST_fsm_state2 = "10";
const sc_lv<4> softmax_QuantAct_1_c::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> softmax_QuantAct_1_c::ap_ST_fsm_state9 = "1000";
const bool softmax_QuantAct_1_c::ap_const_boolean_1 = true;
const sc_lv<32> softmax_QuantAct_1_c::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool softmax_QuantAct_1_c::ap_const_boolean_0 = false;
const sc_lv<1> softmax_QuantAct_1_c::ap_const_lv1_1 = "1";
const sc_lv<32> softmax_QuantAct_1_c::ap_const_lv32_2 = "10";
const sc_lv<1> softmax_QuantAct_1_c::ap_const_lv1_0 = "0";
const sc_lv<32> softmax_QuantAct_1_c::ap_const_lv32_1 = "1";
const sc_lv<64> softmax_QuantAct_1_c::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> softmax_QuantAct_1_c::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<64> softmax_QuantAct_1_c::ap_const_lv64_1 = "1";
const sc_lv<95> softmax_QuantAct_1_c::ap_const_lv95_6048F5EC = "1100000010010001111010111101100";
const sc_lv<32> softmax_QuantAct_1_c::ap_const_lv32_41 = "1000001";
const sc_lv<32> softmax_QuantAct_1_c::ap_const_lv32_42 = "1000010";
const sc_lv<32> softmax_QuantAct_1_c::ap_const_lv32_51 = "1010001";
const sc_lv<16> softmax_QuantAct_1_c::ap_const_lv16_1 = "1";
const sc_lv<32> softmax_QuantAct_1_c::ap_const_lv32_3 = "11";

softmax_QuantAct_1_c::softmax_QuantAct_1_c(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel_4_mul_32ns_64s_95_2_1_U1917 = new kernel_4_mul_32ns_64s_95_2_1<1,2,32,64,95>("kernel_4_mul_32ns_64s_95_2_1_U1917");
    kernel_4_mul_32ns_64s_95_2_1_U1917->clk(ap_clk);
    kernel_4_mul_32ns_64s_95_2_1_U1917->reset(ap_rst);
    kernel_4_mul_32ns_64s_95_2_1_U1917->din0(grp_fu_289_p0);
    kernel_4_mul_32ns_64s_95_2_1_U1917->din1(tmp_V_111_reg_401);
    kernel_4_mul_32ns_64s_95_2_1_U1917->ce(grp_fu_289_ce);
    kernel_4_mul_32ns_64s_95_2_1_U1917->dout(grp_fu_289_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( sum_V_V_full_n );
    sensitive << ( in_quant_V_V_empty_n );
    sensitive << ( in_proc_2_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( tmp_51_i_reg_392_pp0_iter4_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_378 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_flatten_reg_378_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( sum_V_V_full_n );
    sensitive << ( in_quant_V_V_empty_n );
    sensitive << ( in_proc_2_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( tmp_51_i_reg_392_pp0_iter4_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_378 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_flatten_reg_378_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( sum_V_V_full_n );
    sensitive << ( in_quant_V_V_empty_n );
    sensitive << ( in_proc_2_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( tmp_51_i_reg_392_pp0_iter4_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_378 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_flatten_reg_378_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_quant_iter_c_V_V_empty_n );
    sensitive << ( in_quant_iter_r_V_V_empty_n );
    sensitive << ( in_proc_2_iter_r_V_V_full_n );
    sensitive << ( in_proc_2_iter_c_V_V_full_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( in_quant_V_V_empty_n );
    sensitive << ( exitcond_flatten_reg_378 );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter4);
    sensitive << ( in_proc_2_V_V_full_n );
    sensitive << ( exitcond_flatten_reg_378_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter5);
    sensitive << ( sum_V_V_full_n );
    sensitive << ( tmp_51_i_reg_392_pp0_iter4_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_flatten_fu_245_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_bound_fu_239_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_239_p00 );

    SC_METHOD(thread_bound_fu_239_p00);
    sensitive << ( tmp_V_110_reg_356 );

    SC_METHOD(thread_bound_fu_239_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_239_p10 );

    SC_METHOD(thread_bound_fu_239_p10);
    sensitive << ( tmp_V_109_reg_363 );

    SC_METHOD(thread_bound_fu_239_p2);
    sensitive << ( bound_fu_239_p0 );
    sensitive << ( bound_fu_239_p1 );

    SC_METHOD(thread_exitcond_flatten_fu_245_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_206 );
    sensitive << ( bound_reg_373 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_i2_fu_256_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( l_i_reg_217 );
    sensitive << ( tmp_V_110_reg_356 );
    sensitive << ( exitcond_flatten_fu_245_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_fu_289_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_289_p0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_in_proc_2_V_V_blk_n);
    sensitive << ( in_proc_2_V_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_flatten_reg_378_pp0_iter3_reg );

    SC_METHOD(thread_in_proc_2_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_flatten_reg_378_pp0_iter3_reg );
    sensitive << ( tmp_reg_411 );
    sensitive << ( tmp_13_i_reg_416 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_48_i_fu_313_p2 );

    SC_METHOD(thread_in_proc_2_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_flatten_reg_378_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_proc_2_iter_c_V_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_proc_2_iter_c_V_V_full_n );

    SC_METHOD(thread_in_proc_2_iter_c_V_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_quant_iter_c_V_V_dout );
    sensitive << ( in_quant_iter_c_V_V_empty_n );
    sensitive << ( in_quant_iter_r_V_V_empty_n );
    sensitive << ( in_proc_2_iter_r_V_V_full_n );
    sensitive << ( in_proc_2_iter_c_V_V_full_n );

    SC_METHOD(thread_in_proc_2_iter_c_V_V_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_quant_iter_c_V_V_empty_n );
    sensitive << ( in_quant_iter_r_V_V_empty_n );
    sensitive << ( in_proc_2_iter_r_V_V_full_n );
    sensitive << ( in_proc_2_iter_c_V_V_full_n );

    SC_METHOD(thread_in_proc_2_iter_r_V_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_proc_2_iter_r_V_V_full_n );

    SC_METHOD(thread_in_proc_2_iter_r_V_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_quant_iter_c_V_V_empty_n );
    sensitive << ( in_quant_iter_r_V_V_dout );
    sensitive << ( in_quant_iter_r_V_V_empty_n );
    sensitive << ( in_proc_2_iter_r_V_V_full_n );
    sensitive << ( in_proc_2_iter_c_V_V_full_n );

    SC_METHOD(thread_in_proc_2_iter_r_V_V_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_quant_iter_c_V_V_empty_n );
    sensitive << ( in_quant_iter_r_V_V_empty_n );
    sensitive << ( in_proc_2_iter_r_V_V_full_n );
    sensitive << ( in_proc_2_iter_c_V_V_full_n );

    SC_METHOD(thread_in_quant_V_V_blk_n);
    sensitive << ( in_quant_V_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_378 );

    SC_METHOD(thread_in_quant_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_378 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_quant_iter_c_V_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_quant_iter_c_V_V_empty_n );

    SC_METHOD(thread_in_quant_iter_c_V_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_quant_iter_c_V_V_empty_n );
    sensitive << ( in_quant_iter_r_V_V_empty_n );
    sensitive << ( in_proc_2_iter_r_V_V_full_n );
    sensitive << ( in_proc_2_iter_c_V_V_full_n );

    SC_METHOD(thread_in_quant_iter_r_V_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_quant_iter_r_V_V_empty_n );

    SC_METHOD(thread_in_quant_iter_r_V_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_quant_iter_c_V_V_empty_n );
    sensitive << ( in_quant_iter_r_V_V_empty_n );
    sensitive << ( in_proc_2_iter_r_V_V_full_n );
    sensitive << ( in_proc_2_iter_c_V_V_full_n );

    SC_METHOD(thread_indvar_flatten_next_fu_250_p2);
    sensitive << ( indvar_flatten_reg_206 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_l_fu_280_p2);
    sensitive << ( l_i_mid2_fu_261_p3 );

    SC_METHOD(thread_l_i_mid2_fu_261_p3);
    sensitive << ( l_i_reg_217 );
    sensitive << ( exitcond_i2_fu_256_p2 );

    SC_METHOD(thread_p_5_i_fu_328_p1);
    sensitive << ( tmp_V_112_reg_422 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_sum_V_V_blk_n);
    sensitive << ( sum_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_51_i_reg_392_pp0_iter4_reg );

    SC_METHOD(thread_sum_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( tmp_51_i_reg_392_pp0_iter4_reg );
    sensitive << ( tmp_49_i_reg_387_pp0_iter4_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( p_5_i_fu_328_p1 );
    sensitive << ( tmp_50_i_fu_331_p2 );

    SC_METHOD(thread_sum_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( tmp_51_i_reg_392_pp0_iter4_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_48_i_fu_313_p2);
    sensitive << ( tmp_13_i_reg_416 );

    SC_METHOD(thread_tmp_49_i_fu_269_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( exitcond_flatten_fu_245_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( l_i_mid2_fu_261_p3 );

    SC_METHOD(thread_tmp_50_i_fu_331_p2);
    sensitive << ( tmp_V_fu_154 );
    sensitive << ( p_5_i_fu_328_p1 );

    SC_METHOD(thread_tmp_51_i_fu_275_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_i_reg_368 );
    sensitive << ( exitcond_flatten_fu_245_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( l_i_mid2_fu_261_p3 );

    SC_METHOD(thread_tmp_V_112_fu_318_p3);
    sensitive << ( tmp_reg_411 );
    sensitive << ( tmp_13_i_reg_416 );
    sensitive << ( tmp_48_i_fu_313_p2 );

    SC_METHOD(thread_tmp_V_113_fu_337_p3);
    sensitive << ( tmp_49_i_reg_387_pp0_iter4_reg );
    sensitive << ( p_5_i_fu_328_p1 );
    sensitive << ( tmp_50_i_fu_331_p2 );

    SC_METHOD(thread_tmp_i_fu_228_p2);
    sensitive << ( tmp_V_110_reg_356 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_quant_iter_c_V_V_empty_n );
    sensitive << ( in_quant_iter_r_V_V_empty_n );
    sensitive << ( in_proc_2_iter_r_V_V_full_n );
    sensitive << ( in_proc_2_iter_c_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_flatten_fu_245_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "softmax_QuantAct_1_c_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, in_quant_iter_c_V_V_dout, "(port)in_quant_iter_c_V_V_dout");
    sc_trace(mVcdFile, in_quant_iter_c_V_V_empty_n, "(port)in_quant_iter_c_V_V_empty_n");
    sc_trace(mVcdFile, in_quant_iter_c_V_V_read, "(port)in_quant_iter_c_V_V_read");
    sc_trace(mVcdFile, in_quant_iter_r_V_V_dout, "(port)in_quant_iter_r_V_V_dout");
    sc_trace(mVcdFile, in_quant_iter_r_V_V_empty_n, "(port)in_quant_iter_r_V_V_empty_n");
    sc_trace(mVcdFile, in_quant_iter_r_V_V_read, "(port)in_quant_iter_r_V_V_read");
    sc_trace(mVcdFile, in_proc_2_iter_r_V_V_din, "(port)in_proc_2_iter_r_V_V_din");
    sc_trace(mVcdFile, in_proc_2_iter_r_V_V_full_n, "(port)in_proc_2_iter_r_V_V_full_n");
    sc_trace(mVcdFile, in_proc_2_iter_r_V_V_write, "(port)in_proc_2_iter_r_V_V_write");
    sc_trace(mVcdFile, in_proc_2_iter_c_V_V_din, "(port)in_proc_2_iter_c_V_V_din");
    sc_trace(mVcdFile, in_proc_2_iter_c_V_V_full_n, "(port)in_proc_2_iter_c_V_V_full_n");
    sc_trace(mVcdFile, in_proc_2_iter_c_V_V_write, "(port)in_proc_2_iter_c_V_V_write");
    sc_trace(mVcdFile, sum_V_V_din, "(port)sum_V_V_din");
    sc_trace(mVcdFile, sum_V_V_full_n, "(port)sum_V_V_full_n");
    sc_trace(mVcdFile, sum_V_V_write, "(port)sum_V_V_write");
    sc_trace(mVcdFile, in_quant_V_V_dout, "(port)in_quant_V_V_dout");
    sc_trace(mVcdFile, in_quant_V_V_empty_n, "(port)in_quant_V_V_empty_n");
    sc_trace(mVcdFile, in_quant_V_V_read, "(port)in_quant_V_V_read");
    sc_trace(mVcdFile, in_proc_2_V_V_din, "(port)in_proc_2_V_V_din");
    sc_trace(mVcdFile, in_proc_2_V_V_full_n, "(port)in_proc_2_V_V_full_n");
    sc_trace(mVcdFile, in_proc_2_V_V_write, "(port)in_proc_2_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, in_quant_iter_c_V_V_blk_n, "in_quant_iter_c_V_V_blk_n");
    sc_trace(mVcdFile, in_quant_iter_r_V_V_blk_n, "in_quant_iter_r_V_V_blk_n");
    sc_trace(mVcdFile, in_proc_2_iter_r_V_V_blk_n, "in_proc_2_iter_r_V_V_blk_n");
    sc_trace(mVcdFile, in_proc_2_iter_c_V_V_blk_n, "in_proc_2_iter_c_V_V_blk_n");
    sc_trace(mVcdFile, sum_V_V_blk_n, "sum_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_51_i_reg_392, "tmp_51_i_reg_392");
    sc_trace(mVcdFile, tmp_51_i_reg_392_pp0_iter4_reg, "tmp_51_i_reg_392_pp0_iter4_reg");
    sc_trace(mVcdFile, in_quant_V_V_blk_n, "in_quant_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_flatten_reg_378, "exitcond_flatten_reg_378");
    sc_trace(mVcdFile, in_proc_2_V_V_blk_n, "in_proc_2_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, exitcond_flatten_reg_378_pp0_iter3_reg, "exitcond_flatten_reg_378_pp0_iter3_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_206, "indvar_flatten_reg_206");
    sc_trace(mVcdFile, l_i_reg_217, "l_i_reg_217");
    sc_trace(mVcdFile, tmp_V_110_reg_356, "tmp_V_110_reg_356");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_V_109_reg_363, "tmp_V_109_reg_363");
    sc_trace(mVcdFile, tmp_i_fu_228_p2, "tmp_i_fu_228_p2");
    sc_trace(mVcdFile, tmp_i_reg_368, "tmp_i_reg_368");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, bound_fu_239_p2, "bound_fu_239_p2");
    sc_trace(mVcdFile, bound_reg_373, "bound_reg_373");
    sc_trace(mVcdFile, exitcond_flatten_fu_245_p2, "exitcond_flatten_fu_245_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter2, "ap_block_state5_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter3, "ap_block_state6_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter4, "ap_block_state7_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter5, "ap_block_state8_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_flatten_reg_378_pp0_iter1_reg, "exitcond_flatten_reg_378_pp0_iter1_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_378_pp0_iter2_reg, "exitcond_flatten_reg_378_pp0_iter2_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_378_pp0_iter4_reg, "exitcond_flatten_reg_378_pp0_iter4_reg");
    sc_trace(mVcdFile, indvar_flatten_next_fu_250_p2, "indvar_flatten_next_fu_250_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_49_i_fu_269_p2, "tmp_49_i_fu_269_p2");
    sc_trace(mVcdFile, tmp_49_i_reg_387, "tmp_49_i_reg_387");
    sc_trace(mVcdFile, tmp_49_i_reg_387_pp0_iter1_reg, "tmp_49_i_reg_387_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_49_i_reg_387_pp0_iter2_reg, "tmp_49_i_reg_387_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_49_i_reg_387_pp0_iter3_reg, "tmp_49_i_reg_387_pp0_iter3_reg");
    sc_trace(mVcdFile, tmp_49_i_reg_387_pp0_iter4_reg, "tmp_49_i_reg_387_pp0_iter4_reg");
    sc_trace(mVcdFile, tmp_51_i_fu_275_p2, "tmp_51_i_fu_275_p2");
    sc_trace(mVcdFile, tmp_51_i_reg_392_pp0_iter1_reg, "tmp_51_i_reg_392_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_51_i_reg_392_pp0_iter2_reg, "tmp_51_i_reg_392_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_51_i_reg_392_pp0_iter3_reg, "tmp_51_i_reg_392_pp0_iter3_reg");
    sc_trace(mVcdFile, l_fu_280_p2, "l_fu_280_p2");
    sc_trace(mVcdFile, tmp_V_111_reg_401, "tmp_V_111_reg_401");
    sc_trace(mVcdFile, tmp_reg_411, "tmp_reg_411");
    sc_trace(mVcdFile, tmp_13_i_reg_416, "tmp_13_i_reg_416");
    sc_trace(mVcdFile, tmp_V_112_fu_318_p3, "tmp_V_112_fu_318_p3");
    sc_trace(mVcdFile, tmp_V_112_reg_422, "tmp_V_112_reg_422");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_V_113_fu_337_p3, "tmp_V_113_fu_337_p3");
    sc_trace(mVcdFile, tmp_V_fu_154, "tmp_V_fu_154");
    sc_trace(mVcdFile, bound_fu_239_p0, "bound_fu_239_p0");
    sc_trace(mVcdFile, bound_fu_239_p1, "bound_fu_239_p1");
    sc_trace(mVcdFile, exitcond_i2_fu_256_p2, "exitcond_i2_fu_256_p2");
    sc_trace(mVcdFile, l_i_mid2_fu_261_p3, "l_i_mid2_fu_261_p3");
    sc_trace(mVcdFile, grp_fu_289_p0, "grp_fu_289_p0");
    sc_trace(mVcdFile, grp_fu_289_p2, "grp_fu_289_p2");
    sc_trace(mVcdFile, tmp_48_i_fu_313_p2, "tmp_48_i_fu_313_p2");
    sc_trace(mVcdFile, p_5_i_fu_328_p1, "p_5_i_fu_328_p1");
    sc_trace(mVcdFile, tmp_50_i_fu_331_p2, "tmp_50_i_fu_331_p2");
    sc_trace(mVcdFile, grp_fu_289_ce, "grp_fu_289_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, bound_fu_239_p00, "bound_fu_239_p00");
    sc_trace(mVcdFile, bound_fu_239_p10, "bound_fu_239_p10");
#endif

    }
}

softmax_QuantAct_1_c::~softmax_QuantAct_1_c() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete kernel_4_mul_32ns_64s_95_2_1_U1917;
}

void softmax_QuantAct_1_c::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter5 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_245_p2.read()))) {
        indvar_flatten_reg_206 = indvar_flatten_next_fu_250_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        indvar_flatten_reg_206 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_245_p2.read()))) {
        l_i_reg_217 = l_fu_280_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        l_i_reg_217 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        bound_reg_373 = bound_fu_239_p2.read();
        tmp_i_reg_368 = tmp_i_fu_228_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_378 = exitcond_flatten_fu_245_p2.read();
        exitcond_flatten_reg_378_pp0_iter1_reg = exitcond_flatten_reg_378.read();
        tmp_49_i_reg_387_pp0_iter1_reg = tmp_49_i_reg_387.read();
        tmp_51_i_reg_392_pp0_iter1_reg = tmp_51_i_reg_392.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        exitcond_flatten_reg_378_pp0_iter2_reg = exitcond_flatten_reg_378_pp0_iter1_reg.read();
        exitcond_flatten_reg_378_pp0_iter3_reg = exitcond_flatten_reg_378_pp0_iter2_reg.read();
        exitcond_flatten_reg_378_pp0_iter4_reg = exitcond_flatten_reg_378_pp0_iter3_reg.read();
        tmp_49_i_reg_387_pp0_iter2_reg = tmp_49_i_reg_387_pp0_iter1_reg.read();
        tmp_49_i_reg_387_pp0_iter3_reg = tmp_49_i_reg_387_pp0_iter2_reg.read();
        tmp_49_i_reg_387_pp0_iter4_reg = tmp_49_i_reg_387_pp0_iter3_reg.read();
        tmp_51_i_reg_392_pp0_iter2_reg = tmp_51_i_reg_392_pp0_iter1_reg.read();
        tmp_51_i_reg_392_pp0_iter3_reg = tmp_51_i_reg_392_pp0_iter2_reg.read();
        tmp_51_i_reg_392_pp0_iter4_reg = tmp_51_i_reg_392_pp0_iter3_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_378_pp0_iter2_reg.read()))) {
        tmp_13_i_reg_416 = grp_fu_289_p2.read().range(81, 66);
        tmp_reg_411 = grp_fu_289_p2.read().range(65, 65);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_245_p2.read()))) {
        tmp_49_i_reg_387 = tmp_49_i_fu_269_p2.read();
        tmp_51_i_reg_392 = tmp_51_i_fu_275_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_r_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_r_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_c_V_V_full_n.read())))) {
        tmp_V_109_reg_363 = in_quant_iter_r_V_V_dout.read();
        tmp_V_110_reg_356 = in_quant_iter_c_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_378.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_111_reg_401 = in_quant_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_378_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_112_reg_422 = tmp_V_112_fu_318_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_378_pp0_iter4_reg.read()))) {
        tmp_V_fu_154 = tmp_V_113_fu_337_p3.read();
    }
}

void softmax_QuantAct_1_c::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void softmax_QuantAct_1_c::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void softmax_QuantAct_1_c::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void softmax_QuantAct_1_c::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[3];
}

void softmax_QuantAct_1_c::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void softmax_QuantAct_1_c::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_378.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_quant_V_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_378_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_V_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(tmp_51_i_reg_392_pp0_iter4_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, sum_V_V_full_n.read())));
}

void softmax_QuantAct_1_c::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_378.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_quant_V_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_378_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_V_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(tmp_51_i_reg_392_pp0_iter4_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, sum_V_V_full_n.read())));
}

void softmax_QuantAct_1_c::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_378.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_quant_V_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_378_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_V_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(tmp_51_i_reg_392_pp0_iter4_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, sum_V_V_full_n.read())));
}

void softmax_QuantAct_1_c::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_r_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_r_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_c_V_V_full_n.read()));
}

void softmax_QuantAct_1_c::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void softmax_QuantAct_1_c::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = (esl_seteq<1,1,1>(exitcond_flatten_reg_378.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_quant_V_V_empty_n.read()));
}

void softmax_QuantAct_1_c::thread_ap_block_state5_pp0_stage0_iter2() {
    ap_block_state5_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void softmax_QuantAct_1_c::thread_ap_block_state6_pp0_stage0_iter3() {
    ap_block_state6_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void softmax_QuantAct_1_c::thread_ap_block_state7_pp0_stage0_iter4() {
    ap_block_state7_pp0_stage0_iter4 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_378_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_V_V_full_n.read()));
}

void softmax_QuantAct_1_c::thread_ap_block_state8_pp0_stage0_iter5() {
    ap_block_state8_pp0_stage0_iter5 = (esl_seteq<1,1,1>(tmp_51_i_reg_392_pp0_iter4_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, sum_V_V_full_n.read()));
}

void softmax_QuantAct_1_c::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_245_p2.read())) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void softmax_QuantAct_1_c::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void softmax_QuantAct_1_c::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void softmax_QuantAct_1_c::thread_bound_fu_239_p0() {
    bound_fu_239_p0 =  (sc_lv<32>) (bound_fu_239_p00.read());
}

void softmax_QuantAct_1_c::thread_bound_fu_239_p00() {
    bound_fu_239_p00 = esl_zext<64,32>(tmp_V_110_reg_356.read());
}

void softmax_QuantAct_1_c::thread_bound_fu_239_p1() {
    bound_fu_239_p1 =  (sc_lv<32>) (bound_fu_239_p10.read());
}

void softmax_QuantAct_1_c::thread_bound_fu_239_p10() {
    bound_fu_239_p10 = esl_zext<64,32>(tmp_V_109_reg_363.read());
}

void softmax_QuantAct_1_c::thread_bound_fu_239_p2() {
    bound_fu_239_p2 = (!bound_fu_239_p0.read().is_01() || !bound_fu_239_p1.read().is_01())? sc_lv<64>(): sc_biguint<32>(bound_fu_239_p0.read()) * sc_biguint<32>(bound_fu_239_p1.read());
}

void softmax_QuantAct_1_c::thread_exitcond_flatten_fu_245_p2() {
    exitcond_flatten_fu_245_p2 = (!indvar_flatten_reg_206.read().is_01() || !bound_reg_373.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_206.read() == bound_reg_373.read());
}

void softmax_QuantAct_1_c::thread_exitcond_i2_fu_256_p2() {
    exitcond_i2_fu_256_p2 = (!l_i_reg_217.read().is_01() || !tmp_V_110_reg_356.read().is_01())? sc_lv<1>(): sc_lv<1>(l_i_reg_217.read() == tmp_V_110_reg_356.read());
}

void softmax_QuantAct_1_c::thread_grp_fu_289_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_289_ce = ap_const_logic_1;
    } else {
        grp_fu_289_ce = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_grp_fu_289_p0() {
    grp_fu_289_p0 =  (sc_lv<32>) (ap_const_lv95_6048F5EC);
}

void softmax_QuantAct_1_c::thread_in_proc_2_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_378_pp0_iter3_reg.read()))) {
        in_proc_2_V_V_blk_n = in_proc_2_V_V_full_n.read();
    } else {
        in_proc_2_V_V_blk_n = ap_const_logic_1;
    }
}

void softmax_QuantAct_1_c::thread_in_proc_2_V_V_din() {
    in_proc_2_V_V_din = (!tmp_reg_411.read()[0].is_01())? sc_lv<16>(): ((tmp_reg_411.read()[0].to_bool())? tmp_48_i_fu_313_p2.read(): tmp_13_i_reg_416.read());
}

void softmax_QuantAct_1_c::thread_in_proc_2_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_378_pp0_iter3_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_proc_2_V_V_write = ap_const_logic_1;
    } else {
        in_proc_2_V_V_write = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_in_proc_2_iter_c_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        in_proc_2_iter_c_V_V_blk_n = in_proc_2_iter_c_V_V_full_n.read();
    } else {
        in_proc_2_iter_c_V_V_blk_n = ap_const_logic_1;
    }
}

void softmax_QuantAct_1_c::thread_in_proc_2_iter_c_V_V_din() {
    in_proc_2_iter_c_V_V_din = in_quant_iter_c_V_V_dout.read();
}

void softmax_QuantAct_1_c::thread_in_proc_2_iter_c_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_r_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_r_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_c_V_V_full_n.read())))) {
        in_proc_2_iter_c_V_V_write = ap_const_logic_1;
    } else {
        in_proc_2_iter_c_V_V_write = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_in_proc_2_iter_r_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        in_proc_2_iter_r_V_V_blk_n = in_proc_2_iter_r_V_V_full_n.read();
    } else {
        in_proc_2_iter_r_V_V_blk_n = ap_const_logic_1;
    }
}

void softmax_QuantAct_1_c::thread_in_proc_2_iter_r_V_V_din() {
    in_proc_2_iter_r_V_V_din = in_quant_iter_r_V_V_dout.read();
}

void softmax_QuantAct_1_c::thread_in_proc_2_iter_r_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_r_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_r_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_c_V_V_full_n.read())))) {
        in_proc_2_iter_r_V_V_write = ap_const_logic_1;
    } else {
        in_proc_2_iter_r_V_V_write = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_in_quant_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_378.read(), ap_const_lv1_0))) {
        in_quant_V_V_blk_n = in_quant_V_V_empty_n.read();
    } else {
        in_quant_V_V_blk_n = ap_const_logic_1;
    }
}

void softmax_QuantAct_1_c::thread_in_quant_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_378.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_quant_V_V_read = ap_const_logic_1;
    } else {
        in_quant_V_V_read = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_in_quant_iter_c_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        in_quant_iter_c_V_V_blk_n = in_quant_iter_c_V_V_empty_n.read();
    } else {
        in_quant_iter_c_V_V_blk_n = ap_const_logic_1;
    }
}

void softmax_QuantAct_1_c::thread_in_quant_iter_c_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_r_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_r_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_c_V_V_full_n.read())))) {
        in_quant_iter_c_V_V_read = ap_const_logic_1;
    } else {
        in_quant_iter_c_V_V_read = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_in_quant_iter_r_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        in_quant_iter_r_V_V_blk_n = in_quant_iter_r_V_V_empty_n.read();
    } else {
        in_quant_iter_r_V_V_blk_n = ap_const_logic_1;
    }
}

void softmax_QuantAct_1_c::thread_in_quant_iter_r_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_r_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_r_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_c_V_V_full_n.read())))) {
        in_quant_iter_r_V_V_read = ap_const_logic_1;
    } else {
        in_quant_iter_r_V_V_read = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_indvar_flatten_next_fu_250_p2() {
    indvar_flatten_next_fu_250_p2 = (!indvar_flatten_reg_206.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(indvar_flatten_reg_206.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void softmax_QuantAct_1_c::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_l_fu_280_p2() {
    l_fu_280_p2 = (!l_i_mid2_fu_261_p3.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(l_i_mid2_fu_261_p3.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void softmax_QuantAct_1_c::thread_l_i_mid2_fu_261_p3() {
    l_i_mid2_fu_261_p3 = (!exitcond_i2_fu_256_p2.read()[0].is_01())? sc_lv<32>(): ((exitcond_i2_fu_256_p2.read()[0].to_bool())? ap_const_lv32_0: l_i_reg_217.read());
}

void softmax_QuantAct_1_c::thread_p_5_i_fu_328_p1() {
    p_5_i_fu_328_p1 = esl_sext<32,16>(tmp_V_112_reg_422.read());
}

void softmax_QuantAct_1_c::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void softmax_QuantAct_1_c::thread_start_out() {
    start_out = real_start.read();
}

void softmax_QuantAct_1_c::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_sum_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_51_i_reg_392_pp0_iter4_reg.read(), ap_const_lv1_1))) {
        sum_V_V_blk_n = sum_V_V_full_n.read();
    } else {
        sum_V_V_blk_n = ap_const_logic_1;
    }
}

void softmax_QuantAct_1_c::thread_sum_V_V_din() {
    sum_V_V_din = (!tmp_49_i_reg_387_pp0_iter4_reg.read()[0].is_01())? sc_lv<32>(): ((tmp_49_i_reg_387_pp0_iter4_reg.read()[0].to_bool())? p_5_i_fu_328_p1.read(): tmp_50_i_fu_331_p2.read());
}

void softmax_QuantAct_1_c::thread_sum_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(tmp_51_i_reg_392_pp0_iter4_reg.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        sum_V_V_write = ap_const_logic_1;
    } else {
        sum_V_V_write = ap_const_logic_0;
    }
}

void softmax_QuantAct_1_c::thread_tmp_48_i_fu_313_p2() {
    tmp_48_i_fu_313_p2 = (!ap_const_lv16_1.is_01() || !tmp_13_i_reg_416.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_1) + sc_biguint<16>(tmp_13_i_reg_416.read()));
}

void softmax_QuantAct_1_c::thread_tmp_49_i_fu_269_p2() {
    tmp_49_i_fu_269_p2 = (!l_i_mid2_fu_261_p3.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(l_i_mid2_fu_261_p3.read() == ap_const_lv32_0);
}

void softmax_QuantAct_1_c::thread_tmp_50_i_fu_331_p2() {
    tmp_50_i_fu_331_p2 = (!tmp_V_fu_154.read().is_01() || !p_5_i_fu_328_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_V_fu_154.read()) + sc_bigint<32>(p_5_i_fu_328_p1.read()));
}

void softmax_QuantAct_1_c::thread_tmp_51_i_fu_275_p2() {
    tmp_51_i_fu_275_p2 = (!l_i_mid2_fu_261_p3.read().is_01() || !tmp_i_reg_368.read().is_01())? sc_lv<1>(): sc_lv<1>(l_i_mid2_fu_261_p3.read() == tmp_i_reg_368.read());
}

void softmax_QuantAct_1_c::thread_tmp_V_112_fu_318_p3() {
    tmp_V_112_fu_318_p3 = (!tmp_reg_411.read()[0].is_01())? sc_lv<16>(): ((tmp_reg_411.read()[0].to_bool())? tmp_48_i_fu_313_p2.read(): tmp_13_i_reg_416.read());
}

void softmax_QuantAct_1_c::thread_tmp_V_113_fu_337_p3() {
    tmp_V_113_fu_337_p3 = (!tmp_49_i_reg_387_pp0_iter4_reg.read()[0].is_01())? sc_lv<32>(): ((tmp_49_i_reg_387_pp0_iter4_reg.read()[0].to_bool())? p_5_i_fu_328_p1.read(): tmp_50_i_fu_331_p2.read());
}

void softmax_QuantAct_1_c::thread_tmp_i_fu_228_p2() {
    tmp_i_fu_228_p2 = (!tmp_V_110_reg_356.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_V_110_reg_356.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void softmax_QuantAct_1_c::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_quant_iter_r_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_r_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_proc_2_iter_c_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_245_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_245_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

