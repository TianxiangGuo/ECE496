// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _softmax_subtract_max_HH_
#define _softmax_subtract_max_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct softmax_subtract_max : public sc_module {
    // Port declarations 31
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > in_sub_max_c_V_V_dout;
    sc_in< sc_logic > in_sub_max_c_V_V_empty_n;
    sc_out< sc_logic > in_sub_max_c_V_V_read;
    sc_in< sc_lv<32> > in_sub_max_r_V_V_dout;
    sc_in< sc_logic > in_sub_max_r_V_V_empty_n;
    sc_out< sc_logic > in_sub_max_r_V_V_read;
    sc_out< sc_lv<32> > in_proc_1_iter_r_V_V_din;
    sc_in< sc_logic > in_proc_1_iter_r_V_V_full_n;
    sc_out< sc_logic > in_proc_1_iter_r_V_V_write;
    sc_out< sc_lv<32> > in_proc_1_iter_c_V_V_din;
    sc_in< sc_logic > in_proc_1_iter_c_V_V_full_n;
    sc_out< sc_logic > in_proc_1_iter_c_V_V_write;
    sc_in< sc_lv<32> > max_input_V_V_dout;
    sc_in< sc_logic > max_input_V_V_empty_n;
    sc_out< sc_logic > max_input_V_V_read;
    sc_in< sc_lv<32> > in_sub_max_V_V_dout;
    sc_in< sc_logic > in_sub_max_V_V_empty_n;
    sc_out< sc_logic > in_sub_max_V_V_read;
    sc_out< sc_lv<32> > in_proc_1_V_V_din;
    sc_in< sc_logic > in_proc_1_V_V_full_n;
    sc_out< sc_logic > in_proc_1_V_V_write;


    // Module declarations
    softmax_subtract_max(sc_module_name name);
    SC_HAS_PROCESS(softmax_subtract_max);

    ~softmax_subtract_max();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > in_sub_max_c_V_V_blk_n;
    sc_signal< sc_logic > in_sub_max_r_V_V_blk_n;
    sc_signal< sc_logic > in_proc_1_iter_r_V_V_blk_n;
    sc_signal< sc_logic > in_proc_1_iter_c_V_V_blk_n;
    sc_signal< sc_logic > max_input_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_i_28_reg_309;
    sc_signal< sc_logic > in_sub_max_V_V_blk_n;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_300;
    sc_signal< sc_logic > in_proc_1_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_300_pp0_iter1_reg;
    sc_signal< sc_lv<64> > indvar_flatten_reg_181;
    sc_signal< sc_lv<32> > iter_i_reg_192;
    sc_signal< sc_lv<32> > tmp_V_71_reg_284;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > tmp_V_70_reg_290;
    sc_signal< sc_lv<64> > bound_fu_209_p2;
    sc_signal< sc_lv<64> > bound_reg_295;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_215_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<64> > indvar_flatten_next_fu_220_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_i_28_fu_239_p2;
    sc_signal< sc_lv<32> > iter_fu_245_p2;
    sc_signal< sc_lv<32> > tmp_V_73_reg_318;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > tmp_V_fu_130;
    sc_signal< sc_lv<32> > bound_fu_209_p0;
    sc_signal< sc_lv<32> > bound_fu_209_p1;
    sc_signal< sc_lv<1> > exitcond_i2_fu_226_p2;
    sc_signal< sc_lv<32> > iter_i_mid2_fu_231_p3;
    sc_signal< sc_lv<1> > tmp_13_i_fu_259_p2;
    sc_signal< sc_lv<32> > tmp_14_i_fu_264_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<64> > bound_fu_209_p00;
    sc_signal< sc_lv<64> > bound_fu_209_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<32> ap_const_lv32_80000000;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_bound_fu_209_p0();
    void thread_bound_fu_209_p00();
    void thread_bound_fu_209_p1();
    void thread_bound_fu_209_p10();
    void thread_bound_fu_209_p2();
    void thread_exitcond_flatten_fu_215_p2();
    void thread_exitcond_i2_fu_226_p2();
    void thread_in_proc_1_V_V_blk_n();
    void thread_in_proc_1_V_V_din();
    void thread_in_proc_1_V_V_write();
    void thread_in_proc_1_iter_c_V_V_blk_n();
    void thread_in_proc_1_iter_c_V_V_din();
    void thread_in_proc_1_iter_c_V_V_write();
    void thread_in_proc_1_iter_r_V_V_blk_n();
    void thread_in_proc_1_iter_r_V_V_din();
    void thread_in_proc_1_iter_r_V_V_write();
    void thread_in_sub_max_V_V_blk_n();
    void thread_in_sub_max_V_V_read();
    void thread_in_sub_max_c_V_V_blk_n();
    void thread_in_sub_max_c_V_V_read();
    void thread_in_sub_max_r_V_V_blk_n();
    void thread_in_sub_max_r_V_V_read();
    void thread_indvar_flatten_next_fu_220_p2();
    void thread_internal_ap_ready();
    void thread_iter_fu_245_p2();
    void thread_iter_i_mid2_fu_231_p3();
    void thread_max_input_V_V_blk_n();
    void thread_max_input_V_V_read();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_13_i_fu_259_p2();
    void thread_tmp_14_i_fu_264_p2();
    void thread_tmp_i_28_fu_239_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
