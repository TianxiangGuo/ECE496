// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_process_1178 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_proc_1_iter_c_V_V_dout,
        in_proc_1_iter_c_V_V_empty_n,
        in_proc_1_iter_c_V_V_read,
        in_proc_1_iter_r_V_V_dout,
        in_proc_1_iter_r_V_V_empty_n,
        in_proc_1_iter_r_V_V_read,
        in_quant_iter_r_V_V_din,
        in_quant_iter_r_V_V_full_n,
        in_quant_iter_r_V_V_write,
        in_quant_iter_c_V_V_din,
        in_quant_iter_c_V_V_full_n,
        in_quant_iter_c_V_V_write,
        in_proc_1_V_V_dout,
        in_proc_1_V_V_empty_n,
        in_proc_1_V_V_read,
        in_quant_V_V_din,
        in_quant_V_V_full_n,
        in_quant_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state12 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_proc_1_iter_c_V_V_dout;
input   in_proc_1_iter_c_V_V_empty_n;
output   in_proc_1_iter_c_V_V_read;
input  [31:0] in_proc_1_iter_r_V_V_dout;
input   in_proc_1_iter_r_V_V_empty_n;
output   in_proc_1_iter_r_V_V_read;
output  [31:0] in_quant_iter_r_V_V_din;
input   in_quant_iter_r_V_V_full_n;
output   in_quant_iter_r_V_V_write;
output  [31:0] in_quant_iter_c_V_V_din;
input   in_quant_iter_c_V_V_full_n;
output   in_quant_iter_c_V_V_write;
input  [31:0] in_proc_1_V_V_dout;
input   in_proc_1_V_V_empty_n;
output   in_proc_1_V_V_read;
output  [63:0] in_quant_V_V_din;
input   in_quant_V_V_full_n;
output   in_quant_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_proc_1_iter_c_V_V_read;
reg in_proc_1_iter_r_V_V_read;
reg in_quant_iter_r_V_V_write;
reg in_quant_iter_c_V_V_write;
reg in_proc_1_V_V_read;
reg in_quant_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_proc_1_iter_c_V_V_blk_n;
reg    in_proc_1_iter_r_V_V_blk_n;
reg    in_quant_iter_r_V_V_blk_n;
reg    in_quant_iter_c_V_V_blk_n;
reg    in_proc_1_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_403;
reg    in_quant_V_V_blk_n;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] exitcond_flatten_reg_403_pp0_iter7_reg;
reg   [63:0] indvar_flatten_reg_193;
reg   [31:0] tmp_V_96_reg_388;
reg    ap_block_state1;
reg   [31:0] tmp_V_reg_393;
wire   [63:0] bound_fu_210_p2;
reg   [63:0] bound_reg_398;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_216_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
reg    ap_block_state11_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_403_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_403_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_403_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_reg_403_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_reg_403_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_reg_403_pp0_iter6_reg;
wire   [63:0] indvar_flatten_next_fu_221_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] tmp_V_97_reg_412;
wire   [0:0] tmp_i_fu_227_p2;
reg   [0:0] tmp_i_reg_417;
wire  signed [31:0] p_0126_tmp_V_22_load_s_fu_233_p3;
reg  signed [31:0] p_0126_tmp_V_22_load_s_reg_422;
reg  signed [31:0] p_0126_tmp_V_22_load_s_reg_422_pp0_iter3_reg;
wire   [64:0] mul_fu_243_p2;
reg   [64:0] mul_reg_427;
reg   [0:0] tmp_5_reg_433;
wire  signed [31:0] tmp_22_i_fu_302_p3;
reg  signed [31:0] tmp_22_i_reg_439;
wire   [23:0] tmp_8_fu_309_p1;
reg   [23:0] tmp_8_reg_444;
reg   [23:0] tmp_8_reg_444_pp0_iter4_reg;
reg   [23:0] tmp_8_reg_444_pp0_iter5_reg;
reg   [23:0] tmp_8_reg_444_pp0_iter6_reg;
wire  signed [31:0] tmp_23_i_fu_318_p2;
reg  signed [31:0] tmp_23_i_reg_449;
reg  signed [31:0] tmp_23_i_reg_449_pp0_iter5_reg;
wire   [32:0] tmp_25_i_fu_326_p2;
reg   [32:0] tmp_25_i_reg_455;
wire   [63:0] tmp_28_i_fu_338_p2;
reg   [63:0] tmp_28_i_reg_460;
wire   [62:0] tmp_V_98_fu_376_p3;
reg   [62:0] tmp_V_98_reg_465;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_210_p0;
wire   [31:0] bound_fu_210_p1;
wire  signed [31:0] mul_fu_243_p1;
wire   [64:0] neg_mul_fu_257_p2;
wire   [23:0] tmp_6_fu_262_p4;
wire   [23:0] tmp_7_fu_276_p4;
wire  signed [31:0] tmp_fu_272_p1;
wire  signed [31:0] tmp_2_fu_285_p1;
wire   [31:0] tmp_3_fu_289_p3;
wire   [31:0] neg_ti_fu_296_p2;
wire  signed [25:0] tmp_10_i_fu_313_p1;
wire   [31:0] tmp_10_i_fu_313_p2;
wire  signed [32:0] tmp_24_i_fu_323_p1;
wire  signed [31:0] tmp_28_i_fu_338_p0;
wire  signed [32:0] tmp_28_i_fu_338_p1;
wire   [23:0] tmp_32_i_fu_349_p2;
wire   [63:0] tmp_30_i_fu_344_p2;
wire   [63:0] tmp_37_cast_i_fu_354_p1;
wire   [63:0] tmp_38_i_fu_358_p2;
wire   [0:0] tmp_10_fu_368_p3;
wire   [62:0] tmp_9_fu_364_p1;
wire    ap_CS_fsm_state12;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_210_p00;
wire   [63:0] bound_fu_210_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_193 <= indvar_flatten_next_fu_221_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_193 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_398 <= bound_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_403 <= exitcond_flatten_fu_216_p2;
        exitcond_flatten_reg_403_pp0_iter1_reg <= exitcond_flatten_reg_403;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_403_pp0_iter2_reg <= exitcond_flatten_reg_403_pp0_iter1_reg;
        exitcond_flatten_reg_403_pp0_iter3_reg <= exitcond_flatten_reg_403_pp0_iter2_reg;
        exitcond_flatten_reg_403_pp0_iter4_reg <= exitcond_flatten_reg_403_pp0_iter3_reg;
        exitcond_flatten_reg_403_pp0_iter5_reg <= exitcond_flatten_reg_403_pp0_iter4_reg;
        exitcond_flatten_reg_403_pp0_iter6_reg <= exitcond_flatten_reg_403_pp0_iter5_reg;
        exitcond_flatten_reg_403_pp0_iter7_reg <= exitcond_flatten_reg_403_pp0_iter6_reg;
        p_0126_tmp_V_22_load_s_reg_422_pp0_iter3_reg <= p_0126_tmp_V_22_load_s_reg_422;
        tmp_23_i_reg_449_pp0_iter5_reg <= tmp_23_i_reg_449;
        tmp_8_reg_444_pp0_iter4_reg <= tmp_8_reg_444;
        tmp_8_reg_444_pp0_iter5_reg <= tmp_8_reg_444_pp0_iter4_reg;
        tmp_8_reg_444_pp0_iter6_reg <= tmp_8_reg_444_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_403_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_reg_427 <= mul_fu_243_p2;
        p_0126_tmp_V_22_load_s_reg_422 <= p_0126_tmp_V_22_load_s_fu_233_p3;
        tmp_5_reg_433 <= p_0126_tmp_V_22_load_s_fu_233_p3[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_403_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_22_i_reg_439 <= tmp_22_i_fu_302_p3;
        tmp_8_reg_444 <= tmp_8_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_403_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_23_i_reg_449 <= tmp_23_i_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_403_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_25_i_reg_455 <= tmp_25_i_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_403_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_28_i_reg_460 <= tmp_28_i_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_quant_iter_c_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_empty_n == 1'b0) | (in_proc_1_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_96_reg_388 <= in_proc_1_iter_c_V_V_dout;
        tmp_V_reg_393 <= in_proc_1_iter_r_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_97_reg_412 <= in_proc_1_V_V_dout;
        tmp_i_reg_417 <= tmp_i_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_403_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_98_reg_465 <= tmp_V_98_fu_376_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_216_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_proc_1_V_V_blk_n = in_proc_1_V_V_empty_n;
    end else begin
        in_proc_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_403 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_proc_1_V_V_read = 1'b1;
    end else begin
        in_proc_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_1_iter_c_V_V_blk_n = in_proc_1_iter_c_V_V_empty_n;
    end else begin
        in_proc_1_iter_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_quant_iter_c_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_empty_n == 1'b0) | (in_proc_1_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_1_iter_c_V_V_read = 1'b1;
    end else begin
        in_proc_1_iter_c_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_1_iter_r_V_V_blk_n = in_proc_1_iter_r_V_V_empty_n;
    end else begin
        in_proc_1_iter_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_quant_iter_c_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_empty_n == 1'b0) | (in_proc_1_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_1_iter_r_V_V_read = 1'b1;
    end else begin
        in_proc_1_iter_r_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_403_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        in_quant_V_V_blk_n = in_quant_V_V_full_n;
    end else begin
        in_quant_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_403_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_quant_V_V_write = 1'b1;
    end else begin
        in_quant_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_quant_iter_c_V_V_blk_n = in_quant_iter_c_V_V_full_n;
    end else begin
        in_quant_iter_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_quant_iter_c_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_empty_n == 1'b0) | (in_proc_1_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_quant_iter_c_V_V_write = 1'b1;
    end else begin
        in_quant_iter_c_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_quant_iter_r_V_V_blk_n = in_quant_iter_r_V_V_full_n;
    end else begin
        in_quant_iter_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_quant_iter_c_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_empty_n == 1'b0) | (in_proc_1_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_quant_iter_r_V_V_write = 1'b1;
    end else begin
        in_quant_iter_r_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_quant_iter_c_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_empty_n == 1'b0) | (in_proc_1_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_216_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_216_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_flatten_reg_403_pp0_iter7_reg == 1'd0) & (in_quant_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((exitcond_flatten_reg_403 == 1'd0) & (in_proc_1_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_flatten_reg_403_pp0_iter7_reg == 1'd0) & (in_quant_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((exitcond_flatten_reg_403 == 1'd0) & (in_proc_1_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_flatten_reg_403_pp0_iter7_reg == 1'd0) & (in_quant_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((exitcond_flatten_reg_403 == 1'd0) & (in_proc_1_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((in_quant_iter_c_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_empty_n == 1'b0) | (in_proc_1_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter8 = ((exitcond_flatten_reg_403_pp0_iter7_reg == 1'd0) & (in_quant_V_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_flatten_reg_403 == 1'd0) & (in_proc_1_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_210_p0 = bound_fu_210_p00;

assign bound_fu_210_p00 = tmp_V_96_reg_388;

assign bound_fu_210_p1 = bound_fu_210_p10;

assign bound_fu_210_p10 = tmp_V_reg_393;

assign bound_fu_210_p2 = (bound_fu_210_p0 * bound_fu_210_p1);

assign exitcond_flatten_fu_216_p2 = ((indvar_flatten_reg_193 == bound_reg_398) ? 1'b1 : 1'b0);

assign in_quant_V_V_din = tmp_V_98_reg_465;

assign in_quant_iter_c_V_V_din = in_proc_1_iter_c_V_V_dout;

assign in_quant_iter_r_V_V_din = in_proc_1_iter_r_V_V_dout;

assign indvar_flatten_next_fu_221_p2 = (indvar_flatten_reg_193 + 64'd1);

assign mul_fu_243_p1 = p_0126_tmp_V_22_load_s_fu_233_p3;

assign mul_fu_243_p2 = ($signed({{1'b0}, {65'd4487802563}}) * $signed(mul_fu_243_p1));

assign neg_mul_fu_257_p2 = (65'd0 - mul_reg_427);

assign neg_ti_fu_296_p2 = (32'd0 - tmp_3_fu_289_p3);

assign p_0126_tmp_V_22_load_s_fu_233_p3 = ((tmp_i_reg_417[0:0] === 1'b1) ? 32'd4294952596 : tmp_V_97_reg_412);

assign start_out = real_start;

assign tmp_10_fu_368_p3 = tmp_38_i_fu_358_p2[32'd63];

assign tmp_10_i_fu_313_p1 = tmp_22_i_reg_439;

assign tmp_10_i_fu_313_p2 = ($signed({{1'b0}, {32'd490}}) * $signed(tmp_10_i_fu_313_p1));

assign tmp_22_i_fu_302_p3 = ((tmp_5_reg_433[0:0] === 1'b1) ? tmp_fu_272_p1 : neg_ti_fu_296_p2);

assign tmp_23_i_fu_318_p2 = ($signed(p_0126_tmp_V_22_load_s_reg_422_pp0_iter3_reg) + $signed(tmp_10_i_fu_313_p2));

assign tmp_24_i_fu_323_p1 = tmp_23_i_reg_449;

assign tmp_25_i_fu_326_p2 = ($signed(33'd1912) + $signed(tmp_24_i_fu_323_p1));

assign tmp_28_i_fu_338_p0 = tmp_23_i_reg_449_pp0_iter5_reg;

assign tmp_28_i_fu_338_p1 = tmp_25_i_reg_455;

assign tmp_28_i_fu_338_p2 = ($signed(tmp_28_i_fu_338_p0) * $signed(tmp_28_i_fu_338_p1));

assign tmp_2_fu_285_p1 = $signed(tmp_7_fu_276_p4);

assign tmp_30_i_fu_344_p2 = (64'd1393919 + tmp_28_i_reg_460);

assign tmp_32_i_fu_349_p2 = (24'd30 - tmp_8_reg_444_pp0_iter6_reg);

assign tmp_37_cast_i_fu_354_p1 = tmp_32_i_fu_349_p2;

assign tmp_38_i_fu_358_p2 = tmp_30_i_fu_344_p2 << tmp_37_cast_i_fu_354_p1;

assign tmp_3_fu_289_p3 = ((tmp_5_reg_433[0:0] === 1'b1) ? tmp_fu_272_p1 : tmp_2_fu_285_p1);

assign tmp_6_fu_262_p4 = {{neg_mul_fu_257_p2[64:41]}};

assign tmp_7_fu_276_p4 = {{mul_reg_427[64:41]}};

assign tmp_8_fu_309_p1 = tmp_22_i_fu_302_p3[23:0];

assign tmp_9_fu_364_p1 = tmp_38_i_fu_358_p2[62:0];

assign tmp_V_98_fu_376_p3 = ((tmp_10_fu_368_p3[0:0] === 1'b1) ? 63'd0 : tmp_9_fu_364_p1);

assign tmp_fu_272_p1 = $signed(tmp_6_fu_262_p4);

assign tmp_i_fu_227_p2 = (($signed(in_proc_1_V_V_dout) < $signed(32'd4294952596)) ? 1'b1 : 1'b0);

endmodule //softmax_process_1178
