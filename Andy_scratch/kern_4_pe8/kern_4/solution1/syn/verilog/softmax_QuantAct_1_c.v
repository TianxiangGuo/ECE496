// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_QuantAct_1_c (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_quant_iter_c_V_V_dout,
        in_quant_iter_c_V_V_empty_n,
        in_quant_iter_c_V_V_read,
        in_quant_iter_r_V_V_dout,
        in_quant_iter_r_V_V_empty_n,
        in_quant_iter_r_V_V_read,
        in_proc_2_iter_r_V_V_din,
        in_proc_2_iter_r_V_V_full_n,
        in_proc_2_iter_r_V_V_write,
        in_proc_2_iter_c_V_V_din,
        in_proc_2_iter_c_V_V_full_n,
        in_proc_2_iter_c_V_V_write,
        sum_V_V_din,
        sum_V_V_full_n,
        sum_V_V_write,
        in_quant_V_V_dout,
        in_quant_V_V_empty_n,
        in_quant_V_V_read,
        in_proc_2_V_V_din,
        in_proc_2_V_V_full_n,
        in_proc_2_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_quant_iter_c_V_V_dout;
input   in_quant_iter_c_V_V_empty_n;
output   in_quant_iter_c_V_V_read;
input  [31:0] in_quant_iter_r_V_V_dout;
input   in_quant_iter_r_V_V_empty_n;
output   in_quant_iter_r_V_V_read;
output  [31:0] in_proc_2_iter_r_V_V_din;
input   in_proc_2_iter_r_V_V_full_n;
output   in_proc_2_iter_r_V_V_write;
output  [31:0] in_proc_2_iter_c_V_V_din;
input   in_proc_2_iter_c_V_V_full_n;
output   in_proc_2_iter_c_V_V_write;
output  [31:0] sum_V_V_din;
input   sum_V_V_full_n;
output   sum_V_V_write;
input  [63:0] in_quant_V_V_dout;
input   in_quant_V_V_empty_n;
output   in_quant_V_V_read;
output  [15:0] in_proc_2_V_V_din;
input   in_proc_2_V_V_full_n;
output   in_proc_2_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_quant_iter_c_V_V_read;
reg in_quant_iter_r_V_V_read;
reg in_proc_2_iter_r_V_V_write;
reg in_proc_2_iter_c_V_V_write;
reg sum_V_V_write;
reg in_quant_V_V_read;
reg in_proc_2_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_quant_iter_c_V_V_blk_n;
reg    in_quant_iter_r_V_V_blk_n;
reg    in_proc_2_iter_r_V_V_blk_n;
reg    in_proc_2_iter_c_V_V_blk_n;
reg    sum_V_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_51_i_reg_392;
reg   [0:0] tmp_51_i_reg_392_pp0_iter4_reg;
reg    in_quant_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_flatten_reg_378;
reg    in_proc_2_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] exitcond_flatten_reg_378_pp0_iter3_reg;
reg   [63:0] indvar_flatten_reg_206;
reg   [31:0] l_i_reg_217;
reg   [31:0] tmp_V_110_reg_356;
reg    ap_block_state1;
reg   [31:0] tmp_V_109_reg_363;
wire   [31:0] tmp_i_fu_228_p2;
reg   [31:0] tmp_i_reg_368;
wire    ap_CS_fsm_state2;
wire   [63:0] bound_fu_239_p2;
reg   [63:0] bound_reg_373;
wire   [0:0] exitcond_flatten_fu_245_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_378_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_378_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_378_pp0_iter4_reg;
wire   [63:0] indvar_flatten_next_fu_250_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_49_i_fu_269_p2;
reg   [0:0] tmp_49_i_reg_387;
reg   [0:0] tmp_49_i_reg_387_pp0_iter1_reg;
reg   [0:0] tmp_49_i_reg_387_pp0_iter2_reg;
reg   [0:0] tmp_49_i_reg_387_pp0_iter3_reg;
reg   [0:0] tmp_49_i_reg_387_pp0_iter4_reg;
wire   [0:0] tmp_51_i_fu_275_p2;
reg   [0:0] tmp_51_i_reg_392_pp0_iter1_reg;
reg   [0:0] tmp_51_i_reg_392_pp0_iter2_reg;
reg   [0:0] tmp_51_i_reg_392_pp0_iter3_reg;
wire   [31:0] l_fu_280_p2;
reg  signed [63:0] tmp_V_111_reg_401;
reg   [0:0] tmp_reg_411;
reg   [15:0] tmp_13_i_reg_416;
wire  signed [15:0] tmp_V_112_fu_318_p3;
reg  signed [15:0] tmp_V_112_reg_422;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_V_113_fu_337_p3;
reg   [31:0] tmp_V_fu_154;
wire   [31:0] bound_fu_239_p0;
wire   [31:0] bound_fu_239_p1;
wire   [0:0] exitcond_i2_fu_256_p2;
wire   [31:0] l_i_mid2_fu_261_p3;
wire   [31:0] grp_fu_289_p0;
wire   [94:0] grp_fu_289_p2;
wire   [15:0] tmp_48_i_fu_313_p2;
wire  signed [31:0] p_5_i_fu_328_p1;
wire   [31:0] tmp_50_i_fu_331_p2;
reg    grp_fu_289_ce;
wire    ap_CS_fsm_state9;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_239_p00;
wire   [63:0] bound_fu_239_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

kernel_4_mul_32ns_64s_95_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 95 ))
kernel_4_mul_32ns_64s_95_2_1_U1917(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_289_p0),
    .din1(tmp_V_111_reg_401),
    .ce(grp_fu_289_ce),
    .dout(grp_fu_289_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_245_p2 == 1'd0))) begin
        indvar_flatten_reg_206 <= indvar_flatten_next_fu_250_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_206 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_245_p2 == 1'd0))) begin
        l_i_reg_217 <= l_fu_280_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        l_i_reg_217 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_373 <= bound_fu_239_p2;
        tmp_i_reg_368 <= tmp_i_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_378 <= exitcond_flatten_fu_245_p2;
        exitcond_flatten_reg_378_pp0_iter1_reg <= exitcond_flatten_reg_378;
        tmp_49_i_reg_387_pp0_iter1_reg <= tmp_49_i_reg_387;
        tmp_51_i_reg_392_pp0_iter1_reg <= tmp_51_i_reg_392;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_378_pp0_iter2_reg <= exitcond_flatten_reg_378_pp0_iter1_reg;
        exitcond_flatten_reg_378_pp0_iter3_reg <= exitcond_flatten_reg_378_pp0_iter2_reg;
        exitcond_flatten_reg_378_pp0_iter4_reg <= exitcond_flatten_reg_378_pp0_iter3_reg;
        tmp_49_i_reg_387_pp0_iter2_reg <= tmp_49_i_reg_387_pp0_iter1_reg;
        tmp_49_i_reg_387_pp0_iter3_reg <= tmp_49_i_reg_387_pp0_iter2_reg;
        tmp_49_i_reg_387_pp0_iter4_reg <= tmp_49_i_reg_387_pp0_iter3_reg;
        tmp_51_i_reg_392_pp0_iter2_reg <= tmp_51_i_reg_392_pp0_iter1_reg;
        tmp_51_i_reg_392_pp0_iter3_reg <= tmp_51_i_reg_392_pp0_iter2_reg;
        tmp_51_i_reg_392_pp0_iter4_reg <= tmp_51_i_reg_392_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_378_pp0_iter2_reg == 1'd0))) begin
        tmp_13_i_reg_416 <= {{grp_fu_289_p2[81:66]}};
        tmp_reg_411 <= grp_fu_289_p2[32'd65];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_245_p2 == 1'd0))) begin
        tmp_49_i_reg_387 <= tmp_49_i_fu_269_p2;
        tmp_51_i_reg_392 <= tmp_51_i_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_proc_2_iter_c_V_V_full_n == 1'b0) | (in_proc_2_iter_r_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_empty_n == 1'b0) | (in_quant_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_109_reg_363 <= in_quant_iter_r_V_V_dout;
        tmp_V_110_reg_356 <= in_quant_iter_c_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_378 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_111_reg_401 <= in_quant_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_378_pp0_iter3_reg == 1'd0))) begin
        tmp_V_112_reg_422 <= tmp_V_112_fu_318_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_378_pp0_iter4_reg == 1'd0))) begin
        tmp_V_fu_154 <= tmp_V_113_fu_337_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_245_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_289_ce = 1'b1;
    end else begin
        grp_fu_289_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (exitcond_flatten_reg_378_pp0_iter3_reg == 1'd0))) begin
        in_proc_2_V_V_blk_n = in_proc_2_V_V_full_n;
    end else begin
        in_proc_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_378_pp0_iter3_reg == 1'd0))) begin
        in_proc_2_V_V_write = 1'b1;
    end else begin
        in_proc_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_2_iter_c_V_V_blk_n = in_proc_2_iter_c_V_V_full_n;
    end else begin
        in_proc_2_iter_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_proc_2_iter_c_V_V_full_n == 1'b0) | (in_proc_2_iter_r_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_empty_n == 1'b0) | (in_quant_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_2_iter_c_V_V_write = 1'b1;
    end else begin
        in_proc_2_iter_c_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_2_iter_r_V_V_blk_n = in_proc_2_iter_r_V_V_full_n;
    end else begin
        in_proc_2_iter_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_proc_2_iter_c_V_V_full_n == 1'b0) | (in_proc_2_iter_r_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_empty_n == 1'b0) | (in_quant_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_2_iter_r_V_V_write = 1'b1;
    end else begin
        in_proc_2_iter_r_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_378 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_quant_V_V_blk_n = in_quant_V_V_empty_n;
    end else begin
        in_quant_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_378 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_quant_V_V_read = 1'b1;
    end else begin
        in_quant_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_quant_iter_c_V_V_blk_n = in_quant_iter_c_V_V_empty_n;
    end else begin
        in_quant_iter_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_proc_2_iter_c_V_V_full_n == 1'b0) | (in_proc_2_iter_r_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_empty_n == 1'b0) | (in_quant_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_quant_iter_c_V_V_read = 1'b1;
    end else begin
        in_quant_iter_c_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_quant_iter_r_V_V_blk_n = in_quant_iter_r_V_V_empty_n;
    end else begin
        in_quant_iter_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_proc_2_iter_c_V_V_full_n == 1'b0) | (in_proc_2_iter_r_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_empty_n == 1'b0) | (in_quant_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_quant_iter_r_V_V_read = 1'b1;
    end else begin
        in_quant_iter_r_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_51_i_reg_392_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        sum_V_V_blk_n = sum_V_V_full_n;
    end else begin
        sum_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_51_i_reg_392_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_V_V_write = 1'b1;
    end else begin
        sum_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_proc_2_iter_c_V_V_full_n == 1'b0) | (in_proc_2_iter_r_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_empty_n == 1'b0) | (in_quant_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_245_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_245_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_flatten_reg_378 == 1'd0) & (in_quant_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_51_i_reg_392_pp0_iter4_reg == 1'd1) & (sum_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((in_proc_2_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (exitcond_flatten_reg_378_pp0_iter3_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_flatten_reg_378 == 1'd0) & (in_quant_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_51_i_reg_392_pp0_iter4_reg == 1'd1) & (sum_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((in_proc_2_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (exitcond_flatten_reg_378_pp0_iter3_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_flatten_reg_378 == 1'd0) & (in_quant_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_51_i_reg_392_pp0_iter4_reg == 1'd1) & (sum_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((in_proc_2_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (exitcond_flatten_reg_378_pp0_iter3_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((in_proc_2_iter_c_V_V_full_n == 1'b0) | (in_proc_2_iter_r_V_V_full_n == 1'b0) | (in_quant_iter_r_V_V_empty_n == 1'b0) | (in_quant_iter_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_flatten_reg_378 == 1'd0) & (in_quant_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((in_proc_2_V_V_full_n == 1'b0) & (exitcond_flatten_reg_378_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter5 = ((tmp_51_i_reg_392_pp0_iter4_reg == 1'd1) & (sum_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_239_p0 = bound_fu_239_p00;

assign bound_fu_239_p00 = tmp_V_110_reg_356;

assign bound_fu_239_p1 = bound_fu_239_p10;

assign bound_fu_239_p10 = tmp_V_109_reg_363;

assign bound_fu_239_p2 = (bound_fu_239_p0 * bound_fu_239_p1);

assign exitcond_flatten_fu_245_p2 = ((indvar_flatten_reg_206 == bound_reg_373) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_256_p2 = ((l_i_reg_217 == tmp_V_110_reg_356) ? 1'b1 : 1'b0);

assign grp_fu_289_p0 = 95'd1615394284;

assign in_proc_2_V_V_din = ((tmp_reg_411[0:0] === 1'b1) ? tmp_48_i_fu_313_p2 : tmp_13_i_reg_416);

assign in_proc_2_iter_c_V_V_din = in_quant_iter_c_V_V_dout;

assign in_proc_2_iter_r_V_V_din = in_quant_iter_r_V_V_dout;

assign indvar_flatten_next_fu_250_p2 = (indvar_flatten_reg_206 + 64'd1);

assign l_fu_280_p2 = (l_i_mid2_fu_261_p3 + 32'd1);

assign l_i_mid2_fu_261_p3 = ((exitcond_i2_fu_256_p2[0:0] === 1'b1) ? 32'd0 : l_i_reg_217);

assign p_5_i_fu_328_p1 = tmp_V_112_reg_422;

assign start_out = real_start;

assign sum_V_V_din = ((tmp_49_i_reg_387_pp0_iter4_reg[0:0] === 1'b1) ? p_5_i_fu_328_p1 : tmp_50_i_fu_331_p2);

assign tmp_48_i_fu_313_p2 = (16'd1 + tmp_13_i_reg_416);

assign tmp_49_i_fu_269_p2 = ((l_i_mid2_fu_261_p3 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_50_i_fu_331_p2 = ($signed(tmp_V_fu_154) + $signed(p_5_i_fu_328_p1));

assign tmp_51_i_fu_275_p2 = ((l_i_mid2_fu_261_p3 == tmp_i_reg_368) ? 1'b1 : 1'b0);

assign tmp_V_112_fu_318_p3 = ((tmp_reg_411[0:0] === 1'b1) ? tmp_48_i_fu_313_p2 : tmp_13_i_reg_416);

assign tmp_V_113_fu_337_p3 = ((tmp_49_i_reg_387_pp0_iter4_reg[0:0] === 1'b1) ? p_5_i_fu_328_p1 : tmp_50_i_fu_331_p2);

assign tmp_i_fu_228_p2 = ($signed(tmp_V_110_reg_356) + $signed(32'd4294967295));

endmodule //softmax_QuantAct_1_c
