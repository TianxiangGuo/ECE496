// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subtract_max (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_sub_max_c_V_V_dout,
        in_sub_max_c_V_V_empty_n,
        in_sub_max_c_V_V_read,
        in_sub_max_r_V_V_dout,
        in_sub_max_r_V_V_empty_n,
        in_sub_max_r_V_V_read,
        in_proc_1_iter_r_V_V_din,
        in_proc_1_iter_r_V_V_full_n,
        in_proc_1_iter_r_V_V_write,
        in_proc_1_iter_c_V_V_din,
        in_proc_1_iter_c_V_V_full_n,
        in_proc_1_iter_c_V_V_write,
        max_input_V_V_dout,
        max_input_V_V_empty_n,
        max_input_V_V_read,
        in_sub_max_V_V_dout,
        in_sub_max_V_V_empty_n,
        in_sub_max_V_V_read,
        in_proc_1_V_V_din,
        in_proc_1_V_V_full_n,
        in_proc_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_sub_max_c_V_V_dout;
input   in_sub_max_c_V_V_empty_n;
output   in_sub_max_c_V_V_read;
input  [31:0] in_sub_max_r_V_V_dout;
input   in_sub_max_r_V_V_empty_n;
output   in_sub_max_r_V_V_read;
output  [31:0] in_proc_1_iter_r_V_V_din;
input   in_proc_1_iter_r_V_V_full_n;
output   in_proc_1_iter_r_V_V_write;
output  [31:0] in_proc_1_iter_c_V_V_din;
input   in_proc_1_iter_c_V_V_full_n;
output   in_proc_1_iter_c_V_V_write;
input  [31:0] max_input_V_V_dout;
input   max_input_V_V_empty_n;
output   max_input_V_V_read;
input  [511:0] in_sub_max_V_V_dout;
input   in_sub_max_V_V_empty_n;
output   in_sub_max_V_V_read;
output  [511:0] in_proc_1_V_V_din;
input   in_proc_1_V_V_full_n;
output   in_proc_1_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_sub_max_c_V_V_read;
reg in_sub_max_r_V_V_read;
reg in_proc_1_iter_r_V_V_write;
reg in_proc_1_iter_c_V_V_write;
reg max_input_V_V_read;
reg in_sub_max_V_V_read;
reg in_proc_1_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_sub_max_c_V_V_blk_n;
reg    in_sub_max_r_V_V_blk_n;
reg    in_proc_1_iter_r_V_V_blk_n;
reg    in_proc_1_iter_c_V_V_blk_n;
reg    max_input_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_i_28_reg_755;
reg    in_sub_max_V_V_blk_n;
reg   [0:0] exitcond_flatten_reg_746;
reg    in_proc_1_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_flatten_reg_746_pp0_iter1_reg;
reg   [63:0] indvar_flatten_reg_167;
reg   [31:0] iter_i_reg_178;
reg   [31:0] tmp_V_5_reg_730;
reg    ap_block_state1;
reg   [31:0] tmp_V_4_reg_736;
wire   [63:0] bound_fu_195_p2;
reg   [63:0] bound_reg_741;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_201_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] indvar_flatten_next_fu_206_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_i_28_fu_225_p2;
wire   [31:0] iter_fu_231_p2;
wire   [31:0] tmp_15_fu_242_p1;
reg   [31:0] tmp_15_reg_764;
reg   [31:0] p_Result_1_i_reg_770;
reg   [31:0] p_Result_2_i_reg_776;
reg   [31:0] p_Result_3_i_reg_782;
reg   [31:0] p_Result_4_i_reg_788;
reg   [31:0] p_Result_5_i_reg_794;
reg   [31:0] p_Result_6_i_reg_800;
reg   [31:0] p_Result_7_i_reg_806;
reg   [31:0] p_Result_8_i_reg_812;
reg   [31:0] p_Result_9_i_reg_818;
reg   [31:0] p_Result_i_reg_824;
reg   [31:0] p_Result_10_i_reg_830;
reg   [31:0] p_Result_16_i_reg_836;
reg   [31:0] p_Result_13_i_reg_842;
reg   [31:0] p_Result_14_i_reg_848;
reg   [31:0] p_Result_15_i_reg_854;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] tmp_V_fu_116;
wire   [31:0] bound_fu_195_p0;
wire   [31:0] bound_fu_195_p1;
wire   [0:0] exitcond_i2_fu_212_p2;
wire   [31:0] iter_i_mid2_fu_217_p3;
wire   [0:0] tmp_19_i_fu_399_p2;
wire   [31:0] ret_V_2_i_fu_404_p2;
wire   [0:0] tmp_19_1_i_fu_417_p2;
wire   [31:0] ret_V_2_1_i_fu_422_p2;
wire   [0:0] tmp_19_2_i_fu_435_p2;
wire   [31:0] ret_V_2_2_i_fu_440_p2;
wire   [0:0] tmp_19_3_i_fu_453_p2;
wire   [31:0] ret_V_2_3_i_fu_458_p2;
wire   [0:0] tmp_19_4_i_fu_471_p2;
wire   [31:0] ret_V_2_4_i_fu_476_p2;
wire   [0:0] tmp_19_5_i_fu_489_p2;
wire   [31:0] ret_V_2_5_i_fu_494_p2;
wire   [0:0] tmp_19_6_i_fu_507_p2;
wire   [31:0] ret_V_2_6_i_fu_512_p2;
wire   [0:0] tmp_19_7_i_fu_525_p2;
wire   [31:0] ret_V_2_7_i_fu_530_p2;
wire   [0:0] tmp_19_8_i_fu_543_p2;
wire   [31:0] ret_V_2_8_i_fu_548_p2;
wire   [0:0] tmp_19_9_i_fu_561_p2;
wire   [31:0] ret_V_2_9_i_fu_566_p2;
wire   [0:0] tmp_19_i_26_fu_579_p2;
wire   [31:0] ret_V_2_i_27_fu_584_p2;
wire   [0:0] tmp_19_10_i_fu_597_p2;
wire   [31:0] ret_V_2_10_i_fu_602_p2;
wire   [0:0] tmp_19_11_i_fu_615_p2;
wire   [31:0] ret_V_2_11_i_fu_620_p2;
wire   [0:0] tmp_19_12_i_fu_633_p2;
wire   [31:0] ret_V_2_12_i_fu_638_p2;
wire   [0:0] tmp_19_13_i_fu_651_p2;
wire   [31:0] ret_V_2_13_i_fu_656_p2;
wire   [0:0] tmp_19_14_i_fu_669_p2;
wire   [31:0] ret_V_2_14_i_fu_674_p2;
wire   [31:0] tmp_14_fu_679_p3;
wire   [31:0] tmp_13_fu_661_p3;
wire   [31:0] tmp_12_fu_643_p3;
wire   [31:0] tmp_11_fu_625_p3;
wire   [31:0] tmp_10_fu_607_p3;
wire   [31:0] tmp_s_fu_589_p3;
wire   [31:0] tmp_9_fu_571_p3;
wire   [31:0] tmp_8_fu_553_p3;
wire   [31:0] tmp_7_fu_535_p3;
wire   [31:0] tmp_6_fu_517_p3;
wire   [31:0] tmp_5_fu_499_p3;
wire   [31:0] tmp_4_fu_481_p3;
wire   [31:0] tmp_3_fu_463_p3;
wire   [31:0] tmp_2_fu_445_p3;
wire   [31:0] tmp_1_fu_427_p3;
wire   [31:0] tmp_fu_409_p3;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_195_p00;
wire   [63:0] bound_fu_195_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_167 <= indvar_flatten_next_fu_206_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_167 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iter_i_reg_178 <= iter_fu_231_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        iter_i_reg_178 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_741 <= bound_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_746 <= exitcond_flatten_fu_201_p2;
        exitcond_flatten_reg_746_pp0_iter1_reg <= exitcond_flatten_reg_746;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_746 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_10_i_reg_830 <= {{in_sub_max_V_V_dout[383:352]}};
        p_Result_13_i_reg_842 <= {{in_sub_max_V_V_dout[447:416]}};
        p_Result_14_i_reg_848 <= {{in_sub_max_V_V_dout[479:448]}};
        p_Result_15_i_reg_854 <= {{in_sub_max_V_V_dout[511:480]}};
        p_Result_16_i_reg_836 <= {{in_sub_max_V_V_dout[415:384]}};
        p_Result_1_i_reg_770 <= {{in_sub_max_V_V_dout[63:32]}};
        p_Result_2_i_reg_776 <= {{in_sub_max_V_V_dout[95:64]}};
        p_Result_3_i_reg_782 <= {{in_sub_max_V_V_dout[127:96]}};
        p_Result_4_i_reg_788 <= {{in_sub_max_V_V_dout[159:128]}};
        p_Result_5_i_reg_794 <= {{in_sub_max_V_V_dout[191:160]}};
        p_Result_6_i_reg_800 <= {{in_sub_max_V_V_dout[223:192]}};
        p_Result_7_i_reg_806 <= {{in_sub_max_V_V_dout[255:224]}};
        p_Result_8_i_reg_812 <= {{in_sub_max_V_V_dout[287:256]}};
        p_Result_9_i_reg_818 <= {{in_sub_max_V_V_dout[319:288]}};
        p_Result_i_reg_824 <= {{in_sub_max_V_V_dout[351:320]}};
        tmp_15_reg_764 <= tmp_15_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_proc_1_iter_c_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_full_n == 1'b0) | (in_sub_max_r_V_V_empty_n == 1'b0) | (in_sub_max_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_4_reg_736 <= in_sub_max_r_V_V_dout;
        tmp_V_5_reg_730 <= in_sub_max_c_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_28_reg_755 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_fu_116 <= max_input_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_28_reg_755 <= tmp_i_28_fu_225_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_201_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_746_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_proc_1_V_V_blk_n = in_proc_1_V_V_full_n;
    end else begin
        in_proc_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_746_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_proc_1_V_V_write = 1'b1;
    end else begin
        in_proc_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_1_iter_c_V_V_blk_n = in_proc_1_iter_c_V_V_full_n;
    end else begin
        in_proc_1_iter_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_proc_1_iter_c_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_full_n == 1'b0) | (in_sub_max_r_V_V_empty_n == 1'b0) | (in_sub_max_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_1_iter_c_V_V_write = 1'b1;
    end else begin
        in_proc_1_iter_c_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_1_iter_r_V_V_blk_n = in_proc_1_iter_r_V_V_full_n;
    end else begin
        in_proc_1_iter_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_proc_1_iter_c_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_full_n == 1'b0) | (in_sub_max_r_V_V_empty_n == 1'b0) | (in_sub_max_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_proc_1_iter_r_V_V_write = 1'b1;
    end else begin
        in_proc_1_iter_r_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_746 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_sub_max_V_V_blk_n = in_sub_max_V_V_empty_n;
    end else begin
        in_sub_max_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_746 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_sub_max_V_V_read = 1'b1;
    end else begin
        in_sub_max_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_sub_max_c_V_V_blk_n = in_sub_max_c_V_V_empty_n;
    end else begin
        in_sub_max_c_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_proc_1_iter_c_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_full_n == 1'b0) | (in_sub_max_r_V_V_empty_n == 1'b0) | (in_sub_max_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_sub_max_c_V_V_read = 1'b1;
    end else begin
        in_sub_max_c_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_sub_max_r_V_V_blk_n = in_sub_max_r_V_V_empty_n;
    end else begin
        in_sub_max_r_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_proc_1_iter_c_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_full_n == 1'b0) | (in_sub_max_r_V_V_empty_n == 1'b0) | (in_sub_max_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_sub_max_r_V_V_read = 1'b1;
    end else begin
        in_sub_max_r_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_28_reg_755 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_input_V_V_blk_n = max_input_V_V_empty_n;
    end else begin
        max_input_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_28_reg_755 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_input_V_V_read = 1'b1;
    end else begin
        max_input_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_proc_1_iter_c_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_full_n == 1'b0) | (in_sub_max_r_V_V_empty_n == 1'b0) | (in_sub_max_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_201_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_flatten_fu_201_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_746 == 1'd0) & (in_sub_max_V_V_empty_n == 1'b0)) | ((tmp_i_28_reg_755 == 1'd1) & (max_input_V_V_empty_n == 1'b0)))) | ((exitcond_flatten_reg_746_pp0_iter1_reg == 1'd0) & (in_proc_1_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_746 == 1'd0) & (in_sub_max_V_V_empty_n == 1'b0)) | ((tmp_i_28_reg_755 == 1'd1) & (max_input_V_V_empty_n == 1'b0)))) | ((exitcond_flatten_reg_746_pp0_iter1_reg == 1'd0) & (in_proc_1_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_746 == 1'd0) & (in_sub_max_V_V_empty_n == 1'b0)) | ((tmp_i_28_reg_755 == 1'd1) & (max_input_V_V_empty_n == 1'b0)))) | ((exitcond_flatten_reg_746_pp0_iter1_reg == 1'd0) & (in_proc_1_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((in_proc_1_iter_c_V_V_full_n == 1'b0) | (in_proc_1_iter_r_V_V_full_n == 1'b0) | (in_sub_max_r_V_V_empty_n == 1'b0) | (in_sub_max_c_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_flatten_reg_746 == 1'd0) & (in_sub_max_V_V_empty_n == 1'b0)) | ((tmp_i_28_reg_755 == 1'd1) & (max_input_V_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((exitcond_flatten_reg_746_pp0_iter1_reg == 1'd0) & (in_proc_1_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_195_p0 = bound_fu_195_p00;

assign bound_fu_195_p00 = tmp_V_5_reg_730;

assign bound_fu_195_p1 = bound_fu_195_p10;

assign bound_fu_195_p10 = tmp_V_4_reg_736;

assign bound_fu_195_p2 = (bound_fu_195_p0 * bound_fu_195_p1);

assign exitcond_flatten_fu_201_p2 = ((indvar_flatten_reg_167 == bound_reg_741) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_212_p2 = ((iter_i_reg_178 == tmp_V_5_reg_730) ? 1'b1 : 1'b0);

assign in_proc_1_V_V_din = {{{{{{{{{{{{{{{{tmp_14_fu_679_p3}, {tmp_13_fu_661_p3}}, {tmp_12_fu_643_p3}}, {tmp_11_fu_625_p3}}, {tmp_10_fu_607_p3}}, {tmp_s_fu_589_p3}}, {tmp_9_fu_571_p3}}, {tmp_8_fu_553_p3}}, {tmp_7_fu_535_p3}}, {tmp_6_fu_517_p3}}, {tmp_5_fu_499_p3}}, {tmp_4_fu_481_p3}}, {tmp_3_fu_463_p3}}, {tmp_2_fu_445_p3}}, {tmp_1_fu_427_p3}}, {tmp_fu_409_p3}};

assign in_proc_1_iter_c_V_V_din = in_sub_max_c_V_V_dout;

assign in_proc_1_iter_r_V_V_din = in_sub_max_r_V_V_dout;

assign indvar_flatten_next_fu_206_p2 = (indvar_flatten_reg_167 + 64'd1);

assign iter_fu_231_p2 = (32'd1 + iter_i_mid2_fu_217_p3);

assign iter_i_mid2_fu_217_p3 = ((exitcond_i2_fu_212_p2[0:0] === 1'b1) ? 32'd0 : iter_i_reg_178);

assign ret_V_2_10_i_fu_602_p2 = (p_Result_10_i_reg_830 - tmp_V_fu_116);

assign ret_V_2_11_i_fu_620_p2 = (p_Result_16_i_reg_836 - tmp_V_fu_116);

assign ret_V_2_12_i_fu_638_p2 = (p_Result_13_i_reg_842 - tmp_V_fu_116);

assign ret_V_2_13_i_fu_656_p2 = (p_Result_14_i_reg_848 - tmp_V_fu_116);

assign ret_V_2_14_i_fu_674_p2 = (p_Result_15_i_reg_854 - tmp_V_fu_116);

assign ret_V_2_1_i_fu_422_p2 = (p_Result_1_i_reg_770 - tmp_V_fu_116);

assign ret_V_2_2_i_fu_440_p2 = (p_Result_2_i_reg_776 - tmp_V_fu_116);

assign ret_V_2_3_i_fu_458_p2 = (p_Result_3_i_reg_782 - tmp_V_fu_116);

assign ret_V_2_4_i_fu_476_p2 = (p_Result_4_i_reg_788 - tmp_V_fu_116);

assign ret_V_2_5_i_fu_494_p2 = (p_Result_5_i_reg_794 - tmp_V_fu_116);

assign ret_V_2_6_i_fu_512_p2 = (p_Result_6_i_reg_800 - tmp_V_fu_116);

assign ret_V_2_7_i_fu_530_p2 = (p_Result_7_i_reg_806 - tmp_V_fu_116);

assign ret_V_2_8_i_fu_548_p2 = (p_Result_8_i_reg_812 - tmp_V_fu_116);

assign ret_V_2_9_i_fu_566_p2 = (p_Result_9_i_reg_818 - tmp_V_fu_116);

assign ret_V_2_i_27_fu_584_p2 = (p_Result_i_reg_824 - tmp_V_fu_116);

assign ret_V_2_i_fu_404_p2 = (tmp_15_reg_764 - tmp_V_fu_116);

assign start_out = real_start;

assign tmp_10_fu_607_p3 = ((tmp_19_10_i_fu_597_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_10_i_fu_602_p2);

assign tmp_11_fu_625_p3 = ((tmp_19_11_i_fu_615_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_11_i_fu_620_p2);

assign tmp_12_fu_643_p3 = ((tmp_19_12_i_fu_633_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_12_i_fu_638_p2);

assign tmp_13_fu_661_p3 = ((tmp_19_13_i_fu_651_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_13_i_fu_656_p2);

assign tmp_14_fu_679_p3 = ((tmp_19_14_i_fu_669_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_14_i_fu_674_p2);

assign tmp_15_fu_242_p1 = in_sub_max_V_V_dout[31:0];

assign tmp_19_10_i_fu_597_p2 = ((p_Result_10_i_reg_830 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_11_i_fu_615_p2 = ((p_Result_16_i_reg_836 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_12_i_fu_633_p2 = ((p_Result_13_i_reg_842 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_13_i_fu_651_p2 = ((p_Result_14_i_reg_848 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_14_i_fu_669_p2 = ((p_Result_15_i_reg_854 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_1_i_fu_417_p2 = ((p_Result_1_i_reg_770 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_2_i_fu_435_p2 = ((p_Result_2_i_reg_776 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_3_i_fu_453_p2 = ((p_Result_3_i_reg_782 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_4_i_fu_471_p2 = ((p_Result_4_i_reg_788 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_5_i_fu_489_p2 = ((p_Result_5_i_reg_794 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_6_i_fu_507_p2 = ((p_Result_6_i_reg_800 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_7_i_fu_525_p2 = ((p_Result_7_i_reg_806 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_8_i_fu_543_p2 = ((p_Result_8_i_reg_812 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_9_i_fu_561_p2 = ((p_Result_9_i_reg_818 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_i_26_fu_579_p2 = ((p_Result_i_reg_824 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_19_i_fu_399_p2 = ((tmp_15_reg_764 == 32'd2147483648) ? 1'b1 : 1'b0);

assign tmp_1_fu_427_p3 = ((tmp_19_1_i_fu_417_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_1_i_fu_422_p2);

assign tmp_2_fu_445_p3 = ((tmp_19_2_i_fu_435_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_2_i_fu_440_p2);

assign tmp_3_fu_463_p3 = ((tmp_19_3_i_fu_453_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_3_i_fu_458_p2);

assign tmp_4_fu_481_p3 = ((tmp_19_4_i_fu_471_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_4_i_fu_476_p2);

assign tmp_5_fu_499_p3 = ((tmp_19_5_i_fu_489_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_5_i_fu_494_p2);

assign tmp_6_fu_517_p3 = ((tmp_19_6_i_fu_507_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_6_i_fu_512_p2);

assign tmp_7_fu_535_p3 = ((tmp_19_7_i_fu_525_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_7_i_fu_530_p2);

assign tmp_8_fu_553_p3 = ((tmp_19_8_i_fu_543_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_8_i_fu_548_p2);

assign tmp_9_fu_571_p3 = ((tmp_19_9_i_fu_561_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_9_i_fu_566_p2);

assign tmp_fu_409_p3 = ((tmp_19_i_fu_399_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_i_fu_404_p2);

assign tmp_i_28_fu_225_p2 = ((iter_i_mid2_fu_217_p3 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_589_p3 = ((tmp_19_i_26_fu_579_p2[0:0] === 1'b1) ? 32'd2147483648 : ret_V_2_i_27_fu_584_p2);

endmodule //subtract_max
