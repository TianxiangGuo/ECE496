// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_r.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_r::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_r::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> write_r::ap_ST_fsm_state1 = "1";
const sc_lv<4> write_r::ap_ST_fsm_state2 = "10";
const sc_lv<4> write_r::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> write_r::ap_ST_fsm_state6 = "1000";
const sc_lv<32> write_r::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool write_r::ap_const_boolean_1 = true;
const sc_lv<1> write_r::ap_const_lv1_0 = "0";
const sc_lv<1> write_r::ap_const_lv1_1 = "1";
const sc_lv<2> write_r::ap_const_lv2_0 = "00";
const sc_lv<2> write_r::ap_const_lv2_2 = "10";
const sc_lv<2> write_r::ap_const_lv2_3 = "11";
const sc_lv<2> write_r::ap_const_lv2_1 = "1";
const sc_lv<32> write_r::ap_const_lv32_1 = "1";
const sc_lv<32> write_r::ap_const_lv32_2 = "10";
const bool write_r::ap_const_boolean_0 = false;
const sc_lv<28> write_r::ap_const_lv28_0 = "0000000000000000000000000000";
const sc_lv<12> write_r::ap_const_lv12_0 = "000000000000";
const sc_lv<8> write_r::ap_const_lv8_0 = "00000000";
const sc_lv<8> write_r::ap_const_lv8_FF = "11111111";
const sc_lv<32> write_r::ap_const_lv32_20 = "100000";
const sc_lv<32> write_r::ap_const_lv32_3F = "111111";
const sc_lv<32> write_r::ap_const_lv32_25 = "100101";
const sc_lv<32> write_r::ap_const_lv32_40 = "1000000";
const sc_lv<32> write_r::ap_const_lv32_5F = "1011111";
const sc_lv<32> write_r::ap_const_lv32_26 = "100110";
const sc_lv<26> write_r::ap_const_lv26_0 = "00000000000000000000000000";
const sc_lv<6> write_r::ap_const_lv6_0 = "000000";
const sc_lv<32> write_r::ap_const_lv32_6 = "110";
const sc_lv<32> write_r::ap_const_lv32_1F = "11111";
const sc_lv<512> write_r::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> write_r::ap_const_lv32_15 = "10101";
const sc_lv<16> write_r::ap_const_lv16_1 = "1";
const sc_lv<32> write_r::ap_const_lv32_24 = "100100";
const sc_lv<32> write_r::ap_const_lv32_2F = "101111";
const sc_lv<29> write_r::ap_const_lv29_1FFFFFFF = "11111111111111111111111111111";
const sc_lv<28> write_r::ap_const_lv28_1 = "1";
const sc_lv<12> write_r::ap_const_lv12_1 = "1";
const sc_lv<128> write_r::ap_const_lv128_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> write_r::ap_const_lv32_3 = "11";

write_r::write_r(sc_module_name name) : sc_module(name), mVcdFile(0) {
    softmax_mul_mul_1dEe_U71 = new softmax_mul_mul_1dEe<1,1,12,16,28>("softmax_mul_mul_1dEe_U71");
    softmax_mul_mul_1dEe_U71->din0(bound_fu_626_p0);
    softmax_mul_mul_1dEe_U71->din1(bound_fu_626_p1);
    softmax_mul_mul_1dEe_U71->dout(bound_fu_626_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_NN_c_2_cast_i_fu_230_p4);
    sensitive << ( in_write_n_V_V_dout );

    SC_METHOD(thread_NN_c_2_fu_220_p4);
    sensitive << ( in_write_n_V_V_dout );

    SC_METHOD(thread_NN_c_fu_288_p3);
    sensitive << ( tmp_1_fu_278_p4 );

    SC_METHOD(thread_N_r_fu_216_p1);
    sensitive << ( in_write_n_V_V_dout );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_write_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_692 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_write_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_flatten_reg_692 );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_write_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_flatten_reg_692 );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( or_cond1_i_reg_713 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( in_write_V_V_empty_n );
    sensitive << ( exitcond_flatten_reg_692 );

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( or_cond1_i_reg_713_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state6);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_id_V_1_ack_in );
    sensitive << ( out_V_dest_V_1_ack_in );
    sensitive << ( out_V_user_V_1_ack_in );
    sensitive << ( out_V_last_V_1_ack_in );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_flatten_fu_403_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_id_V_1_ack_in );
    sensitive << ( out_V_dest_V_1_ack_in );
    sensitive << ( out_V_user_V_1_ack_in );
    sensitive << ( out_V_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_id_V_1_ack_in );
    sensitive << ( out_V_dest_V_1_ack_in );
    sensitive << ( out_V_user_V_1_ack_in );
    sensitive << ( out_V_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_bound_fu_626_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_626_p00 );

    SC_METHOD(thread_bound_fu_626_p00);
    sensitive << ( tmp_reg_676 );

    SC_METHOD(thread_bound_fu_626_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_626_p10 );

    SC_METHOD(thread_bound_fu_626_p10);
    sensitive << ( tmp_5_reg_666 );

    SC_METHOD(thread_exitcond2_fu_414_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( t_V_reg_205 );
    sensitive << ( tmp_reg_676 );
    sensitive << ( exitcond_flatten_fu_403_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_flatten_fu_403_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_194 );
    sensitive << ( bound_reg_687 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_V_fu_464_p2);
    sensitive << ( t_V_1_mid2_fu_419_p3 );

    SC_METHOD(thread_icmp_fu_260_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( tmp_4_fu_250_p4 );

    SC_METHOD(thread_in_write_V_V_blk_n);
    sensitive << ( in_write_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_692 );

    SC_METHOD(thread_in_write_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_692 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_write_iter_c_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_write_iter_c_V_V_empty_n );

    SC_METHOD(thread_in_write_iter_c_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );

    SC_METHOD(thread_in_write_n_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_write_n_V_V_empty_n );

    SC_METHOD(thread_in_write_n_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );

    SC_METHOD(thread_indvar_flatten_next_fu_408_p2);
    sensitive << ( indvar_flatten_reg_194 );

    SC_METHOD(thread_op2_assign_fu_391_p2);
    sensitive << ( tmp_cast_i_fu_388_p1 );

    SC_METHOD(thread_or_cond1_i_fu_458_p2);
    sensitive << ( out_data_last_V_fu_453_p2 );
    sensitive << ( or_cond_i_fu_443_p2 );

    SC_METHOD(thread_or_cond_i_fu_443_p2);
    sensitive << ( tmp_12_i_fu_431_p2 );
    sensitive << ( tmp_13_i_fu_437_p2 );

    SC_METHOD(thread_out_V_data_V_1_ack_in);
    sensitive << ( out_V_data_V_1_state );

    SC_METHOD(thread_out_V_data_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_data_V_1_data_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_cond1_i_reg_713 );
    sensitive << ( p_Result_s_fu_334_p5 );
    sensitive << ( tmp_data_V_1_fu_613_p5 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_data_V_1_data_out);
    sensitive << ( out_V_data_V_1_payload_A );
    sensitive << ( out_V_data_V_1_payload_B );
    sensitive << ( out_V_data_V_1_sel );

    SC_METHOD(thread_out_V_data_V_1_load_A);
    sensitive << ( out_V_data_V_1_sel_wr );
    sensitive << ( out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_data_V_1_load_B);
    sensitive << ( out_V_data_V_1_sel_wr );
    sensitive << ( out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_data_V_1_sel);
    sensitive << ( out_V_data_V_1_sel_rd );

    SC_METHOD(thread_out_V_data_V_1_state_cmp_full);
    sensitive << ( out_V_data_V_1_state );

    SC_METHOD(thread_out_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_cond1_i_reg_713 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_data_V_1_vld_out);
    sensitive << ( out_V_data_V_1_state );

    SC_METHOD(thread_out_V_dest_V_1_ack_in);
    sensitive << ( out_V_dest_V_1_state );

    SC_METHOD(thread_out_V_dest_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_dest_V_1_data_out);
    sensitive << ( out_V_dest_V_1_sel );

    SC_METHOD(thread_out_V_dest_V_1_sel);
    sensitive << ( out_V_dest_V_1_sel_rd );

    SC_METHOD(thread_out_V_dest_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_cond1_i_reg_713 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_dest_V_1_vld_out);
    sensitive << ( out_V_dest_V_1_state );

    SC_METHOD(thread_out_V_id_V_1_ack_in);
    sensitive << ( out_V_id_V_1_state );

    SC_METHOD(thread_out_V_id_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_id_V_1_data_out);
    sensitive << ( out_V_id_V_1_sel );

    SC_METHOD(thread_out_V_id_V_1_sel);
    sensitive << ( out_V_id_V_1_sel_rd );

    SC_METHOD(thread_out_V_id_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_cond1_i_reg_713 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_id_V_1_vld_out);
    sensitive << ( out_V_id_V_1_state );

    SC_METHOD(thread_out_V_last_V_1_ack_in);
    sensitive << ( out_V_last_V_1_state );

    SC_METHOD(thread_out_V_last_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_last_V_1_data_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_cond1_i_reg_713 );
    sensitive << ( out_data_last_V_reg_708 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_last_V_1_data_out);
    sensitive << ( out_V_last_V_1_payload_A );
    sensitive << ( out_V_last_V_1_payload_B );
    sensitive << ( out_V_last_V_1_sel );

    SC_METHOD(thread_out_V_last_V_1_load_A);
    sensitive << ( out_V_last_V_1_sel_wr );
    sensitive << ( out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_last_V_1_load_B);
    sensitive << ( out_V_last_V_1_sel_wr );
    sensitive << ( out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_last_V_1_sel);
    sensitive << ( out_V_last_V_1_sel_rd );

    SC_METHOD(thread_out_V_last_V_1_state_cmp_full);
    sensitive << ( out_V_last_V_1_state );

    SC_METHOD(thread_out_V_last_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_cond1_i_reg_713 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_last_V_1_vld_out);
    sensitive << ( out_V_last_V_1_state );

    SC_METHOD(thread_out_V_user_V_1_ack_in);
    sensitive << ( out_V_user_V_1_state );

    SC_METHOD(thread_out_V_user_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_user_V_1_data_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_cond1_i_reg_713 );
    sensitive << ( out_data_user_V_fu_357_p2 );
    sensitive << ( out_data_user_V_reg_661 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_user_V_1_data_out);
    sensitive << ( out_V_user_V_1_payload_A );
    sensitive << ( out_V_user_V_1_payload_B );
    sensitive << ( out_V_user_V_1_sel );

    SC_METHOD(thread_out_V_user_V_1_load_A);
    sensitive << ( out_V_user_V_1_sel_wr );
    sensitive << ( out_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_user_V_1_load_B);
    sensitive << ( out_V_user_V_1_sel_wr );
    sensitive << ( out_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_user_V_1_sel);
    sensitive << ( out_V_user_V_1_sel_rd );

    SC_METHOD(thread_out_V_user_V_1_state_cmp_full);
    sensitive << ( out_V_user_V_1_state );

    SC_METHOD(thread_out_V_user_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_cond1_i_reg_713 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_user_V_1_vld_out);
    sensitive << ( out_V_user_V_1_state );

    SC_METHOD(thread_out_data_last_V_fu_453_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( op2_assign_reg_682 );
    sensitive << ( exitcond_flatten_fu_403_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_14_cast_i_fu_449_p1 );

    SC_METHOD(thread_out_data_user_V_fu_357_p2);
    sensitive << ( tmp_6_i_fu_347_p4 );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( out_V_data_V_1_data_out );

    SC_METHOD(thread_out_r_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( or_cond1_i_reg_713 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( or_cond1_i_reg_713_pp0_iter1_reg );

    SC_METHOD(thread_out_r_TDEST);
    sensitive << ( out_V_dest_V_1_data_out );

    SC_METHOD(thread_out_r_TID);
    sensitive << ( out_V_id_V_1_data_out );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( out_V_last_V_1_data_out );

    SC_METHOD(thread_out_r_TUSER);
    sensitive << ( out_V_user_V_1_data_out );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( out_V_last_V_1_state );

    SC_METHOD(thread_p_Result_s_fu_334_p5);
    sensitive << ( tmp_9_i_fu_324_p4 );

    SC_METHOD(thread_p_temp_V_1_1_i_fu_503_p3);
    sensitive << ( temp_V_1_1_i_fu_142 );
    sensitive << ( tmp_7_i_fu_482_p2 );

    SC_METHOD(thread_p_temp_V_2_1_i_fu_495_p3);
    sensitive << ( temp_V_2_1_i_fu_146 );
    sensitive << ( tmp_7_i_fu_482_p2 );

    SC_METHOD(thread_p_temp_V_3_1_i_fu_487_p3);
    sensitive << ( temp_V_3_1_i_fu_150 );
    sensitive << ( tmp_7_i_fu_482_p2 );

    SC_METHOD(thread_ret_V_fu_427_p1);
    sensitive << ( t_V_1_mid2_fu_419_p3 );

    SC_METHOD(thread_sel_tmp1_fu_516_p3);
    sensitive << ( in_write_V_V_dout );
    sensitive << ( sel_tmp_fu_511_p2 );
    sensitive << ( p_temp_V_3_1_i_fu_487_p3 );

    SC_METHOD(thread_sel_tmp2_fu_524_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_692 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ret_V_reg_701 );

    SC_METHOD(thread_sel_tmp3_fu_529_p3);
    sensitive << ( p_temp_V_3_1_i_fu_487_p3 );
    sensitive << ( sel_tmp2_fu_524_p2 );
    sensitive << ( sel_tmp1_fu_516_p3 );

    SC_METHOD(thread_sel_tmp4_fu_296_p3);
    sensitive << ( icmp_fu_260_p2 );
    sensitive << ( NN_c_fu_288_p3 );

    SC_METHOD(thread_sel_tmp5_fu_304_p2);
    sensitive << ( icmp_fu_260_p2 );

    SC_METHOD(thread_sel_tmp6_fu_310_p2);
    sensitive << ( tmp_2_i_fu_266_p2 );
    sensitive << ( sel_tmp5_fu_304_p2 );

    SC_METHOD(thread_sel_tmp7_fu_545_p3);
    sensitive << ( in_write_V_V_dout );
    sensitive << ( sel_tmp_fu_511_p2 );
    sensitive << ( p_temp_V_2_1_i_fu_495_p3 );

    SC_METHOD(thread_sel_tmp8_fu_569_p3);
    sensitive << ( in_write_V_V_dout );
    sensitive << ( sel_tmp2_fu_524_p2 );
    sensitive << ( p_temp_V_1_1_i_fu_503_p3 );

    SC_METHOD(thread_sel_tmp9_fu_553_p3);
    sensitive << ( sel_tmp2_fu_524_p2 );
    sensitive << ( p_temp_V_2_1_i_fu_495_p3 );
    sensitive << ( sel_tmp7_fu_545_p3 );

    SC_METHOD(thread_sel_tmp_fu_511_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_692 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ret_V_reg_701 );

    SC_METHOD(thread_t_V_1_mid2_fu_419_p3);
    sensitive << ( t_V_reg_205 );
    sensitive << ( exitcond2_fu_414_p2 );

    SC_METHOD(thread_temp_V_0_3_i_fu_585_p3);
    sensitive << ( in_write_V_V_dout );
    sensitive << ( temp_V_0_1_i_fu_138 );
    sensitive << ( tmp_7_i_fu_482_p2 );

    SC_METHOD(thread_temp_V_1_3_i_fu_577_p3);
    sensitive << ( tmp_7_i_fu_482_p2 );
    sensitive << ( sel_tmp8_fu_569_p3 );

    SC_METHOD(thread_temp_V_2_3_i_fu_561_p3);
    sensitive << ( tmp_7_i_fu_482_p2 );
    sensitive << ( sel_tmp9_fu_553_p3 );

    SC_METHOD(thread_temp_V_3_3_i_fu_537_p3);
    sensitive << ( tmp_7_i_fu_482_p2 );
    sensitive << ( sel_tmp3_fu_529_p3 );

    SC_METHOD(thread_tmp_12_i_fu_431_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( exitcond_flatten_fu_403_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( t_V_1_mid2_fu_419_p3 );

    SC_METHOD(thread_tmp_13_i_fu_437_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( exitcond_flatten_fu_403_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ret_V_fu_427_p1 );

    SC_METHOD(thread_tmp_14_cast_i_fu_449_p1);
    sensitive << ( t_V_1_mid2_fu_419_p3 );

    SC_METHOD(thread_tmp_1_fu_278_p4);
    sensitive << ( tmp_3_i_fu_272_p2 );

    SC_METHOD(thread_tmp_2_i_fu_266_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( NN_c_2_cast_i_fu_230_p4 );

    SC_METHOD(thread_tmp_3_i_fu_272_p2);
    sensitive << ( NN_c_2_fu_220_p4 );

    SC_METHOD(thread_tmp_4_fu_250_p4);
    sensitive << ( in_write_n_V_V_dout );

    SC_METHOD(thread_tmp_5_fu_364_p1);
    sensitive << ( in_write_n_V_V_dout );

    SC_METHOD(thread_tmp_6_i_fu_347_p4);
    sensitive << ( val_assign_fu_316_p3 );

    SC_METHOD(thread_tmp_7_i_fu_482_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_692 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ret_V_reg_701 );

    SC_METHOD(thread_tmp_9_i_fu_324_p4);
    sensitive << ( unquant_N_fu_240_p4 );
    sensitive << ( val_assign_fu_316_p3 );
    sensitive << ( N_r_fu_216_p1 );

    SC_METHOD(thread_tmp_cast_i_fu_388_p1);
    sensitive << ( tmp_2_reg_671 );

    SC_METHOD(thread_tmp_data_V_1_fu_613_p5);
    sensitive << ( temp_V_0_3_i_fu_585_p3 );
    sensitive << ( temp_V_1_3_i_fu_577_p3 );
    sensitive << ( temp_V_2_3_i_fu_561_p3 );
    sensitive << ( temp_V_3_3_i_fu_537_p3 );

    SC_METHOD(thread_unquant_N_fu_240_p4);
    sensitive << ( in_write_n_V_V_dout );

    SC_METHOD(thread_val_assign_fu_316_p3);
    sensitive << ( NN_c_2_fu_220_p4 );
    sensitive << ( sel_tmp6_fu_310_p2 );
    sensitive << ( sel_tmp4_fu_296_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_id_V_1_ack_in );
    sensitive << ( out_V_dest_V_1_ack_in );
    sensitive << ( out_V_user_V_1_ack_in );
    sensitive << ( out_V_last_V_1_ack_in );
    sensitive << ( in_write_n_V_V_empty_n );
    sensitive << ( in_write_iter_c_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_flatten_fu_403_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state6 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    out_V_data_V_1_sel_rd = SC_LOGIC_0;
    out_V_data_V_1_sel_wr = SC_LOGIC_0;
    out_V_data_V_1_state = "00";
    out_V_id_V_1_sel_rd = SC_LOGIC_0;
    out_V_id_V_1_state = "00";
    out_V_dest_V_1_sel_rd = SC_LOGIC_0;
    out_V_dest_V_1_state = "00";
    out_V_user_V_1_sel_rd = SC_LOGIC_0;
    out_V_user_V_1_sel_wr = SC_LOGIC_0;
    out_V_user_V_1_state = "00";
    out_V_last_V_1_sel_rd = SC_LOGIC_0;
    out_V_last_V_1_sel_wr = SC_LOGIC_0;
    out_V_last_V_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_r_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, out_r_TID, "(port)out_r_TID");
    sc_trace(mVcdFile, out_r_TDEST, "(port)out_r_TDEST");
    sc_trace(mVcdFile, out_r_TUSER, "(port)out_r_TUSER");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, in_write_n_V_V_dout, "(port)in_write_n_V_V_dout");
    sc_trace(mVcdFile, in_write_n_V_V_empty_n, "(port)in_write_n_V_V_empty_n");
    sc_trace(mVcdFile, in_write_n_V_V_read, "(port)in_write_n_V_V_read");
    sc_trace(mVcdFile, in_write_iter_c_V_V_dout, "(port)in_write_iter_c_V_V_dout");
    sc_trace(mVcdFile, in_write_iter_c_V_V_empty_n, "(port)in_write_iter_c_V_V_empty_n");
    sc_trace(mVcdFile, in_write_iter_c_V_V_read, "(port)in_write_iter_c_V_V_read");
    sc_trace(mVcdFile, in_write_V_V_dout, "(port)in_write_V_V_dout");
    sc_trace(mVcdFile, in_write_V_V_empty_n, "(port)in_write_V_V_empty_n");
    sc_trace(mVcdFile, in_write_V_V_read, "(port)in_write_V_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_V_data_V_1_data_in, "out_V_data_V_1_data_in");
    sc_trace(mVcdFile, out_V_data_V_1_data_out, "out_V_data_V_1_data_out");
    sc_trace(mVcdFile, out_V_data_V_1_vld_in, "out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, out_V_data_V_1_vld_out, "out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, out_V_data_V_1_ack_in, "out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, out_V_data_V_1_ack_out, "out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, out_V_data_V_1_payload_A, "out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, out_V_data_V_1_payload_B, "out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, out_V_data_V_1_sel_rd, "out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_data_V_1_sel_wr, "out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_data_V_1_sel, "out_V_data_V_1_sel");
    sc_trace(mVcdFile, out_V_data_V_1_load_A, "out_V_data_V_1_load_A");
    sc_trace(mVcdFile, out_V_data_V_1_load_B, "out_V_data_V_1_load_B");
    sc_trace(mVcdFile, out_V_data_V_1_state, "out_V_data_V_1_state");
    sc_trace(mVcdFile, out_V_data_V_1_state_cmp_full, "out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_V_id_V_1_data_out, "out_V_id_V_1_data_out");
    sc_trace(mVcdFile, out_V_id_V_1_vld_in, "out_V_id_V_1_vld_in");
    sc_trace(mVcdFile, out_V_id_V_1_vld_out, "out_V_id_V_1_vld_out");
    sc_trace(mVcdFile, out_V_id_V_1_ack_in, "out_V_id_V_1_ack_in");
    sc_trace(mVcdFile, out_V_id_V_1_ack_out, "out_V_id_V_1_ack_out");
    sc_trace(mVcdFile, out_V_id_V_1_sel_rd, "out_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_id_V_1_sel, "out_V_id_V_1_sel");
    sc_trace(mVcdFile, out_V_id_V_1_state, "out_V_id_V_1_state");
    sc_trace(mVcdFile, out_V_dest_V_1_data_out, "out_V_dest_V_1_data_out");
    sc_trace(mVcdFile, out_V_dest_V_1_vld_in, "out_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_V_dest_V_1_vld_out, "out_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_V_dest_V_1_ack_in, "out_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_V_dest_V_1_ack_out, "out_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_V_dest_V_1_sel_rd, "out_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_dest_V_1_sel, "out_V_dest_V_1_sel");
    sc_trace(mVcdFile, out_V_dest_V_1_state, "out_V_dest_V_1_state");
    sc_trace(mVcdFile, out_V_user_V_1_data_in, "out_V_user_V_1_data_in");
    sc_trace(mVcdFile, out_V_user_V_1_data_out, "out_V_user_V_1_data_out");
    sc_trace(mVcdFile, out_V_user_V_1_vld_in, "out_V_user_V_1_vld_in");
    sc_trace(mVcdFile, out_V_user_V_1_vld_out, "out_V_user_V_1_vld_out");
    sc_trace(mVcdFile, out_V_user_V_1_ack_in, "out_V_user_V_1_ack_in");
    sc_trace(mVcdFile, out_V_user_V_1_ack_out, "out_V_user_V_1_ack_out");
    sc_trace(mVcdFile, out_V_user_V_1_payload_A, "out_V_user_V_1_payload_A");
    sc_trace(mVcdFile, out_V_user_V_1_payload_B, "out_V_user_V_1_payload_B");
    sc_trace(mVcdFile, out_V_user_V_1_sel_rd, "out_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_user_V_1_sel_wr, "out_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_user_V_1_sel, "out_V_user_V_1_sel");
    sc_trace(mVcdFile, out_V_user_V_1_load_A, "out_V_user_V_1_load_A");
    sc_trace(mVcdFile, out_V_user_V_1_load_B, "out_V_user_V_1_load_B");
    sc_trace(mVcdFile, out_V_user_V_1_state, "out_V_user_V_1_state");
    sc_trace(mVcdFile, out_V_user_V_1_state_cmp_full, "out_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_V_last_V_1_data_in, "out_V_last_V_1_data_in");
    sc_trace(mVcdFile, out_V_last_V_1_data_out, "out_V_last_V_1_data_out");
    sc_trace(mVcdFile, out_V_last_V_1_vld_in, "out_V_last_V_1_vld_in");
    sc_trace(mVcdFile, out_V_last_V_1_vld_out, "out_V_last_V_1_vld_out");
    sc_trace(mVcdFile, out_V_last_V_1_ack_in, "out_V_last_V_1_ack_in");
    sc_trace(mVcdFile, out_V_last_V_1_ack_out, "out_V_last_V_1_ack_out");
    sc_trace(mVcdFile, out_V_last_V_1_payload_A, "out_V_last_V_1_payload_A");
    sc_trace(mVcdFile, out_V_last_V_1_payload_B, "out_V_last_V_1_payload_B");
    sc_trace(mVcdFile, out_V_last_V_1_sel_rd, "out_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_last_V_1_sel_wr, "out_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_last_V_1_sel, "out_V_last_V_1_sel");
    sc_trace(mVcdFile, out_V_last_V_1_load_A, "out_V_last_V_1_load_A");
    sc_trace(mVcdFile, out_V_last_V_1_load_B, "out_V_last_V_1_load_B");
    sc_trace(mVcdFile, out_V_last_V_1_state, "out_V_last_V_1_state");
    sc_trace(mVcdFile, out_V_last_V_1_state_cmp_full, "out_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_r_TDATA_blk_n, "out_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, or_cond1_i_reg_713, "or_cond1_i_reg_713");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, or_cond1_i_reg_713_pp0_iter1_reg, "or_cond1_i_reg_713_pp0_iter1_reg");
    sc_trace(mVcdFile, in_write_n_V_V_blk_n, "in_write_n_V_V_blk_n");
    sc_trace(mVcdFile, in_write_iter_c_V_V_blk_n, "in_write_iter_c_V_V_blk_n");
    sc_trace(mVcdFile, in_write_V_V_blk_n, "in_write_V_V_blk_n");
    sc_trace(mVcdFile, exitcond_flatten_reg_692, "exitcond_flatten_reg_692");
    sc_trace(mVcdFile, indvar_flatten_reg_194, "indvar_flatten_reg_194");
    sc_trace(mVcdFile, t_V_reg_205, "t_V_reg_205");
    sc_trace(mVcdFile, p_Result_s_fu_334_p5, "p_Result_s_fu_334_p5");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, out_data_user_V_fu_357_p2, "out_data_user_V_fu_357_p2");
    sc_trace(mVcdFile, out_data_user_V_reg_661, "out_data_user_V_reg_661");
    sc_trace(mVcdFile, tmp_5_fu_364_p1, "tmp_5_fu_364_p1");
    sc_trace(mVcdFile, tmp_5_reg_666, "tmp_5_reg_666");
    sc_trace(mVcdFile, tmp_2_reg_671, "tmp_2_reg_671");
    sc_trace(mVcdFile, tmp_reg_676, "tmp_reg_676");
    sc_trace(mVcdFile, op2_assign_fu_391_p2, "op2_assign_fu_391_p2");
    sc_trace(mVcdFile, op2_assign_reg_682, "op2_assign_reg_682");
    sc_trace(mVcdFile, bound_fu_626_p2, "bound_fu_626_p2");
    sc_trace(mVcdFile, bound_reg_687, "bound_reg_687");
    sc_trace(mVcdFile, exitcond_flatten_fu_403_p2, "exitcond_flatten_fu_403_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter2, "ap_block_state5_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_408_p2, "indvar_flatten_next_fu_408_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ret_V_fu_427_p1, "ret_V_fu_427_p1");
    sc_trace(mVcdFile, ret_V_reg_701, "ret_V_reg_701");
    sc_trace(mVcdFile, out_data_last_V_fu_453_p2, "out_data_last_V_fu_453_p2");
    sc_trace(mVcdFile, out_data_last_V_reg_708, "out_data_last_V_reg_708");
    sc_trace(mVcdFile, or_cond1_i_fu_458_p2, "or_cond1_i_fu_458_p2");
    sc_trace(mVcdFile, i_V_fu_464_p2, "i_V_fu_464_p2");
    sc_trace(mVcdFile, tmp_data_V_1_fu_613_p5, "tmp_data_V_1_fu_613_p5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, temp_V_0_1_i_fu_138, "temp_V_0_1_i_fu_138");
    sc_trace(mVcdFile, temp_V_0_3_i_fu_585_p3, "temp_V_0_3_i_fu_585_p3");
    sc_trace(mVcdFile, temp_V_1_1_i_fu_142, "temp_V_1_1_i_fu_142");
    sc_trace(mVcdFile, temp_V_1_3_i_fu_577_p3, "temp_V_1_3_i_fu_577_p3");
    sc_trace(mVcdFile, temp_V_2_1_i_fu_146, "temp_V_2_1_i_fu_146");
    sc_trace(mVcdFile, temp_V_2_3_i_fu_561_p3, "temp_V_2_3_i_fu_561_p3");
    sc_trace(mVcdFile, temp_V_3_1_i_fu_150, "temp_V_3_1_i_fu_150");
    sc_trace(mVcdFile, temp_V_3_3_i_fu_537_p3, "temp_V_3_3_i_fu_537_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_4_fu_250_p4, "tmp_4_fu_250_p4");
    sc_trace(mVcdFile, NN_c_2_cast_i_fu_230_p4, "NN_c_2_cast_i_fu_230_p4");
    sc_trace(mVcdFile, NN_c_2_fu_220_p4, "NN_c_2_fu_220_p4");
    sc_trace(mVcdFile, tmp_3_i_fu_272_p2, "tmp_3_i_fu_272_p2");
    sc_trace(mVcdFile, tmp_1_fu_278_p4, "tmp_1_fu_278_p4");
    sc_trace(mVcdFile, icmp_fu_260_p2, "icmp_fu_260_p2");
    sc_trace(mVcdFile, NN_c_fu_288_p3, "NN_c_fu_288_p3");
    sc_trace(mVcdFile, tmp_2_i_fu_266_p2, "tmp_2_i_fu_266_p2");
    sc_trace(mVcdFile, sel_tmp5_fu_304_p2, "sel_tmp5_fu_304_p2");
    sc_trace(mVcdFile, sel_tmp6_fu_310_p2, "sel_tmp6_fu_310_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_296_p3, "sel_tmp4_fu_296_p3");
    sc_trace(mVcdFile, unquant_N_fu_240_p4, "unquant_N_fu_240_p4");
    sc_trace(mVcdFile, val_assign_fu_316_p3, "val_assign_fu_316_p3");
    sc_trace(mVcdFile, N_r_fu_216_p1, "N_r_fu_216_p1");
    sc_trace(mVcdFile, tmp_9_i_fu_324_p4, "tmp_9_i_fu_324_p4");
    sc_trace(mVcdFile, tmp_6_i_fu_347_p4, "tmp_6_i_fu_347_p4");
    sc_trace(mVcdFile, tmp_cast_i_fu_388_p1, "tmp_cast_i_fu_388_p1");
    sc_trace(mVcdFile, exitcond2_fu_414_p2, "exitcond2_fu_414_p2");
    sc_trace(mVcdFile, t_V_1_mid2_fu_419_p3, "t_V_1_mid2_fu_419_p3");
    sc_trace(mVcdFile, tmp_12_i_fu_431_p2, "tmp_12_i_fu_431_p2");
    sc_trace(mVcdFile, tmp_13_i_fu_437_p2, "tmp_13_i_fu_437_p2");
    sc_trace(mVcdFile, tmp_14_cast_i_fu_449_p1, "tmp_14_cast_i_fu_449_p1");
    sc_trace(mVcdFile, or_cond_i_fu_443_p2, "or_cond_i_fu_443_p2");
    sc_trace(mVcdFile, tmp_7_i_fu_482_p2, "tmp_7_i_fu_482_p2");
    sc_trace(mVcdFile, sel_tmp_fu_511_p2, "sel_tmp_fu_511_p2");
    sc_trace(mVcdFile, p_temp_V_3_1_i_fu_487_p3, "p_temp_V_3_1_i_fu_487_p3");
    sc_trace(mVcdFile, sel_tmp2_fu_524_p2, "sel_tmp2_fu_524_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_516_p3, "sel_tmp1_fu_516_p3");
    sc_trace(mVcdFile, sel_tmp3_fu_529_p3, "sel_tmp3_fu_529_p3");
    sc_trace(mVcdFile, p_temp_V_2_1_i_fu_495_p3, "p_temp_V_2_1_i_fu_495_p3");
    sc_trace(mVcdFile, sel_tmp7_fu_545_p3, "sel_tmp7_fu_545_p3");
    sc_trace(mVcdFile, sel_tmp9_fu_553_p3, "sel_tmp9_fu_553_p3");
    sc_trace(mVcdFile, p_temp_V_1_1_i_fu_503_p3, "p_temp_V_1_1_i_fu_503_p3");
    sc_trace(mVcdFile, sel_tmp8_fu_569_p3, "sel_tmp8_fu_569_p3");
    sc_trace(mVcdFile, bound_fu_626_p0, "bound_fu_626_p0");
    sc_trace(mVcdFile, bound_fu_626_p1, "bound_fu_626_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_block_state6, "ap_block_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, bound_fu_626_p00, "bound_fu_626_p00");
    sc_trace(mVcdFile, bound_fu_626_p10, "bound_fu_626_p10");
#endif

    }
}

write_r::~write_r() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete softmax_mul_mul_1dEe_U71;
}

void write_r::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_403_p2.read()))) {
        indvar_flatten_reg_194 = indvar_flatten_next_fu_408_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        indvar_flatten_reg_194 = ap_const_lv28_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_out.read()))) {
            out_V_data_V_1_sel_rd =  (sc_logic) (~out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_in.read()))) {
            out_V_data_V_1_sel_wr =  (sc_logic) (~out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()))))) {
            out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_vld_out.read()))) {
            out_V_dest_V_1_sel_rd =  (sc_logic) (~out_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_dest_V_1_state.read())))) {
            out_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_dest_V_1_state.read())))) {
            out_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_ack_out.read()))))) {
            out_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_vld_out.read()))) {
            out_V_id_V_1_sel_rd =  (sc_logic) (~out_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_id_V_1_state.read())))) {
            out_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_id_V_1_state.read())))) {
            out_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_ack_out.read()))))) {
            out_V_id_V_1_state = ap_const_lv2_3;
        } else {
            out_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_out.read()))) {
            out_V_last_V_1_sel_rd =  (sc_logic) (~out_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_in.read()))) {
            out_V_last_V_1_sel_wr =  (sc_logic) (~out_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_last_V_1_state.read())))) {
            out_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_last_V_1_state.read())))) {
            out_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_out.read()))))) {
            out_V_last_V_1_state = ap_const_lv2_3;
        } else {
            out_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_out.read()))) {
            out_V_user_V_1_sel_rd =  (sc_logic) (~out_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_in.read()))) {
            out_V_user_V_1_sel_wr =  (sc_logic) (~out_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_user_V_1_state.read())))) {
            out_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_user_V_1_state.read())))) {
            out_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_out.read()))))) {
            out_V_user_V_1_state = ap_const_lv2_3;
        } else {
            out_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_403_p2.read()))) {
        t_V_reg_205 = i_V_fu_464_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        t_V_reg_205 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        bound_reg_687 = bound_fu_626_p2.read();
        op2_assign_reg_682 = op2_assign_fu_391_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_692 = exitcond_flatten_fu_403_p2.read();
        or_cond1_i_reg_713_pp0_iter1_reg = or_cond1_i_reg_713.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_403_p2.read()))) {
        or_cond1_i_reg_713 = or_cond1_i_fu_458_p2.read();
        out_data_last_V_reg_708 = out_data_last_V_fu_453_p2.read();
        ret_V_reg_701 = ret_V_fu_427_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_load_A.read())) {
        out_V_data_V_1_payload_A = out_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_load_B.read())) {
        out_V_data_V_1_payload_B = out_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_load_A.read())) {
        out_V_last_V_1_payload_A = out_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_load_B.read())) {
        out_V_last_V_1_payload_B = out_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_load_A.read())) {
        out_V_user_V_1_payload_A = out_V_user_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_load_B.read())) {
        out_V_user_V_1_payload_B = out_V_user_V_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read())))) {
        out_data_user_V_reg_661 = out_data_user_V_fu_357_p2.read();
        tmp_2_reg_671 = in_write_n_V_V_dout.read().range(63, 36);
        tmp_5_reg_666 = tmp_5_fu_364_p1.read();
        tmp_reg_676 = in_write_n_V_V_dout.read().range(47, 36);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_692.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        temp_V_0_1_i_fu_138 = temp_V_0_3_i_fu_585_p3.read();
        temp_V_1_1_i_fu_142 = temp_V_1_3_i_fu_577_p3.read();
        temp_V_2_1_i_fu_146 = temp_V_2_3_i_fu_561_p3.read();
        temp_V_3_1_i_fu_150 = temp_V_3_3_i_fu_537_p3.read();
    }
}

void write_r::thread_NN_c_2_cast_i_fu_230_p4() {
    NN_c_2_cast_i_fu_230_p4 = in_write_n_V_V_dout.read().range(37, 32);
}

void write_r::thread_NN_c_2_fu_220_p4() {
    NN_c_2_fu_220_p4 = in_write_n_V_V_dout.read().range(63, 32);
}

void write_r::thread_NN_c_fu_288_p3() {
    NN_c_fu_288_p3 = esl_concat<26,6>(tmp_1_fu_278_p4.read(), ap_const_lv6_0);
}

void write_r::thread_N_r_fu_216_p1() {
    N_r_fu_216_p1 = in_write_n_V_V_dout.read().range(32-1, 0);
}

void write_r::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void write_r::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void write_r::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void write_r::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void write_r::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_r::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_692.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_empty_n.read()));
}

void write_r::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_692.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())));
}

void write_r::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_692.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())));
}

void write_r::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()));
}

void write_r::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_r::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()));
}

void write_r::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_692.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_write_V_V_empty_n.read()));
}

void write_r::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()));
}

void write_r::thread_ap_block_state5_pp0_stage0_iter2() {
    ap_block_state5_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_r::thread_ap_block_state6() {
    ap_block_state6 = (esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read()));
}

void write_r::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_403_p2.read())) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void write_r::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void write_r::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void write_r::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_r::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void write_r::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_r::thread_bound_fu_626_p0() {
    bound_fu_626_p0 =  (sc_lv<12>) (bound_fu_626_p00.read());
}

void write_r::thread_bound_fu_626_p00() {
    bound_fu_626_p00 = esl_zext<28,12>(tmp_reg_676.read());
}

void write_r::thread_bound_fu_626_p1() {
    bound_fu_626_p1 =  (sc_lv<16>) (bound_fu_626_p10.read());
}

void write_r::thread_bound_fu_626_p10() {
    bound_fu_626_p10 = esl_zext<28,16>(tmp_5_reg_666.read());
}

void write_r::thread_exitcond2_fu_414_p2() {
    exitcond2_fu_414_p2 = (!t_V_reg_205.read().is_01() || !tmp_reg_676.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_205.read() == tmp_reg_676.read());
}

void write_r::thread_exitcond_flatten_fu_403_p2() {
    exitcond_flatten_fu_403_p2 = (!indvar_flatten_reg_194.read().is_01() || !bound_reg_687.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_194.read() == bound_reg_687.read());
}

void write_r::thread_i_V_fu_464_p2() {
    i_V_fu_464_p2 = (!t_V_1_mid2_fu_419_p3.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(t_V_1_mid2_fu_419_p3.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void write_r::thread_icmp_fu_260_p2() {
    icmp_fu_260_p2 = (!tmp_4_fu_250_p4.read().is_01() || !ap_const_lv26_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_250_p4.read() == ap_const_lv26_0);
}

void write_r::thread_in_write_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_692.read()))) {
        in_write_V_V_blk_n = in_write_V_V_empty_n.read();
    } else {
        in_write_V_V_blk_n = ap_const_logic_1;
    }
}

void write_r::thread_in_write_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_692.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_write_V_V_read = ap_const_logic_1;
    } else {
        in_write_V_V_read = ap_const_logic_0;
    }
}

void write_r::thread_in_write_iter_c_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        in_write_iter_c_V_V_blk_n = in_write_iter_c_V_V_empty_n.read();
    } else {
        in_write_iter_c_V_V_blk_n = ap_const_logic_1;
    }
}

void write_r::thread_in_write_iter_c_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read())))) {
        in_write_iter_c_V_V_read = ap_const_logic_1;
    } else {
        in_write_iter_c_V_V_read = ap_const_logic_0;
    }
}

void write_r::thread_in_write_n_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        in_write_n_V_V_blk_n = in_write_n_V_V_empty_n.read();
    } else {
        in_write_n_V_V_blk_n = ap_const_logic_1;
    }
}

void write_r::thread_in_write_n_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read())))) {
        in_write_n_V_V_read = ap_const_logic_1;
    } else {
        in_write_n_V_V_read = ap_const_logic_0;
    }
}

void write_r::thread_indvar_flatten_next_fu_408_p2() {
    indvar_flatten_next_fu_408_p2 = (!indvar_flatten_reg_194.read().is_01() || !ap_const_lv28_1.is_01())? sc_lv<28>(): (sc_biguint<28>(indvar_flatten_reg_194.read()) + sc_biguint<28>(ap_const_lv28_1));
}

void write_r::thread_op2_assign_fu_391_p2() {
    op2_assign_fu_391_p2 = (!ap_const_lv29_1FFFFFFF.is_01() || !tmp_cast_i_fu_388_p1.read().is_01())? sc_lv<29>(): (sc_bigint<29>(ap_const_lv29_1FFFFFFF) + sc_biguint<29>(tmp_cast_i_fu_388_p1.read()));
}

void write_r::thread_or_cond1_i_fu_458_p2() {
    or_cond1_i_fu_458_p2 = (or_cond_i_fu_443_p2.read() | out_data_last_V_fu_453_p2.read());
}

void write_r::thread_or_cond_i_fu_443_p2() {
    or_cond_i_fu_443_p2 = (tmp_12_i_fu_431_p2.read() & tmp_13_i_fu_437_p2.read());
}

void write_r::thread_out_V_data_V_1_ack_in() {
    out_V_data_V_1_ack_in = out_V_data_V_1_state.read()[1];
}

void write_r::thread_out_V_data_V_1_ack_out() {
    out_V_data_V_1_ack_out = out_r_TREADY.read();
}

void write_r::thread_out_V_data_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_data_V_1_data_in = tmp_data_V_1_fu_613_p5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read())))) {
        out_V_data_V_1_data_in = p_Result_s_fu_334_p5.read();
    } else {
        out_V_data_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void write_r::thread_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_sel.read())) {
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B.read();
    } else {
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A.read();
    }
}

void write_r::thread_out_V_data_V_1_load_A() {
    out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full.read() & ~out_V_data_V_1_sel_wr.read());
}

void write_r::thread_out_V_data_V_1_load_B() {
    out_V_data_V_1_load_B = (out_V_data_V_1_sel_wr.read() & out_V_data_V_1_state_cmp_full.read());
}

void write_r::thread_out_V_data_V_1_sel() {
    out_V_data_V_1_sel = out_V_data_V_1_sel_rd.read();
}

void write_r::thread_out_V_data_V_1_state_cmp_full() {
    out_V_data_V_1_state_cmp_full =  (sc_logic) ((!out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void write_r::thread_out_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void write_r::thread_out_V_data_V_1_vld_out() {
    out_V_data_V_1_vld_out = out_V_data_V_1_state.read()[0];
}

void write_r::thread_out_V_dest_V_1_ack_in() {
    out_V_dest_V_1_ack_in = out_V_dest_V_1_state.read()[1];
}

void write_r::thread_out_V_dest_V_1_ack_out() {
    out_V_dest_V_1_ack_out = out_r_TREADY.read();
}

void write_r::thread_out_V_dest_V_1_data_out() {
    out_V_dest_V_1_data_out = ap_const_lv8_FF;
}

void write_r::thread_out_V_dest_V_1_sel() {
    out_V_dest_V_1_sel = out_V_dest_V_1_sel_rd.read();
}

void write_r::thread_out_V_dest_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void write_r::thread_out_V_dest_V_1_vld_out() {
    out_V_dest_V_1_vld_out = out_V_dest_V_1_state.read()[0];
}

void write_r::thread_out_V_id_V_1_ack_in() {
    out_V_id_V_1_ack_in = out_V_id_V_1_state.read()[1];
}

void write_r::thread_out_V_id_V_1_ack_out() {
    out_V_id_V_1_ack_out = out_r_TREADY.read();
}

void write_r::thread_out_V_id_V_1_data_out() {
    out_V_id_V_1_data_out = ap_const_lv8_0;
}

void write_r::thread_out_V_id_V_1_sel() {
    out_V_id_V_1_sel = out_V_id_V_1_sel_rd.read();
}

void write_r::thread_out_V_id_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void write_r::thread_out_V_id_V_1_vld_out() {
    out_V_id_V_1_vld_out = out_V_id_V_1_state.read()[0];
}

void write_r::thread_out_V_last_V_1_ack_in() {
    out_V_last_V_1_ack_in = out_V_last_V_1_state.read()[1];
}

void write_r::thread_out_V_last_V_1_ack_out() {
    out_V_last_V_1_ack_out = out_r_TREADY.read();
}

void write_r::thread_out_V_last_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_last_V_1_data_in = out_data_last_V_reg_708.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read())))) {
        out_V_last_V_1_data_in = ap_const_lv1_0;
    } else {
        out_V_last_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void write_r::thread_out_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_sel.read())) {
        out_V_last_V_1_data_out = out_V_last_V_1_payload_B.read();
    } else {
        out_V_last_V_1_data_out = out_V_last_V_1_payload_A.read();
    }
}

void write_r::thread_out_V_last_V_1_load_A() {
    out_V_last_V_1_load_A = (out_V_last_V_1_state_cmp_full.read() & ~out_V_last_V_1_sel_wr.read());
}

void write_r::thread_out_V_last_V_1_load_B() {
    out_V_last_V_1_load_B = (out_V_last_V_1_sel_wr.read() & out_V_last_V_1_state_cmp_full.read());
}

void write_r::thread_out_V_last_V_1_sel() {
    out_V_last_V_1_sel = out_V_last_V_1_sel_rd.read();
}

void write_r::thread_out_V_last_V_1_state_cmp_full() {
    out_V_last_V_1_state_cmp_full =  (sc_logic) ((!out_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void write_r::thread_out_V_last_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void write_r::thread_out_V_last_V_1_vld_out() {
    out_V_last_V_1_vld_out = out_V_last_V_1_state.read()[0];
}

void write_r::thread_out_V_user_V_1_ack_in() {
    out_V_user_V_1_ack_in = out_V_user_V_1_state.read()[1];
}

void write_r::thread_out_V_user_V_1_ack_out() {
    out_V_user_V_1_ack_out = out_r_TREADY.read();
}

void write_r::thread_out_V_user_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_user_V_1_data_in = out_data_user_V_reg_661.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read())))) {
        out_V_user_V_1_data_in = out_data_user_V_fu_357_p2.read();
    } else {
        out_V_user_V_1_data_in =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void write_r::thread_out_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_sel.read())) {
        out_V_user_V_1_data_out = out_V_user_V_1_payload_B.read();
    } else {
        out_V_user_V_1_data_out = out_V_user_V_1_payload_A.read();
    }
}

void write_r::thread_out_V_user_V_1_load_A() {
    out_V_user_V_1_load_A = (out_V_user_V_1_state_cmp_full.read() & ~out_V_user_V_1_sel_wr.read());
}

void write_r::thread_out_V_user_V_1_load_B() {
    out_V_user_V_1_load_B = (out_V_user_V_1_sel_wr.read() & out_V_user_V_1_state_cmp_full.read());
}

void write_r::thread_out_V_user_V_1_sel() {
    out_V_user_V_1_sel = out_V_user_V_1_sel_rd.read();
}

void write_r::thread_out_V_user_V_1_state_cmp_full() {
    out_V_user_V_1_state_cmp_full =  (sc_logic) ((!out_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void write_r::thread_out_V_user_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void write_r::thread_out_V_user_V_1_vld_out() {
    out_V_user_V_1_vld_out = out_V_user_V_1_state.read()[0];
}

void write_r::thread_out_data_last_V_fu_453_p2() {
    out_data_last_V_fu_453_p2 = (!tmp_14_cast_i_fu_449_p1.read().is_01() || !op2_assign_reg_682.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_14_cast_i_fu_449_p1.read() == op2_assign_reg_682.read());
}

void write_r::thread_out_data_user_V_fu_357_p2() {
    out_data_user_V_fu_357_p2 = (!ap_const_lv16_1.is_01() || !tmp_6_i_fu_347_p4.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_1) + sc_biguint<16>(tmp_6_i_fu_347_p4.read()));
}

void write_r::thread_out_r_TDATA() {
    out_r_TDATA = out_V_data_V_1_data_out.read();
}

void write_r::thread_out_r_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_i_reg_713_pp0_iter1_reg.read())))) {
        out_r_TDATA_blk_n = out_V_data_V_1_state.read()[1];
    } else {
        out_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void write_r::thread_out_r_TDEST() {
    out_r_TDEST = out_V_dest_V_1_data_out.read();
}

void write_r::thread_out_r_TID() {
    out_r_TID = out_V_id_V_1_data_out.read();
}

void write_r::thread_out_r_TLAST() {
    out_r_TLAST = out_V_last_V_1_data_out.read();
}

void write_r::thread_out_r_TUSER() {
    out_r_TUSER = out_V_user_V_1_data_out.read();
}

void write_r::thread_out_r_TVALID() {
    out_r_TVALID = out_V_last_V_1_state.read()[0];
}

void write_r::thread_p_Result_s_fu_334_p5() {
    p_Result_s_fu_334_p5 = esl_partset<512,512,96,32,32>(ap_const_lv512_lc_1, tmp_9_i_fu_324_p4.read(), ap_const_lv32_0, ap_const_lv32_5F);
}

void write_r::thread_p_temp_V_1_1_i_fu_503_p3() {
    p_temp_V_1_1_i_fu_503_p3 = (!tmp_7_i_fu_482_p2.read()[0].is_01())? sc_lv<128>(): ((tmp_7_i_fu_482_p2.read()[0].to_bool())? ap_const_lv128_lc_1: temp_V_1_1_i_fu_142.read());
}

void write_r::thread_p_temp_V_2_1_i_fu_495_p3() {
    p_temp_V_2_1_i_fu_495_p3 = (!tmp_7_i_fu_482_p2.read()[0].is_01())? sc_lv<128>(): ((tmp_7_i_fu_482_p2.read()[0].to_bool())? ap_const_lv128_lc_1: temp_V_2_1_i_fu_146.read());
}

void write_r::thread_p_temp_V_3_1_i_fu_487_p3() {
    p_temp_V_3_1_i_fu_487_p3 = (!tmp_7_i_fu_482_p2.read()[0].is_01())? sc_lv<128>(): ((tmp_7_i_fu_482_p2.read()[0].to_bool())? ap_const_lv128_lc_1: temp_V_3_1_i_fu_150.read());
}

void write_r::thread_ret_V_fu_427_p1() {
    ret_V_fu_427_p1 = t_V_1_mid2_fu_419_p3.read().range(2-1, 0);
}

void write_r::thread_sel_tmp1_fu_516_p3() {
    sel_tmp1_fu_516_p3 = (!sel_tmp_fu_511_p2.read()[0].is_01())? sc_lv<128>(): ((sel_tmp_fu_511_p2.read()[0].to_bool())? p_temp_V_3_1_i_fu_487_p3.read(): in_write_V_V_dout.read());
}

void write_r::thread_sel_tmp2_fu_524_p2() {
    sel_tmp2_fu_524_p2 = (!ret_V_reg_701.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(ret_V_reg_701.read() == ap_const_lv2_1);
}

void write_r::thread_sel_tmp3_fu_529_p3() {
    sel_tmp3_fu_529_p3 = (!sel_tmp2_fu_524_p2.read()[0].is_01())? sc_lv<128>(): ((sel_tmp2_fu_524_p2.read()[0].to_bool())? p_temp_V_3_1_i_fu_487_p3.read(): sel_tmp1_fu_516_p3.read());
}

void write_r::thread_sel_tmp4_fu_296_p3() {
    sel_tmp4_fu_296_p3 = (!icmp_fu_260_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_fu_260_p2.read()[0].to_bool())? ap_const_lv32_40: NN_c_fu_288_p3.read());
}

void write_r::thread_sel_tmp5_fu_304_p2() {
    sel_tmp5_fu_304_p2 = (icmp_fu_260_p2.read() ^ ap_const_lv1_1);
}

void write_r::thread_sel_tmp6_fu_310_p2() {
    sel_tmp6_fu_310_p2 = (tmp_2_i_fu_266_p2.read() & sel_tmp5_fu_304_p2.read());
}

void write_r::thread_sel_tmp7_fu_545_p3() {
    sel_tmp7_fu_545_p3 = (!sel_tmp_fu_511_p2.read()[0].is_01())? sc_lv<128>(): ((sel_tmp_fu_511_p2.read()[0].to_bool())? in_write_V_V_dout.read(): p_temp_V_2_1_i_fu_495_p3.read());
}

void write_r::thread_sel_tmp8_fu_569_p3() {
    sel_tmp8_fu_569_p3 = (!sel_tmp2_fu_524_p2.read()[0].is_01())? sc_lv<128>(): ((sel_tmp2_fu_524_p2.read()[0].to_bool())? in_write_V_V_dout.read(): p_temp_V_1_1_i_fu_503_p3.read());
}

void write_r::thread_sel_tmp9_fu_553_p3() {
    sel_tmp9_fu_553_p3 = (!sel_tmp2_fu_524_p2.read()[0].is_01())? sc_lv<128>(): ((sel_tmp2_fu_524_p2.read()[0].to_bool())? p_temp_V_2_1_i_fu_495_p3.read(): sel_tmp7_fu_545_p3.read());
}

void write_r::thread_sel_tmp_fu_511_p2() {
    sel_tmp_fu_511_p2 = (!ret_V_reg_701.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(ret_V_reg_701.read() == ap_const_lv2_2);
}

void write_r::thread_t_V_1_mid2_fu_419_p3() {
    t_V_1_mid2_fu_419_p3 = (!exitcond2_fu_414_p2.read()[0].is_01())? sc_lv<12>(): ((exitcond2_fu_414_p2.read()[0].to_bool())? ap_const_lv12_0: t_V_reg_205.read());
}

void write_r::thread_temp_V_0_3_i_fu_585_p3() {
    temp_V_0_3_i_fu_585_p3 = (!tmp_7_i_fu_482_p2.read()[0].is_01())? sc_lv<128>(): ((tmp_7_i_fu_482_p2.read()[0].to_bool())? in_write_V_V_dout.read(): temp_V_0_1_i_fu_138.read());
}

void write_r::thread_temp_V_1_3_i_fu_577_p3() {
    temp_V_1_3_i_fu_577_p3 = (!tmp_7_i_fu_482_p2.read()[0].is_01())? sc_lv<128>(): ((tmp_7_i_fu_482_p2.read()[0].to_bool())? ap_const_lv128_lc_1: sel_tmp8_fu_569_p3.read());
}

void write_r::thread_temp_V_2_3_i_fu_561_p3() {
    temp_V_2_3_i_fu_561_p3 = (!tmp_7_i_fu_482_p2.read()[0].is_01())? sc_lv<128>(): ((tmp_7_i_fu_482_p2.read()[0].to_bool())? ap_const_lv128_lc_1: sel_tmp9_fu_553_p3.read());
}

void write_r::thread_temp_V_3_3_i_fu_537_p3() {
    temp_V_3_3_i_fu_537_p3 = (!tmp_7_i_fu_482_p2.read()[0].is_01())? sc_lv<128>(): ((tmp_7_i_fu_482_p2.read()[0].to_bool())? ap_const_lv128_lc_1: sel_tmp3_fu_529_p3.read());
}

void write_r::thread_tmp_12_i_fu_431_p2() {
    tmp_12_i_fu_431_p2 = (!t_V_1_mid2_fu_419_p3.read().is_01() || !ap_const_lv12_0.is_01())? sc_lv<1>(): sc_lv<1>(t_V_1_mid2_fu_419_p3.read() != ap_const_lv12_0);
}

void write_r::thread_tmp_13_i_fu_437_p2() {
    tmp_13_i_fu_437_p2 = (!ret_V_fu_427_p1.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(ret_V_fu_427_p1.read() == ap_const_lv2_3);
}

void write_r::thread_tmp_14_cast_i_fu_449_p1() {
    tmp_14_cast_i_fu_449_p1 = esl_zext<29,12>(t_V_1_mid2_fu_419_p3.read());
}

void write_r::thread_tmp_1_fu_278_p4() {
    tmp_1_fu_278_p4 = tmp_3_i_fu_272_p2.read().range(31, 6);
}

void write_r::thread_tmp_2_i_fu_266_p2() {
    tmp_2_i_fu_266_p2 = (!NN_c_2_cast_i_fu_230_p4.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(NN_c_2_cast_i_fu_230_p4.read() == ap_const_lv6_0);
}

void write_r::thread_tmp_3_i_fu_272_p2() {
    tmp_3_i_fu_272_p2 = (!ap_const_lv32_40.is_01() || !NN_c_2_fu_220_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_40) + sc_biguint<32>(NN_c_2_fu_220_p4.read()));
}

void write_r::thread_tmp_4_fu_250_p4() {
    tmp_4_fu_250_p4 = in_write_n_V_V_dout.read().range(63, 38);
}

void write_r::thread_tmp_5_fu_364_p1() {
    tmp_5_fu_364_p1 = in_write_n_V_V_dout.read().range(16-1, 0);
}

void write_r::thread_tmp_6_i_fu_347_p4() {
    tmp_6_i_fu_347_p4 = val_assign_fu_316_p3.read().range(21, 6);
}

void write_r::thread_tmp_7_i_fu_482_p2() {
    tmp_7_i_fu_482_p2 = (!ret_V_reg_701.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(ret_V_reg_701.read() == ap_const_lv2_0);
}

void write_r::thread_tmp_9_i_fu_324_p4() {
    tmp_9_i_fu_324_p4 = esl_concat<64,32>(esl_concat<32,32>(unquant_N_fu_240_p4.read(), val_assign_fu_316_p3.read()), N_r_fu_216_p1.read());
}

void write_r::thread_tmp_cast_i_fu_388_p1() {
    tmp_cast_i_fu_388_p1 = esl_zext<29,28>(tmp_2_reg_671.read());
}

void write_r::thread_tmp_data_V_1_fu_613_p5() {
    tmp_data_V_1_fu_613_p5 = esl_concat<384,128>(esl_concat<256,128>(esl_concat<128,128>(temp_V_3_3_i_fu_537_p3.read(), temp_V_2_3_i_fu_561_p3.read()), temp_V_1_3_i_fu_577_p3.read()), temp_V_0_3_i_fu_585_p3.read());
}

void write_r::thread_unquant_N_fu_240_p4() {
    unquant_N_fu_240_p4 = in_write_n_V_V_dout.read().range(95, 64);
}

void write_r::thread_val_assign_fu_316_p3() {
    val_assign_fu_316_p3 = (!sel_tmp6_fu_310_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp6_fu_310_p2.read()[0].to_bool())? NN_c_2_fu_220_p4.read(): sel_tmp4_fu_296_p3.read());
}

void write_r::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_n_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_write_iter_c_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_403_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_403_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

