-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_r is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TID : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_write_n_V_V_dout : IN STD_LOGIC_VECTOR (95 downto 0);
    in_write_n_V_V_empty_n : IN STD_LOGIC;
    in_write_n_V_V_read : OUT STD_LOGIC;
    in_write_iter_c_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_write_iter_c_V_V_empty_n : IN STD_LOGIC;
    in_write_iter_c_V_V_read : OUT STD_LOGIC;
    in_write_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    in_write_V_V_empty_n : IN STD_LOGIC;
    in_write_V_V_read : OUT STD_LOGIC );
end;


architecture behav of write_r is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_V_data_V_1_data_in : STD_LOGIC_VECTOR (511 downto 0);
    signal out_V_data_V_1_data_out : STD_LOGIC_VECTOR (511 downto 0);
    signal out_V_data_V_1_vld_in : STD_LOGIC;
    signal out_V_data_V_1_vld_out : STD_LOGIC;
    signal out_V_data_V_1_ack_in : STD_LOGIC;
    signal out_V_data_V_1_ack_out : STD_LOGIC;
    signal out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (511 downto 0);
    signal out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (511 downto 0);
    signal out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_data_V_1_sel : STD_LOGIC;
    signal out_V_data_V_1_load_A : STD_LOGIC;
    signal out_V_data_V_1_load_B : STD_LOGIC;
    signal out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_id_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_id_V_1_vld_in : STD_LOGIC;
    signal out_V_id_V_1_vld_out : STD_LOGIC;
    signal out_V_id_V_1_ack_in : STD_LOGIC;
    signal out_V_id_V_1_ack_out : STD_LOGIC;
    signal out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_id_V_1_sel : STD_LOGIC;
    signal out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_dest_V_1_vld_in : STD_LOGIC;
    signal out_V_dest_V_1_vld_out : STD_LOGIC;
    signal out_V_dest_V_1_ack_in : STD_LOGIC;
    signal out_V_dest_V_1_ack_out : STD_LOGIC;
    signal out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_dest_V_1_sel : STD_LOGIC;
    signal out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_user_V_1_data_in : STD_LOGIC_VECTOR (15 downto 0);
    signal out_V_user_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal out_V_user_V_1_vld_in : STD_LOGIC;
    signal out_V_user_V_1_vld_out : STD_LOGIC;
    signal out_V_user_V_1_ack_in : STD_LOGIC;
    signal out_V_user_V_1_ack_out : STD_LOGIC;
    signal out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_user_V_1_sel : STD_LOGIC;
    signal out_V_user_V_1_load_A : STD_LOGIC;
    signal out_V_user_V_1_load_B : STD_LOGIC;
    signal out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_vld_in : STD_LOGIC;
    signal out_V_last_V_1_vld_out : STD_LOGIC;
    signal out_V_last_V_1_ack_in : STD_LOGIC;
    signal out_V_last_V_1_ack_out : STD_LOGIC;
    signal out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_last_V_1_sel : STD_LOGIC;
    signal out_V_last_V_1_load_A : STD_LOGIC;
    signal out_V_last_V_1_load_B : STD_LOGIC;
    signal out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_cond1_i_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal or_cond1_i_reg_713_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_write_n_V_V_blk_n : STD_LOGIC;
    signal in_write_iter_c_V_V_blk_n : STD_LOGIC;
    signal in_write_V_V_blk_n : STD_LOGIC;
    signal exitcond_flatten_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_194 : STD_LOGIC_VECTOR (27 downto 0);
    signal t_V_reg_205 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_fu_334_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal out_data_user_V_fu_357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_user_V_reg_661 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_666 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_671 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_reg_676 : STD_LOGIC_VECTOR (11 downto 0);
    signal op2_assign_fu_391_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal op2_assign_reg_682 : STD_LOGIC_VECTOR (28 downto 0);
    signal bound_fu_626_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_reg_687 : STD_LOGIC_VECTOR (27 downto 0);
    signal exitcond_flatten_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_408_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ret_V_fu_427_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_V_reg_701 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_data_last_V_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_last_V_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_464_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_data_V_1_fu_613_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal temp_V_0_1_i_fu_138 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_V_0_3_i_fu_585_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_V_1_1_i_fu_142 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_V_1_3_i_fu_577_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_V_2_1_i_fu_146 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_V_2_3_i_fu_561_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_V_3_1_i_fu_150 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_V_3_3_i_fu_537_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_4_fu_250_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal NN_c_2_cast_i_fu_230_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal NN_c_2_fu_220_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_278_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NN_c_fu_288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal unquant_N_fu_240_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal N_r_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_fu_324_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_6_i_fu_347_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_i_fu_388_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal exitcond2_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_1_mid2_fu_419_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_i_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_i_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_cast_i_fu_449_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal or_cond_i_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_temp_V_3_1_i_fu_487_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal sel_tmp2_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_516_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal sel_tmp3_fu_529_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_temp_V_2_1_i_fu_495_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal sel_tmp7_fu_545_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal sel_tmp9_fu_553_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_temp_V_1_1_i_fu_503_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal sel_tmp8_fu_569_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_fu_626_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal bound_fu_626_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_626_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_fu_626_p10 : STD_LOGIC_VECTOR (27 downto 0);

    component softmax_mul_mul_1dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    softmax_mul_mul_1dEe_U71 : component softmax_mul_mul_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => bound_fu_626_p0,
        din1 => bound_fu_626_p1,
        dout => bound_fu_626_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_dest_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_data_V_1_ack_out = ap_const_logic_1) and (out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_data_V_1_sel_rd <= not(out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_data_V_1_ack_in = ap_const_logic_1) and (out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_data_V_1_sel_wr <= not(out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_data_V_1_state = ap_const_lv2_2) and (out_V_data_V_1_vld_in = ap_const_logic_0)) or ((out_V_data_V_1_state = ap_const_lv2_3) and (out_V_data_V_1_vld_in = ap_const_logic_0) and (out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_data_V_1_state = ap_const_lv2_1) and (out_V_data_V_1_ack_out = ap_const_logic_0)) or ((out_V_data_V_1_state = ap_const_lv2_3) and (out_V_data_V_1_ack_out = ap_const_logic_0) and (out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_data_V_1_vld_in = ap_const_logic_0) and (out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((out_V_data_V_1_ack_out = ap_const_logic_0) and (out_V_data_V_1_vld_in = ap_const_logic_1))) and (out_V_data_V_1_state = ap_const_lv2_3)) or ((out_V_data_V_1_state = ap_const_lv2_1) and (out_V_data_V_1_ack_out = ap_const_logic_1)) or ((out_V_data_V_1_state = ap_const_lv2_2) and (out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_dest_V_1_ack_out = ap_const_logic_1) and (out_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_dest_V_1_sel_rd <= not(out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_dest_V_1_state = ap_const_lv2_2) and (out_V_dest_V_1_vld_in = ap_const_logic_0)) or ((out_V_dest_V_1_state = ap_const_lv2_3) and (out_V_dest_V_1_vld_in = ap_const_logic_0) and (out_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_dest_V_1_state = ap_const_lv2_1) and (out_V_dest_V_1_ack_out = ap_const_logic_0)) or ((out_V_dest_V_1_state = ap_const_lv2_3) and (out_V_dest_V_1_ack_out = ap_const_logic_0) and (out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_dest_V_1_vld_in = ap_const_logic_0) and (out_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_V_dest_V_1_ack_out = ap_const_logic_0) and (out_V_dest_V_1_vld_in = ap_const_logic_1))) and (out_V_dest_V_1_state = ap_const_lv2_3)) or ((out_V_dest_V_1_state = ap_const_lv2_1) and (out_V_dest_V_1_ack_out = ap_const_logic_1)) or ((out_V_dest_V_1_state = ap_const_lv2_2) and (out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_id_V_1_vld_out = ap_const_logic_1) and (out_V_id_V_1_ack_out = ap_const_logic_1))) then 
                                        out_V_id_V_1_sel_rd <= not(out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_id_V_1_state = ap_const_lv2_2) and (out_V_id_V_1_vld_in = ap_const_logic_0)) or ((out_V_id_V_1_state = ap_const_lv2_3) and (out_V_id_V_1_vld_in = ap_const_logic_0) and (out_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_id_V_1_state = ap_const_lv2_1) and (out_V_id_V_1_ack_out = ap_const_logic_0)) or ((out_V_id_V_1_state = ap_const_lv2_3) and (out_V_id_V_1_ack_out = ap_const_logic_0) and (out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_id_V_1_vld_in = ap_const_logic_0) and (out_V_id_V_1_ack_out = ap_const_logic_1))) and not(((out_V_id_V_1_ack_out = ap_const_logic_0) and (out_V_id_V_1_vld_in = ap_const_logic_1))) and (out_V_id_V_1_state = ap_const_lv2_3)) or ((out_V_id_V_1_state = ap_const_lv2_1) and (out_V_id_V_1_ack_out = ap_const_logic_1)) or ((out_V_id_V_1_state = ap_const_lv2_2) and (out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_last_V_1_ack_out = ap_const_logic_1) and (out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_last_V_1_sel_rd <= not(out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_last_V_1_ack_in = ap_const_logic_1) and (out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_last_V_1_sel_wr <= not(out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_last_V_1_state = ap_const_lv2_2) and (out_V_last_V_1_vld_in = ap_const_logic_0)) or ((out_V_last_V_1_state = ap_const_lv2_3) and (out_V_last_V_1_vld_in = ap_const_logic_0) and (out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_last_V_1_state = ap_const_lv2_1) and (out_V_last_V_1_ack_out = ap_const_logic_0)) or ((out_V_last_V_1_state = ap_const_lv2_3) and (out_V_last_V_1_ack_out = ap_const_logic_0) and (out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_last_V_1_vld_in = ap_const_logic_0) and (out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((out_V_last_V_1_ack_out = ap_const_logic_0) and (out_V_last_V_1_vld_in = ap_const_logic_1))) and (out_V_last_V_1_state = ap_const_lv2_3)) or ((out_V_last_V_1_state = ap_const_lv2_1) and (out_V_last_V_1_ack_out = ap_const_logic_1)) or ((out_V_last_V_1_state = ap_const_lv2_2) and (out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_user_V_1_ack_out = ap_const_logic_1) and (out_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_user_V_1_sel_rd <= not(out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_user_V_1_ack_in = ap_const_logic_1) and (out_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_user_V_1_sel_wr <= not(out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_user_V_1_state = ap_const_lv2_2) and (out_V_user_V_1_vld_in = ap_const_logic_0)) or ((out_V_user_V_1_state = ap_const_lv2_3) and (out_V_user_V_1_vld_in = ap_const_logic_0) and (out_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_user_V_1_state = ap_const_lv2_1) and (out_V_user_V_1_ack_out = ap_const_logic_0)) or ((out_V_user_V_1_state = ap_const_lv2_3) and (out_V_user_V_1_ack_out = ap_const_logic_0) and (out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_user_V_1_vld_in = ap_const_logic_0) and (out_V_user_V_1_ack_out = ap_const_logic_1))) and not(((out_V_user_V_1_ack_out = ap_const_logic_0) and (out_V_user_V_1_vld_in = ap_const_logic_1))) and (out_V_user_V_1_state = ap_const_lv2_3)) or ((out_V_user_V_1_state = ap_const_lv2_1) and (out_V_user_V_1_ack_out = ap_const_logic_1)) or ((out_V_user_V_1_state = ap_const_lv2_2) and (out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_403_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_194 <= indvar_flatten_next_fu_408_p2;
            elsif (((out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_194 <= ap_const_lv28_0;
            end if; 
        end if;
    end process;

    t_V_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_403_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_reg_205 <= i_V_fu_464_p2;
            elsif (((out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_reg_205 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bound_reg_687 <= bound_fu_626_p2;
                op2_assign_reg_682 <= op2_assign_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_692 <= exitcond_flatten_fu_403_p2;
                or_cond1_i_reg_713_pp0_iter1_reg <= or_cond1_i_reg_713;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_403_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_cond1_i_reg_713 <= or_cond1_i_fu_458_p2;
                out_data_last_V_reg_708 <= out_data_last_V_fu_453_p2;
                ret_V_reg_701 <= ret_V_fu_427_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_data_V_1_load_A = ap_const_logic_1)) then
                out_V_data_V_1_payload_A <= out_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_data_V_1_load_B = ap_const_logic_1)) then
                out_V_data_V_1_payload_B <= out_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_last_V_1_load_A = ap_const_logic_1)) then
                out_V_last_V_1_payload_A <= out_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_last_V_1_load_B = ap_const_logic_1)) then
                out_V_last_V_1_payload_B <= out_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_user_V_1_load_A = ap_const_logic_1)) then
                out_V_user_V_1_payload_A <= out_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_user_V_1_load_B = ap_const_logic_1)) then
                out_V_user_V_1_payload_B <= out_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                out_data_user_V_reg_661 <= out_data_user_V_fu_357_p2;
                tmp_2_reg_671 <= in_write_n_V_V_dout(63 downto 36);
                tmp_5_reg_666 <= tmp_5_fu_364_p1;
                tmp_reg_676 <= in_write_n_V_V_dout(47 downto 36);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_692 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                temp_V_0_1_i_fu_138 <= temp_V_0_3_i_fu_585_p3;
                temp_V_1_1_i_fu_142 <= temp_V_1_3_i_fu_577_p3;
                temp_V_2_1_i_fu_146 <= temp_V_2_3_i_fu_561_p3;
                temp_V_3_1_i_fu_150 <= temp_V_3_3_i_fu_537_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_data_V_1_ack_in, out_V_id_V_1_ack_in, out_V_dest_V_1_ack_in, out_V_user_V_1_ack_in, out_V_last_V_1_ack_in, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond_flatten_fu_403_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_403_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond_flatten_fu_403_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_dest_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    NN_c_2_cast_i_fu_230_p4 <= in_write_n_V_V_dout(37 downto 32);
    NN_c_2_fu_220_p4 <= in_write_n_V_V_dout(63 downto 32);
    NN_c_fu_288_p3 <= (tmp_1_fu_278_p4 & ap_const_lv6_0);
    N_r_fu_216_p1 <= in_write_n_V_V_dout(32 - 1 downto 0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_write_V_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_692)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_flatten_reg_692 = ap_const_lv1_0) and (in_write_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_write_V_V_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_692, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((exitcond_flatten_reg_692 = ap_const_lv1_0) and (in_write_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_write_V_V_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_692, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((exitcond_flatten_reg_692 = ap_const_lv1_0) and (in_write_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(out_V_data_V_1_ack_in, or_cond1_i_reg_713)
    begin
                ap_block_state4_io <= ((or_cond1_i_reg_713 = ap_const_lv1_1) and (out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(in_write_V_V_empty_n, exitcond_flatten_reg_692)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((exitcond_flatten_reg_692 = ap_const_lv1_0) and (in_write_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(out_V_data_V_1_ack_in, or_cond1_i_reg_713_pp0_iter1_reg)
    begin
                ap_block_state5_io <= ((or_cond1_i_reg_713_pp0_iter1_reg = ap_const_lv1_1) and (out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_assign_proc : process(out_V_data_V_1_ack_in, out_V_id_V_1_ack_in, out_V_dest_V_1_ack_in, out_V_user_V_1_ack_in, out_V_last_V_1_ack_in)
    begin
                ap_block_state6 <= ((out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_dest_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_flatten_fu_403_p2)
    begin
        if ((exitcond_flatten_fu_403_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_V_data_V_1_ack_in, out_V_id_V_1_ack_in, out_V_dest_V_1_ack_in, out_V_user_V_1_ack_in, out_V_last_V_1_ack_in, ap_CS_fsm_state6)
    begin
        if ((not(((out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_dest_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_V_data_V_1_ack_in, out_V_id_V_1_ack_in, out_V_dest_V_1_ack_in, out_V_user_V_1_ack_in, out_V_last_V_1_ack_in, ap_CS_fsm_state6)
    begin
        if ((not(((out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_dest_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_626_p0 <= bound_fu_626_p00(12 - 1 downto 0);
    bound_fu_626_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_676),28));
    bound_fu_626_p1 <= bound_fu_626_p10(16 - 1 downto 0);
    bound_fu_626_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_666),28));
    exitcond2_fu_414_p2 <= "1" when (t_V_reg_205 = tmp_reg_676) else "0";
    exitcond_flatten_fu_403_p2 <= "1" when (indvar_flatten_reg_194 = bound_reg_687) else "0";
    i_V_fu_464_p2 <= std_logic_vector(unsigned(t_V_1_mid2_fu_419_p3) + unsigned(ap_const_lv12_1));
    icmp_fu_260_p2 <= "1" when (tmp_4_fu_250_p4 = ap_const_lv26_0) else "0";

    in_write_V_V_blk_n_assign_proc : process(in_write_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_692)
    begin
        if (((exitcond_flatten_reg_692 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_write_V_V_blk_n <= in_write_V_V_empty_n;
        else 
            in_write_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_write_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_692, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_692 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_write_V_V_read <= ap_const_logic_1;
        else 
            in_write_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_write_iter_c_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_write_iter_c_V_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_write_iter_c_V_V_blk_n <= in_write_iter_c_V_V_empty_n;
        else 
            in_write_iter_c_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_write_iter_c_V_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_1_ack_in, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_write_iter_c_V_V_read <= ap_const_logic_1;
        else 
            in_write_iter_c_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_write_n_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_write_n_V_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_write_n_V_V_blk_n <= in_write_n_V_V_empty_n;
        else 
            in_write_n_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_write_n_V_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_1_ack_in, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_write_n_V_V_read <= ap_const_logic_1;
        else 
            in_write_n_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_408_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_194) + unsigned(ap_const_lv28_1));
    op2_assign_fu_391_p2 <= std_logic_vector(signed(ap_const_lv29_1FFFFFFF) + signed(tmp_cast_i_fu_388_p1));
    or_cond1_i_fu_458_p2 <= (out_data_last_V_fu_453_p2 or or_cond_i_fu_443_p2);
    or_cond_i_fu_443_p2 <= (tmp_13_i_fu_437_p2 and tmp_12_i_fu_431_p2);
    out_V_data_V_1_ack_in <= out_V_data_V_1_state(1);
    out_V_data_V_1_ack_out <= out_r_TREADY;

    out_V_data_V_1_data_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond1_i_reg_713, p_Result_s_fu_334_p5, tmp_data_V_1_fu_613_p5, ap_block_pp0_stage0_01001)
    begin
        if (((or_cond1_i_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_V_data_V_1_data_in <= tmp_data_V_1_fu_613_p5;
        elsif ((not(((ap_start = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_data_V_1_data_in <= p_Result_s_fu_334_p5;
        else 
            out_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_data_V_1_data_out_assign_proc : process(out_V_data_V_1_payload_A, out_V_data_V_1_payload_B, out_V_data_V_1_sel)
    begin
        if ((out_V_data_V_1_sel = ap_const_logic_1)) then 
            out_V_data_V_1_data_out <= out_V_data_V_1_payload_B;
        else 
            out_V_data_V_1_data_out <= out_V_data_V_1_payload_A;
        end if; 
    end process;

    out_V_data_V_1_load_A <= (out_V_data_V_1_state_cmp_full and not(out_V_data_V_1_sel_wr));
    out_V_data_V_1_load_B <= (out_V_data_V_1_state_cmp_full and out_V_data_V_1_sel_wr);
    out_V_data_V_1_sel <= out_V_data_V_1_sel_rd;
    out_V_data_V_1_state_cmp_full <= '0' when (out_V_data_V_1_state = ap_const_lv2_1) else '1';

    out_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_1_ack_in, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond1_i_reg_713, ap_block_pp0_stage0_11001)
    begin
        if ((((or_cond1_i_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_data_V_1_vld_out <= out_V_data_V_1_state(0);
    out_V_dest_V_1_ack_in <= out_V_dest_V_1_state(1);
    out_V_dest_V_1_ack_out <= out_r_TREADY;
    out_V_dest_V_1_data_out <= ap_const_lv8_FF;
    out_V_dest_V_1_sel <= out_V_dest_V_1_sel_rd;

    out_V_dest_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_1_ack_in, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond1_i_reg_713, ap_block_pp0_stage0_11001)
    begin
        if ((((or_cond1_i_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_dest_V_1_vld_out <= out_V_dest_V_1_state(0);
    out_V_id_V_1_ack_in <= out_V_id_V_1_state(1);
    out_V_id_V_1_ack_out <= out_r_TREADY;
    out_V_id_V_1_data_out <= ap_const_lv8_0;
    out_V_id_V_1_sel <= out_V_id_V_1_sel_rd;

    out_V_id_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_1_ack_in, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond1_i_reg_713, ap_block_pp0_stage0_11001)
    begin
        if ((((or_cond1_i_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_id_V_1_vld_out <= out_V_id_V_1_state(0);
    out_V_last_V_1_ack_in <= out_V_last_V_1_state(1);
    out_V_last_V_1_ack_out <= out_r_TREADY;

    out_V_last_V_1_data_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond1_i_reg_713, out_data_last_V_reg_708, ap_block_pp0_stage0_01001)
    begin
        if (((or_cond1_i_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_V_last_V_1_data_in <= out_data_last_V_reg_708;
        elsif ((not(((ap_start = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_last_V_1_data_in <= ap_const_lv1_0;
        else 
            out_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    out_V_last_V_1_data_out_assign_proc : process(out_V_last_V_1_payload_A, out_V_last_V_1_payload_B, out_V_last_V_1_sel)
    begin
        if ((out_V_last_V_1_sel = ap_const_logic_1)) then 
            out_V_last_V_1_data_out <= out_V_last_V_1_payload_B;
        else 
            out_V_last_V_1_data_out <= out_V_last_V_1_payload_A;
        end if; 
    end process;

    out_V_last_V_1_load_A <= (out_V_last_V_1_state_cmp_full and not(out_V_last_V_1_sel_wr));
    out_V_last_V_1_load_B <= (out_V_last_V_1_state_cmp_full and out_V_last_V_1_sel_wr);
    out_V_last_V_1_sel <= out_V_last_V_1_sel_rd;
    out_V_last_V_1_state_cmp_full <= '0' when (out_V_last_V_1_state = ap_const_lv2_1) else '1';

    out_V_last_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_1_ack_in, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond1_i_reg_713, ap_block_pp0_stage0_11001)
    begin
        if ((((or_cond1_i_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_last_V_1_vld_out <= out_V_last_V_1_state(0);
    out_V_user_V_1_ack_in <= out_V_user_V_1_state(1);
    out_V_user_V_1_ack_out <= out_r_TREADY;

    out_V_user_V_1_data_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond1_i_reg_713, out_data_user_V_fu_357_p2, out_data_user_V_reg_661, ap_block_pp0_stage0_01001)
    begin
        if (((or_cond1_i_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_V_user_V_1_data_in <= out_data_user_V_reg_661;
        elsif ((not(((ap_start = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_user_V_1_data_in <= out_data_user_V_fu_357_p2;
        else 
            out_V_user_V_1_data_in <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_user_V_1_data_out_assign_proc : process(out_V_user_V_1_payload_A, out_V_user_V_1_payload_B, out_V_user_V_1_sel)
    begin
        if ((out_V_user_V_1_sel = ap_const_logic_1)) then 
            out_V_user_V_1_data_out <= out_V_user_V_1_payload_B;
        else 
            out_V_user_V_1_data_out <= out_V_user_V_1_payload_A;
        end if; 
    end process;

    out_V_user_V_1_load_A <= (out_V_user_V_1_state_cmp_full and not(out_V_user_V_1_sel_wr));
    out_V_user_V_1_load_B <= (out_V_user_V_1_state_cmp_full and out_V_user_V_1_sel_wr);
    out_V_user_V_1_sel <= out_V_user_V_1_sel_rd;
    out_V_user_V_1_state_cmp_full <= '0' when (out_V_user_V_1_state = ap_const_lv2_1) else '1';

    out_V_user_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_1_ack_in, in_write_n_V_V_empty_n, in_write_iter_c_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond1_i_reg_713, ap_block_pp0_stage0_11001)
    begin
        if ((((or_cond1_i_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0) or (in_write_iter_c_V_V_empty_n = ap_const_logic_0) or (in_write_n_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_user_V_1_vld_out <= out_V_user_V_1_state(0);
    out_data_last_V_fu_453_p2 <= "1" when (tmp_14_cast_i_fu_449_p1 = op2_assign_reg_682) else "0";
    out_data_user_V_fu_357_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_6_i_fu_347_p4));
    out_r_TDATA <= out_V_data_V_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_1_state, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, or_cond1_i_reg_713, ap_enable_reg_pp0_iter2, or_cond1_i_reg_713_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((or_cond1_i_reg_713_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((or_cond1_i_reg_713 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_r_TDATA_blk_n <= out_V_data_V_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDEST <= out_V_dest_V_1_data_out;
    out_r_TID <= out_V_id_V_1_data_out;
    out_r_TLAST <= out_V_last_V_1_data_out;
    out_r_TUSER <= out_V_user_V_1_data_out;
    out_r_TVALID <= out_V_last_V_1_state(0);
    p_Result_s_fu_334_p5 <= (ap_const_lv512_lc_1(511 downto 96) & tmp_9_i_fu_324_p4);
    p_temp_V_1_1_i_fu_503_p3 <= 
        ap_const_lv128_lc_1 when (tmp_7_i_fu_482_p2(0) = '1') else 
        temp_V_1_1_i_fu_142;
    p_temp_V_2_1_i_fu_495_p3 <= 
        ap_const_lv128_lc_1 when (tmp_7_i_fu_482_p2(0) = '1') else 
        temp_V_2_1_i_fu_146;
    p_temp_V_3_1_i_fu_487_p3 <= 
        ap_const_lv128_lc_1 when (tmp_7_i_fu_482_p2(0) = '1') else 
        temp_V_3_1_i_fu_150;
    ret_V_fu_427_p1 <= t_V_1_mid2_fu_419_p3(2 - 1 downto 0);
    sel_tmp1_fu_516_p3 <= 
        p_temp_V_3_1_i_fu_487_p3 when (sel_tmp_fu_511_p2(0) = '1') else 
        in_write_V_V_dout;
    sel_tmp2_fu_524_p2 <= "1" when (ret_V_reg_701 = ap_const_lv2_1) else "0";
    sel_tmp3_fu_529_p3 <= 
        p_temp_V_3_1_i_fu_487_p3 when (sel_tmp2_fu_524_p2(0) = '1') else 
        sel_tmp1_fu_516_p3;
    sel_tmp4_fu_296_p3 <= 
        ap_const_lv32_40 when (icmp_fu_260_p2(0) = '1') else 
        NN_c_fu_288_p3;
    sel_tmp5_fu_304_p2 <= (icmp_fu_260_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_310_p2 <= (tmp_2_i_fu_266_p2 and sel_tmp5_fu_304_p2);
    sel_tmp7_fu_545_p3 <= 
        in_write_V_V_dout when (sel_tmp_fu_511_p2(0) = '1') else 
        p_temp_V_2_1_i_fu_495_p3;
    sel_tmp8_fu_569_p3 <= 
        in_write_V_V_dout when (sel_tmp2_fu_524_p2(0) = '1') else 
        p_temp_V_1_1_i_fu_503_p3;
    sel_tmp9_fu_553_p3 <= 
        p_temp_V_2_1_i_fu_495_p3 when (sel_tmp2_fu_524_p2(0) = '1') else 
        sel_tmp7_fu_545_p3;
    sel_tmp_fu_511_p2 <= "1" when (ret_V_reg_701 = ap_const_lv2_2) else "0";
    t_V_1_mid2_fu_419_p3 <= 
        ap_const_lv12_0 when (exitcond2_fu_414_p2(0) = '1') else 
        t_V_reg_205;
    temp_V_0_3_i_fu_585_p3 <= 
        in_write_V_V_dout when (tmp_7_i_fu_482_p2(0) = '1') else 
        temp_V_0_1_i_fu_138;
    temp_V_1_3_i_fu_577_p3 <= 
        ap_const_lv128_lc_1 when (tmp_7_i_fu_482_p2(0) = '1') else 
        sel_tmp8_fu_569_p3;
    temp_V_2_3_i_fu_561_p3 <= 
        ap_const_lv128_lc_1 when (tmp_7_i_fu_482_p2(0) = '1') else 
        sel_tmp9_fu_553_p3;
    temp_V_3_3_i_fu_537_p3 <= 
        ap_const_lv128_lc_1 when (tmp_7_i_fu_482_p2(0) = '1') else 
        sel_tmp3_fu_529_p3;
    tmp_12_i_fu_431_p2 <= "0" when (t_V_1_mid2_fu_419_p3 = ap_const_lv12_0) else "1";
    tmp_13_i_fu_437_p2 <= "1" when (ret_V_fu_427_p1 = ap_const_lv2_3) else "0";
    tmp_14_cast_i_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_mid2_fu_419_p3),29));
    tmp_1_fu_278_p4 <= tmp_3_i_fu_272_p2(31 downto 6);
    tmp_2_i_fu_266_p2 <= "1" when (NN_c_2_cast_i_fu_230_p4 = ap_const_lv6_0) else "0";
    tmp_3_i_fu_272_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) + unsigned(NN_c_2_fu_220_p4));
    tmp_4_fu_250_p4 <= in_write_n_V_V_dout(63 downto 38);
    tmp_5_fu_364_p1 <= in_write_n_V_V_dout(16 - 1 downto 0);
    tmp_6_i_fu_347_p4 <= val_assign_fu_316_p3(21 downto 6);
    tmp_7_i_fu_482_p2 <= "1" when (ret_V_reg_701 = ap_const_lv2_0) else "0";
    tmp_9_i_fu_324_p4 <= ((unquant_N_fu_240_p4 & val_assign_fu_316_p3) & N_r_fu_216_p1);
    tmp_cast_i_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_671),29));
    tmp_data_V_1_fu_613_p5 <= (((temp_V_3_3_i_fu_537_p3 & temp_V_2_3_i_fu_561_p3) & temp_V_1_3_i_fu_577_p3) & temp_V_0_3_i_fu_585_p3);
    unquant_N_fu_240_p4 <= in_write_n_V_V_dout(95 downto 64);
    val_assign_fu_316_p3 <= 
        NN_c_2_fu_220_p4 when (sel_tmp6_fu_310_p2(0) = '1') else 
        sel_tmp4_fu_296_p3;
end behav;
