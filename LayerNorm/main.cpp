
#include <iostream>
#include <fstream>
#include "top.hpp"
#include "common.hpp"
//#include "table_values.hpp"
using namespace std;


int main() {

	//========================test bench ======================================
	ap_int<32> input[768] = { 3941, -1200, -345, -507, -1879, -1716, -1201, -2226, -3593, -168, -508, 160, -858, -164, 1019, -517, 3, -1881, 1034, 341, -836, 168, -2576, 692, -1030, -1041, 1198, 177, -1203, -2400, -3598, -1025, -520, 1032, -1193, -1, -357, 513, 4626, 0, 184, -505, -676, -1389, 1040, -1715, -861, -1205, 1541, -516, -181, 2405, 512, -2736, -511, 8, -2747, -527, -1191, -1712, 1195, -11129, 845, -690, -164, -517, 1021, -342, -1377, -865, -2041, -2576, 685, -2236, 513, -2562, -1206, 32767, 691, 1026, 338, -3086, 1680, -349, 343, -1719, -178, -346, -150, 521, -2059, -2924, 521, -353, 513, 2216, -849, -2582, -16, -339, -505, -691, -1696, 499, -8, -515, -173, -9, 2394, 525, 11295, 678, -677, 1034, -1543, -341, -1886, -329, -2049, 1716, -703, 162, -1020, -155, 509, -510, 845, -1370, -1203, 680, -863, 344, -2230, -349, 352, 865, -684, -1721, 687, 3602, -528, 518, 173, -3428, -326, 12838, -1698, 1726, -688, -674, -692, -335, -179, 347, 343, 847, 345, 513, -678, 338, -1197, -171, 330, -335, 2924, 516, -1197, -355, -508, 348, -1544, -1538, -1386, -524, -670, -2063, -9, -173, 851, -2067, -1367, -1024, 2, 1022, -1195, -1377, -2233, -341, -1198, -5991, 870, -328, 170, -1011, 176, -169, -1519, 1872, -1376, -1356, -2402, -4627, -1031, -1520, -685, -2736, -351, -4969, -1879, -507, -4963, -2392, -345, 515, -697, -1708, -2210, 32767, 344, 14892, 3077, -678, -333, 183, 351, 157, -1368, 177, -181, 1020, -858, -1366, -344, -1199, -517, 677, -1723, 7, -2223, 16, -858, 167, -682, -502, -1023, 1020, 15, -157, -859, 345, -527, -353, -1720, -331, 183, -693, -1878, -346, -154, -1185, -1382, -1877, -176, 1198, -175, -2045, -2579, 342, 848, -6842, -350, -2747, 368, 345, -2405, -1376, -850, -1365, -1188, -854, 330, -683, -1715, 1026, 1536, 339, 1211, -171, -514, 869, 867, 1038, -1191, -177, -515, -845, -1204, -854, -1368, 352, -694, 681, -1903, -524, 364, -1886, -523, 2913, -1030, -497, -524, -13, -3261, 4, -1711, 1017, -519, -1039, -3075, -2903, -1030, 1859, -1194, -1008, 0, -857, -1716, -1197, 164, -527, 6181, -2054, -2752, 511, -2569, -2742, -171, 499, -516, -1375, -862, 1380, -1365, 527, 345, -865, -875, 512, 180, -1882, 853, -348, 496, -1201, -522, -2383, -2410, -852, 855, -1014, -3416, -3431, 3254, -1032, -680, -170, -1197, 511, -2049, -858, 1721, -683, 1191, -513, -172, -1701, 170, -863, -675, 4, -179, -344, -4, -2226, -8, -1211, 331, -520, 516, -692, -179, -509, -2564, -1540, 6507, 167, 338, 3459, -2571, -175, -337, -1871, 340, 846, -1195, -339, 341, -692, 170, -2224, -1191, -347, -1889, -166, -1029, -506, -172, -1374, -1027, 865, -164, 16950, -2396, -1714, -856, -347, -500, 6, -1194, -2748, -512, 519, -853, 1032, 1872, -1382, -5, -335, -3081, -1542, 338, -1019, 1201, -689, -1366, 505, -1368, -3432, -870, 7, -2731, 674, -1882, -32768, -333, -8049, -159, -1708, -693, -682, -857, -678, -2239, -1372, -1042, 1887, 1198, -502, 3, -165, -678, -842, -3426, -2740, 5, 341, -155, -693, 15063, -502, -1217, 164, 339, -867, -688, -1368, -1544, 160, -1028, -680, 0, -1020, 179, -507, 3089, -3427, 32767, -1710, -3937, -340, -1212, 850, -671, -341, -1357, 337, 1025, -694, -353, -4461, -1011, -4, -3, -347, -3761, 334, -681, -858, -839, -3070, -855, 346, -2217, -2739, -505, -188, -342, -1199, -868, -1185, 6, -1720, -853, -179, -1199, -5138, -673, -3091, 169, 2568, -1368, -1877, -507, -2219, -1547, -1717, -508, 8, 189, -680, -853, -32768, -1728, 166, -683, -3085, -1036, -2055, -1029, -2212, 334, -8761, -1711, -847, -1028, -1044, -340, -333, 688, -1, -10748, -3, -509, 11, -165, -339, -349, -683, -336, -693, -1193, 1710, -680, -341, -1046, -1026, -1026, -21064, 32767, 163, -351, 172, -1379, -516, -168, 861, 2058, -164, -2053, 842, -2063, -179, 1194, -2561, -1038, -3, -2229, 847, -1040, 2225, -848, 338, 844, -1191, -1200, -867, 2920, -515, -1026, 7, -165, -1714, -343, -348, 2576, -847, 344, -182, 674, 1528, -526, 3412, 1729, -1889, -1196, 176, -1042, -1371, -1029, -174, -515, -509, 2079, -1896, -844, -17, 16441, -182, 159, -1023, -1879, -505, -1707, -1053, -2575, -1371, -2748, -1368, -1709, 350, -1020, 1721, -1878, 688, 4112, 1214, -854, -681, -1195, 1018, -1, -677, -338, -1201, -1211, -520, -2910, -851, -1039, -1551, -3755, -1542, -680, -2409, -865, -694, -860, 1709, -177, -1038, 3427, -1040, 507, -530, -2065, -1713, -675, -4, 11, -512, 173, -165, -848, -1032, -1186, 348, -1707, -5, -168, -334, -679, -1201, 513, -1207, -1549, -344, -354, 4274, -1369, -858, 1876, -695, -867, -1189, -671, -161, -1202, -347, 9, -2223, -1875, 1033, -5, -1376, -684, -2224, -339, -3594, -858, -1705, -2728, 848, -698, -1694, -507, -152, 848, -670, 2050, -5127, -508, -1375, 518, -1547, 505, 336, -343, 860, -330, -173, -4, -1025, 167, -175, -1027, -1193, 1027, 337};
//	ap_int<32> input[16] = { 3941, -1200, -345, -507, -1879, -1716, -1201, -2226, -3593, -168, -508, 160, -858, -164, 1019, -517};
	hls::stream<dataword> in;
	hls::stream<dataword> out;

	dataword temp;

	temp.data = 1;
	in.write(temp);

	for (int i=0; i < 768 / 16; i++) {
		for (int j=0; j < 16; j++) {
			temp.data.range(32*(j+1)-1, 32*j) = input[j + i*16];
		}

		in.write(temp);

	}

	layer_norm(in, out);

	for (int i=0; i < 768 / 16; i++) {
		temp = out.read();
		for (int j=0; j < 16; j++) {

			cout << ap_int<32>(temp.data.range(32*(j+1)-1, 32*j)) << " ";
		}

		cout<<endl;

	}

	//========================generate table======================================
//	ap_uint<32> table[65536];
//
//	for (int i=0; i<65536; i++) {
//		table[i] = 0;
//	}
//
//	for (int i=32768; i<65536; i++) {
//		ap_uint<32> sq = i*i;
//		ap_uint<16> addr = sq.range(31,16);
//		table[addr] = i;
//	}
//	ap_uint<32> table1[65536];
//
//	for (int i=0; i<65536; i++) {
//		table1[i] = 0;
//	}
//	for (int i=0; i<32768; i++) {
//		ap_uint<32> sq = i*i;
//		ap_uint<16> addr = sq.range(15,0);
//		table1[addr] = sq;
//	}
//
//	ofstream fout;
//	fout.open("/home/yu/research/reconfgi_galapagos/hls/layer_norm/src/table_values.hpp");
//	fout << "#pragma once" << endl;
//	fout << "#define SQRT_TABLE \\" << endl;
//
//	fout << "{ ";
//	for (int i=0; i<65536; i++) {
//		if (i<65535) fout << table1[i] << ", ";
//		else fout << table1[i];
//	}
//	fout << " }, \\" << endl;
//	fout << "{ ";
//	for (int i=0; i<65536; i++) {
//		if (i<65535) fout << table[i] << ", ";
//		else fout << table[i];
//	}
//	fout << " }" << endl;
//
//	fout.close();

	//========================divider test======================================
//		#define DECIMALS 15
//		ap_int<32> D_p = 33;
//		ap_int<32> shift = 0;
//		cout<<"stage0"<<endl;
//		int count =0;
//		while (D_p.range(31, DECIMALS) != 0) {
//			shift += 1;
//			D_p = D_p >> 1;
//			cout<<D_p<<endl;
//			count++;
//			if(count==32) break;
//		}
//		cout<<"shift: "<<shift<<endl;
//		cout<<"stage1"<<endl;
//		ap_int<32> x_init = (48 << DECIMALS) / 17 - (32 * D_p)/17;
//		cout<<"x_init: "<<x_init<<endl;
//
//		ap_int<32> read = 99;
//		ap_int<32> N_p = read >> shift;
//		ap_int<32> x = x_init;
//		cout<<"N_p: "<<N_p<<endl;
//		for (int i = 0; i < 3; i++) {
//			ap_int<32> b_p_x = (1 << DECIMALS) - ((D_p * x) >> DECIMALS);
//			x = x + ((x * b_p_x) >> DECIMALS);
//			cout<<"x: "<<x<<endl;
//		}
//		cout<<"stage2"<<endl;
//		//div = read / sum_val; // TODO: revert back to divide
//		ap_int<64> result = (N_p * x) >> DECIMALS;
//		cout<< "result: "<<result<<endl;
//		if (result[DECIMALS-1] == 1) {
//			result = (result >> DECIMALS) + 1;
//		} else {
//			result = result >> DECIMALS;
//		}
//		cout<<"stage3"<<endl;
//		cout<< "result: "<<result<<endl;
//		int ref =  99 / 33;
//		cout<<"ref: "<<ref<<endl;

	return 0;
}
















